
ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009278  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080093b4  080093b4  0000a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009508  08009508  0000b084  2**0
                  CONTENTS
  4 .ARM          00000008  08009508  08009508  0000a508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009510  08009510  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009510  08009510  0000a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009514  08009514  0000a514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08009518  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  20000084  0800959c  0000b084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800959c  0000b7a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162f9  00000000  00000000  0000b0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000383f  00000000  00000000  000213a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00024be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1b  00000000  00000000  00025f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bef6  00000000  00000000  00026e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8cb  00000000  00000000  00042d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b11a  00000000  00000000  0005d644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f875e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce4  00000000  00000000  000f87a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fe488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000084 	.word	0x20000084
 8000158:	00000000 	.word	0x00000000
 800015c:	0800939c 	.word	0x0800939c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000088 	.word	0x20000088
 8000178:	0800939c 	.word	0x0800939c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_drsub>:
 800018c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000190:	e002      	b.n	8000198 <__adddf3>
 8000192:	bf00      	nop

08000194 <__aeabi_dsub>:
 8000194:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000198 <__adddf3>:
 8000198:	b530      	push	{r4, r5, lr}
 800019a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a2:	ea94 0f05 	teq	r4, r5
 80001a6:	bf08      	it	eq
 80001a8:	ea90 0f02 	teqeq	r0, r2
 80001ac:	bf1f      	itttt	ne
 80001ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001be:	f000 80e2 	beq.w	8000386 <__adddf3+0x1ee>
 80001c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ca:	bfb8      	it	lt
 80001cc:	426d      	neglt	r5, r5
 80001ce:	dd0c      	ble.n	80001ea <__adddf3+0x52>
 80001d0:	442c      	add	r4, r5
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	ea82 0000 	eor.w	r0, r2, r0
 80001de:	ea83 0101 	eor.w	r1, r3, r1
 80001e2:	ea80 0202 	eor.w	r2, r0, r2
 80001e6:	ea81 0303 	eor.w	r3, r1, r3
 80001ea:	2d36      	cmp	r5, #54	@ 0x36
 80001ec:	bf88      	it	hi
 80001ee:	bd30      	pophi	{r4, r5, pc}
 80001f0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x70>
 8000202:	4240      	negs	r0, r0
 8000204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000208:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800020c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000210:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000214:	d002      	beq.n	800021c <__adddf3+0x84>
 8000216:	4252      	negs	r2, r2
 8000218:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021c:	ea94 0f05 	teq	r4, r5
 8000220:	f000 80a7 	beq.w	8000372 <__adddf3+0x1da>
 8000224:	f1a4 0401 	sub.w	r4, r4, #1
 8000228:	f1d5 0e20 	rsbs	lr, r5, #32
 800022c:	db0d      	blt.n	800024a <__adddf3+0xb2>
 800022e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000232:	fa22 f205 	lsr.w	r2, r2, r5
 8000236:	1880      	adds	r0, r0, r2
 8000238:	f141 0100 	adc.w	r1, r1, #0
 800023c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000240:	1880      	adds	r0, r0, r2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	4159      	adcs	r1, r3
 8000248:	e00e      	b.n	8000268 <__adddf3+0xd0>
 800024a:	f1a5 0520 	sub.w	r5, r5, #32
 800024e:	f10e 0e20 	add.w	lr, lr, #32
 8000252:	2a01      	cmp	r2, #1
 8000254:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000258:	bf28      	it	cs
 800025a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025e:	fa43 f305 	asr.w	r3, r3, r5
 8000262:	18c0      	adds	r0, r0, r3
 8000264:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000268:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800026c:	d507      	bpl.n	800027e <__adddf3+0xe6>
 800026e:	f04f 0e00 	mov.w	lr, #0
 8000272:	f1dc 0c00 	rsbs	ip, ip, #0
 8000276:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027a:	eb6e 0101 	sbc.w	r1, lr, r1
 800027e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000282:	d31b      	bcc.n	80002bc <__adddf3+0x124>
 8000284:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000288:	d30c      	bcc.n	80002a4 <__adddf3+0x10c>
 800028a:	0849      	lsrs	r1, r1, #1
 800028c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000290:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000294:	f104 0401 	add.w	r4, r4, #1
 8000298:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800029c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a0:	f080 809a 	bcs.w	80003d8 <__adddf3+0x240>
 80002a4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a8:	bf08      	it	eq
 80002aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ae:	f150 0000 	adcs.w	r0, r0, #0
 80002b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b6:	ea41 0105 	orr.w	r1, r1, r5
 80002ba:	bd30      	pop	{r4, r5, pc}
 80002bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c0:	4140      	adcs	r0, r0
 80002c2:	eb41 0101 	adc.w	r1, r1, r1
 80002c6:	3c01      	subs	r4, #1
 80002c8:	bf28      	it	cs
 80002ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ce:	d2e9      	bcs.n	80002a4 <__adddf3+0x10c>
 80002d0:	f091 0f00 	teq	r1, #0
 80002d4:	bf04      	itt	eq
 80002d6:	4601      	moveq	r1, r0
 80002d8:	2000      	moveq	r0, #0
 80002da:	fab1 f381 	clz	r3, r1
 80002de:	bf08      	it	eq
 80002e0:	3320      	addeq	r3, #32
 80002e2:	f1a3 030b 	sub.w	r3, r3, #11
 80002e6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ea:	da0c      	bge.n	8000306 <__adddf3+0x16e>
 80002ec:	320c      	adds	r2, #12
 80002ee:	dd08      	ble.n	8000302 <__adddf3+0x16a>
 80002f0:	f102 0c14 	add.w	ip, r2, #20
 80002f4:	f1c2 020c 	rsb	r2, r2, #12
 80002f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000300:	e00c      	b.n	800031c <__adddf3+0x184>
 8000302:	f102 0214 	add.w	r2, r2, #20
 8000306:	bfd8      	it	le
 8000308:	f1c2 0c20 	rsble	ip, r2, #32
 800030c:	fa01 f102 	lsl.w	r1, r1, r2
 8000310:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000314:	bfdc      	itt	le
 8000316:	ea41 010c 	orrle.w	r1, r1, ip
 800031a:	4090      	lslle	r0, r2
 800031c:	1ae4      	subs	r4, r4, r3
 800031e:	bfa2      	ittt	ge
 8000320:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000324:	4329      	orrge	r1, r5
 8000326:	bd30      	popge	{r4, r5, pc}
 8000328:	ea6f 0404 	mvn.w	r4, r4
 800032c:	3c1f      	subs	r4, #31
 800032e:	da1c      	bge.n	800036a <__adddf3+0x1d2>
 8000330:	340c      	adds	r4, #12
 8000332:	dc0e      	bgt.n	8000352 <__adddf3+0x1ba>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0220 	rsb	r2, r4, #32
 800033c:	fa20 f004 	lsr.w	r0, r0, r4
 8000340:	fa01 f302 	lsl.w	r3, r1, r2
 8000344:	ea40 0003 	orr.w	r0, r0, r3
 8000348:	fa21 f304 	lsr.w	r3, r1, r4
 800034c:	ea45 0103 	orr.w	r1, r5, r3
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	f1c4 040c 	rsb	r4, r4, #12
 8000356:	f1c4 0220 	rsb	r2, r4, #32
 800035a:	fa20 f002 	lsr.w	r0, r0, r2
 800035e:	fa01 f304 	lsl.w	r3, r1, r4
 8000362:	ea40 0003 	orr.w	r0, r0, r3
 8000366:	4629      	mov	r1, r5
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	fa21 f004 	lsr.w	r0, r1, r4
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	f094 0f00 	teq	r4, #0
 8000376:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037a:	bf06      	itte	eq
 800037c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000380:	3401      	addeq	r4, #1
 8000382:	3d01      	subne	r5, #1
 8000384:	e74e      	b.n	8000224 <__adddf3+0x8c>
 8000386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038a:	bf18      	it	ne
 800038c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000390:	d029      	beq.n	80003e6 <__adddf3+0x24e>
 8000392:	ea94 0f05 	teq	r4, r5
 8000396:	bf08      	it	eq
 8000398:	ea90 0f02 	teqeq	r0, r2
 800039c:	d005      	beq.n	80003aa <__adddf3+0x212>
 800039e:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a2:	bf04      	itt	eq
 80003a4:	4619      	moveq	r1, r3
 80003a6:	4610      	moveq	r0, r2
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea91 0f03 	teq	r1, r3
 80003ae:	bf1e      	ittt	ne
 80003b0:	2100      	movne	r1, #0
 80003b2:	2000      	movne	r0, #0
 80003b4:	bd30      	popne	{r4, r5, pc}
 80003b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ba:	d105      	bne.n	80003c8 <__adddf3+0x230>
 80003bc:	0040      	lsls	r0, r0, #1
 80003be:	4149      	adcs	r1, r1
 80003c0:	bf28      	it	cs
 80003c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003cc:	bf3c      	itt	cc
 80003ce:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d2:	bd30      	popcc	{r4, r5, pc}
 80003d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003dc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf1a      	itte	ne
 80003ec:	4619      	movne	r1, r3
 80003ee:	4610      	movne	r0, r2
 80003f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f4:	bf1c      	itt	ne
 80003f6:	460b      	movne	r3, r1
 80003f8:	4602      	movne	r2, r0
 80003fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fe:	bf06      	itte	eq
 8000400:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000404:	ea91 0f03 	teqeq	r1, r3
 8000408:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	bf00      	nop

08000410 <__aeabi_ui2d>:
 8000410:	f090 0f00 	teq	r0, #0
 8000414:	bf04      	itt	eq
 8000416:	2100      	moveq	r1, #0
 8000418:	4770      	bxeq	lr
 800041a:	b530      	push	{r4, r5, lr}
 800041c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000420:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000424:	f04f 0500 	mov.w	r5, #0
 8000428:	f04f 0100 	mov.w	r1, #0
 800042c:	e750      	b.n	80002d0 <__adddf3+0x138>
 800042e:	bf00      	nop

08000430 <__aeabi_i2d>:
 8000430:	f090 0f00 	teq	r0, #0
 8000434:	bf04      	itt	eq
 8000436:	2100      	moveq	r1, #0
 8000438:	4770      	bxeq	lr
 800043a:	b530      	push	{r4, r5, lr}
 800043c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000440:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000444:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000448:	bf48      	it	mi
 800044a:	4240      	negmi	r0, r0
 800044c:	f04f 0100 	mov.w	r1, #0
 8000450:	e73e      	b.n	80002d0 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_f2d>:
 8000454:	0042      	lsls	r2, r0, #1
 8000456:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045a:	ea4f 0131 	mov.w	r1, r1, rrx
 800045e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000462:	bf1f      	itttt	ne
 8000464:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000468:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800046c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000470:	4770      	bxne	lr
 8000472:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000476:	bf08      	it	eq
 8000478:	4770      	bxeq	lr
 800047a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047e:	bf04      	itt	eq
 8000480:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000494:	e71c      	b.n	80002d0 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_ul2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f04f 0500 	mov.w	r5, #0
 80004a6:	e00a      	b.n	80004be <__aeabi_l2d+0x16>

080004a8 <__aeabi_l2d>:
 80004a8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ac:	bf08      	it	eq
 80004ae:	4770      	bxeq	lr
 80004b0:	b530      	push	{r4, r5, lr}
 80004b2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b6:	d502      	bpl.n	80004be <__aeabi_l2d+0x16>
 80004b8:	4240      	negs	r0, r0
 80004ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004be:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ca:	f43f aed8 	beq.w	800027e <__adddf3+0xe6>
 80004ce:	f04f 0203 	mov.w	r2, #3
 80004d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d6:	bf18      	it	ne
 80004d8:	3203      	addne	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e6:	f1c2 0320 	rsb	r3, r2, #32
 80004ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f6:	ea40 000e 	orr.w	r0, r0, lr
 80004fa:	fa21 f102 	lsr.w	r1, r1, r2
 80004fe:	4414      	add	r4, r2
 8000500:	e6bd      	b.n	800027e <__adddf3+0xe6>
 8000502:	bf00      	nop

08000504 <__aeabi_d2f>:
 8000504:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000508:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800050c:	bf24      	itt	cs
 800050e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000512:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000516:	d90d      	bls.n	8000534 <__aeabi_d2f+0x30>
 8000518:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800051c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000520:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000524:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000528:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800052c:	bf08      	it	eq
 800052e:	f020 0001 	biceq.w	r0, r0, #1
 8000532:	4770      	bx	lr
 8000534:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000538:	d121      	bne.n	800057e <__aeabi_d2f+0x7a>
 800053a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800053e:	bfbc      	itt	lt
 8000540:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000544:	4770      	bxlt	lr
 8000546:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800054a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800054e:	f1c2 0218 	rsb	r2, r2, #24
 8000552:	f1c2 0c20 	rsb	ip, r2, #32
 8000556:	fa10 f30c 	lsls.w	r3, r0, ip
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	bf18      	it	ne
 8000560:	f040 0001 	orrne.w	r0, r0, #1
 8000564:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000568:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800056c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000570:	ea40 000c 	orr.w	r0, r0, ip
 8000574:	fa23 f302 	lsr.w	r3, r3, r2
 8000578:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800057c:	e7cc      	b.n	8000518 <__aeabi_d2f+0x14>
 800057e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000582:	d107      	bne.n	8000594 <__aeabi_d2f+0x90>
 8000584:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000588:	bf1e      	ittt	ne
 800058a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800058e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000592:	4770      	bxne	lr
 8000594:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000598:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800059c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <__aeabi_frsub>:
 80005a4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005a8:	e002      	b.n	80005b0 <__addsf3>
 80005aa:	bf00      	nop

080005ac <__aeabi_fsub>:
 80005ac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080005b0 <__addsf3>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	bf1f      	itttt	ne
 80005b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005b8:	ea92 0f03 	teqne	r2, r3
 80005bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005c4:	d06a      	beq.n	800069c <__addsf3+0xec>
 80005c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005ce:	bfc1      	itttt	gt
 80005d0:	18d2      	addgt	r2, r2, r3
 80005d2:	4041      	eorgt	r1, r0
 80005d4:	4048      	eorgt	r0, r1
 80005d6:	4041      	eorgt	r1, r0
 80005d8:	bfb8      	it	lt
 80005da:	425b      	neglt	r3, r3
 80005dc:	2b19      	cmp	r3, #25
 80005de:	bf88      	it	hi
 80005e0:	4770      	bxhi	lr
 80005e2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005e6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005ea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005ee:	bf18      	it	ne
 80005f0:	4240      	negne	r0, r0
 80005f2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005f6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005fa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80005fe:	bf18      	it	ne
 8000600:	4249      	negne	r1, r1
 8000602:	ea92 0f03 	teq	r2, r3
 8000606:	d03f      	beq.n	8000688 <__addsf3+0xd8>
 8000608:	f1a2 0201 	sub.w	r2, r2, #1
 800060c:	fa41 fc03 	asr.w	ip, r1, r3
 8000610:	eb10 000c 	adds.w	r0, r0, ip
 8000614:	f1c3 0320 	rsb	r3, r3, #32
 8000618:	fa01 f103 	lsl.w	r1, r1, r3
 800061c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000620:	d502      	bpl.n	8000628 <__addsf3+0x78>
 8000622:	4249      	negs	r1, r1
 8000624:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000628:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800062c:	d313      	bcc.n	8000656 <__addsf3+0xa6>
 800062e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000632:	d306      	bcc.n	8000642 <__addsf3+0x92>
 8000634:	0840      	lsrs	r0, r0, #1
 8000636:	ea4f 0131 	mov.w	r1, r1, rrx
 800063a:	f102 0201 	add.w	r2, r2, #1
 800063e:	2afe      	cmp	r2, #254	@ 0xfe
 8000640:	d251      	bcs.n	80006e6 <__addsf3+0x136>
 8000642:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000646:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800064a:	bf08      	it	eq
 800064c:	f020 0001 	biceq.w	r0, r0, #1
 8000650:	ea40 0003 	orr.w	r0, r0, r3
 8000654:	4770      	bx	lr
 8000656:	0049      	lsls	r1, r1, #1
 8000658:	eb40 0000 	adc.w	r0, r0, r0
 800065c:	3a01      	subs	r2, #1
 800065e:	bf28      	it	cs
 8000660:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000664:	d2ed      	bcs.n	8000642 <__addsf3+0x92>
 8000666:	fab0 fc80 	clz	ip, r0
 800066a:	f1ac 0c08 	sub.w	ip, ip, #8
 800066e:	ebb2 020c 	subs.w	r2, r2, ip
 8000672:	fa00 f00c 	lsl.w	r0, r0, ip
 8000676:	bfaa      	itet	ge
 8000678:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800067c:	4252      	neglt	r2, r2
 800067e:	4318      	orrge	r0, r3
 8000680:	bfbc      	itt	lt
 8000682:	40d0      	lsrlt	r0, r2
 8000684:	4318      	orrlt	r0, r3
 8000686:	4770      	bx	lr
 8000688:	f092 0f00 	teq	r2, #0
 800068c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000690:	bf06      	itte	eq
 8000692:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000696:	3201      	addeq	r2, #1
 8000698:	3b01      	subne	r3, #1
 800069a:	e7b5      	b.n	8000608 <__addsf3+0x58>
 800069c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006a4:	bf18      	it	ne
 80006a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006aa:	d021      	beq.n	80006f0 <__addsf3+0x140>
 80006ac:	ea92 0f03 	teq	r2, r3
 80006b0:	d004      	beq.n	80006bc <__addsf3+0x10c>
 80006b2:	f092 0f00 	teq	r2, #0
 80006b6:	bf08      	it	eq
 80006b8:	4608      	moveq	r0, r1
 80006ba:	4770      	bx	lr
 80006bc:	ea90 0f01 	teq	r0, r1
 80006c0:	bf1c      	itt	ne
 80006c2:	2000      	movne	r0, #0
 80006c4:	4770      	bxne	lr
 80006c6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80006ca:	d104      	bne.n	80006d6 <__addsf3+0x126>
 80006cc:	0040      	lsls	r0, r0, #1
 80006ce:	bf28      	it	cs
 80006d0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80006d4:	4770      	bx	lr
 80006d6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80006da:	bf3c      	itt	cc
 80006dc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006e0:	4770      	bxcc	lr
 80006e2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006e6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006ea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006ee:	4770      	bx	lr
 80006f0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006f4:	bf16      	itet	ne
 80006f6:	4608      	movne	r0, r1
 80006f8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006fc:	4601      	movne	r1, r0
 80006fe:	0242      	lsls	r2, r0, #9
 8000700:	bf06      	itte	eq
 8000702:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000706:	ea90 0f01 	teqeq	r0, r1
 800070a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800070e:	4770      	bx	lr

08000710 <__aeabi_ui2f>:
 8000710:	f04f 0300 	mov.w	r3, #0
 8000714:	e004      	b.n	8000720 <__aeabi_i2f+0x8>
 8000716:	bf00      	nop

08000718 <__aeabi_i2f>:
 8000718:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800071c:	bf48      	it	mi
 800071e:	4240      	negmi	r0, r0
 8000720:	ea5f 0c00 	movs.w	ip, r0
 8000724:	bf08      	it	eq
 8000726:	4770      	bxeq	lr
 8000728:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800072c:	4601      	mov	r1, r0
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	e01c      	b.n	800076e <__aeabi_l2f+0x2a>

08000734 <__aeabi_ul2f>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	f04f 0300 	mov.w	r3, #0
 8000740:	e00a      	b.n	8000758 <__aeabi_l2f+0x14>
 8000742:	bf00      	nop

08000744 <__aeabi_l2f>:
 8000744:	ea50 0201 	orrs.w	r2, r0, r1
 8000748:	bf08      	it	eq
 800074a:	4770      	bxeq	lr
 800074c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000750:	d502      	bpl.n	8000758 <__aeabi_l2f+0x14>
 8000752:	4240      	negs	r0, r0
 8000754:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000758:	ea5f 0c01 	movs.w	ip, r1
 800075c:	bf02      	ittt	eq
 800075e:	4684      	moveq	ip, r0
 8000760:	4601      	moveq	r1, r0
 8000762:	2000      	moveq	r0, #0
 8000764:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000768:	bf08      	it	eq
 800076a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800076e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000772:	fabc f28c 	clz	r2, ip
 8000776:	3a08      	subs	r2, #8
 8000778:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800077c:	db10      	blt.n	80007a0 <__aeabi_l2f+0x5c>
 800077e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000782:	4463      	add	r3, ip
 8000784:	fa00 fc02 	lsl.w	ip, r0, r2
 8000788:	f1c2 0220 	rsb	r2, r2, #32
 800078c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000790:	fa20 f202 	lsr.w	r2, r0, r2
 8000794:	eb43 0002 	adc.w	r0, r3, r2
 8000798:	bf08      	it	eq
 800079a:	f020 0001 	biceq.w	r0, r0, #1
 800079e:	4770      	bx	lr
 80007a0:	f102 0220 	add.w	r2, r2, #32
 80007a4:	fa01 fc02 	lsl.w	ip, r1, r2
 80007a8:	f1c2 0220 	rsb	r2, r2, #32
 80007ac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007b0:	fa21 f202 	lsr.w	r2, r1, r2
 80007b4:	eb43 0002 	adc.w	r0, r3, r2
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007be:	4770      	bx	lr

080007c0 <__aeabi_fmul>:
 80007c0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007c8:	bf1e      	ittt	ne
 80007ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007ce:	ea92 0f0c 	teqne	r2, ip
 80007d2:	ea93 0f0c 	teqne	r3, ip
 80007d6:	d06f      	beq.n	80008b8 <__aeabi_fmul+0xf8>
 80007d8:	441a      	add	r2, r3
 80007da:	ea80 0c01 	eor.w	ip, r0, r1
 80007de:	0240      	lsls	r0, r0, #9
 80007e0:	bf18      	it	ne
 80007e2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007e6:	d01e      	beq.n	8000826 <__aeabi_fmul+0x66>
 80007e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007ec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007f0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007f4:	fba0 3101 	umull	r3, r1, r0, r1
 80007f8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80007fc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000800:	bf3e      	ittt	cc
 8000802:	0049      	lslcc	r1, r1, #1
 8000804:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000808:	005b      	lslcc	r3, r3, #1
 800080a:	ea40 0001 	orr.w	r0, r0, r1
 800080e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000812:	2afd      	cmp	r2, #253	@ 0xfd
 8000814:	d81d      	bhi.n	8000852 <__aeabi_fmul+0x92>
 8000816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800081a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800081e:	bf08      	it	eq
 8000820:	f020 0001 	biceq.w	r0, r0, #1
 8000824:	4770      	bx	lr
 8000826:	f090 0f00 	teq	r0, #0
 800082a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800082e:	bf08      	it	eq
 8000830:	0249      	lsleq	r1, r1, #9
 8000832:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000836:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800083a:	3a7f      	subs	r2, #127	@ 0x7f
 800083c:	bfc2      	ittt	gt
 800083e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000842:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000846:	4770      	bxgt	lr
 8000848:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	3a01      	subs	r2, #1
 8000852:	dc5d      	bgt.n	8000910 <__aeabi_fmul+0x150>
 8000854:	f112 0f19 	cmn.w	r2, #25
 8000858:	bfdc      	itt	le
 800085a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800085e:	4770      	bxle	lr
 8000860:	f1c2 0200 	rsb	r2, r2, #0
 8000864:	0041      	lsls	r1, r0, #1
 8000866:	fa21 f102 	lsr.w	r1, r1, r2
 800086a:	f1c2 0220 	rsb	r2, r2, #32
 800086e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000872:	ea5f 0031 	movs.w	r0, r1, rrx
 8000876:	f140 0000 	adc.w	r0, r0, #0
 800087a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800087e:	bf08      	it	eq
 8000880:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000884:	4770      	bx	lr
 8000886:	f092 0f00 	teq	r2, #0
 800088a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800088e:	bf02      	ittt	eq
 8000890:	0040      	lsleq	r0, r0, #1
 8000892:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000896:	3a01      	subeq	r2, #1
 8000898:	d0f9      	beq.n	800088e <__aeabi_fmul+0xce>
 800089a:	ea40 000c 	orr.w	r0, r0, ip
 800089e:	f093 0f00 	teq	r3, #0
 80008a2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a6:	bf02      	ittt	eq
 80008a8:	0049      	lsleq	r1, r1, #1
 80008aa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80008ae:	3b01      	subeq	r3, #1
 80008b0:	d0f9      	beq.n	80008a6 <__aeabi_fmul+0xe6>
 80008b2:	ea41 010c 	orr.w	r1, r1, ip
 80008b6:	e78f      	b.n	80007d8 <__aeabi_fmul+0x18>
 80008b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008bc:	ea92 0f0c 	teq	r2, ip
 80008c0:	bf18      	it	ne
 80008c2:	ea93 0f0c 	teqne	r3, ip
 80008c6:	d00a      	beq.n	80008de <__aeabi_fmul+0x11e>
 80008c8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80008cc:	bf18      	it	ne
 80008ce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80008d2:	d1d8      	bne.n	8000886 <__aeabi_fmul+0xc6>
 80008d4:	ea80 0001 	eor.w	r0, r0, r1
 80008d8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008dc:	4770      	bx	lr
 80008de:	f090 0f00 	teq	r0, #0
 80008e2:	bf17      	itett	ne
 80008e4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80008e8:	4608      	moveq	r0, r1
 80008ea:	f091 0f00 	teqne	r1, #0
 80008ee:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80008f2:	d014      	beq.n	800091e <__aeabi_fmul+0x15e>
 80008f4:	ea92 0f0c 	teq	r2, ip
 80008f8:	d101      	bne.n	80008fe <__aeabi_fmul+0x13e>
 80008fa:	0242      	lsls	r2, r0, #9
 80008fc:	d10f      	bne.n	800091e <__aeabi_fmul+0x15e>
 80008fe:	ea93 0f0c 	teq	r3, ip
 8000902:	d103      	bne.n	800090c <__aeabi_fmul+0x14c>
 8000904:	024b      	lsls	r3, r1, #9
 8000906:	bf18      	it	ne
 8000908:	4608      	movne	r0, r1
 800090a:	d108      	bne.n	800091e <__aeabi_fmul+0x15e>
 800090c:	ea80 0001 	eor.w	r0, r0, r1
 8000910:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000914:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000918:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800091c:	4770      	bx	lr
 800091e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000922:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000926:	4770      	bx	lr

08000928 <__aeabi_fdiv>:
 8000928:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800092c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000930:	bf1e      	ittt	ne
 8000932:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000936:	ea92 0f0c 	teqne	r2, ip
 800093a:	ea93 0f0c 	teqne	r3, ip
 800093e:	d069      	beq.n	8000a14 <__aeabi_fdiv+0xec>
 8000940:	eba2 0203 	sub.w	r2, r2, r3
 8000944:	ea80 0c01 	eor.w	ip, r0, r1
 8000948:	0249      	lsls	r1, r1, #9
 800094a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800094e:	d037      	beq.n	80009c0 <__aeabi_fdiv+0x98>
 8000950:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000954:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000958:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000960:	428b      	cmp	r3, r1
 8000962:	bf38      	it	cc
 8000964:	005b      	lslcc	r3, r3, #1
 8000966:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800096a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800096e:	428b      	cmp	r3, r1
 8000970:	bf24      	itt	cs
 8000972:	1a5b      	subcs	r3, r3, r1
 8000974:	ea40 000c 	orrcs.w	r0, r0, ip
 8000978:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800097c:	bf24      	itt	cs
 800097e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000982:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000986:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800098a:	bf24      	itt	cs
 800098c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000990:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000994:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000998:	bf24      	itt	cs
 800099a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800099e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	bf18      	it	ne
 80009a6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009aa:	d1e0      	bne.n	800096e <__aeabi_fdiv+0x46>
 80009ac:	2afd      	cmp	r2, #253	@ 0xfd
 80009ae:	f63f af50 	bhi.w	8000852 <__aeabi_fmul+0x92>
 80009b2:	428b      	cmp	r3, r1
 80009b4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009b8:	bf08      	it	eq
 80009ba:	f020 0001 	biceq.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009c4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009c8:	327f      	adds	r2, #127	@ 0x7f
 80009ca:	bfc2      	ittt	gt
 80009cc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009d0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009d4:	4770      	bxgt	lr
 80009d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	3a01      	subs	r2, #1
 80009e0:	e737      	b.n	8000852 <__aeabi_fmul+0x92>
 80009e2:	f092 0f00 	teq	r2, #0
 80009e6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009ea:	bf02      	ittt	eq
 80009ec:	0040      	lsleq	r0, r0, #1
 80009ee:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009f2:	3a01      	subeq	r2, #1
 80009f4:	d0f9      	beq.n	80009ea <__aeabi_fdiv+0xc2>
 80009f6:	ea40 000c 	orr.w	r0, r0, ip
 80009fa:	f093 0f00 	teq	r3, #0
 80009fe:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a02:	bf02      	ittt	eq
 8000a04:	0049      	lsleq	r1, r1, #1
 8000a06:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a0a:	3b01      	subeq	r3, #1
 8000a0c:	d0f9      	beq.n	8000a02 <__aeabi_fdiv+0xda>
 8000a0e:	ea41 010c 	orr.w	r1, r1, ip
 8000a12:	e795      	b.n	8000940 <__aeabi_fdiv+0x18>
 8000a14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a18:	ea92 0f0c 	teq	r2, ip
 8000a1c:	d108      	bne.n	8000a30 <__aeabi_fdiv+0x108>
 8000a1e:	0242      	lsls	r2, r0, #9
 8000a20:	f47f af7d 	bne.w	800091e <__aeabi_fmul+0x15e>
 8000a24:	ea93 0f0c 	teq	r3, ip
 8000a28:	f47f af70 	bne.w	800090c <__aeabi_fmul+0x14c>
 8000a2c:	4608      	mov	r0, r1
 8000a2e:	e776      	b.n	800091e <__aeabi_fmul+0x15e>
 8000a30:	ea93 0f0c 	teq	r3, ip
 8000a34:	d104      	bne.n	8000a40 <__aeabi_fdiv+0x118>
 8000a36:	024b      	lsls	r3, r1, #9
 8000a38:	f43f af4c 	beq.w	80008d4 <__aeabi_fmul+0x114>
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	e76e      	b.n	800091e <__aeabi_fmul+0x15e>
 8000a40:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a44:	bf18      	it	ne
 8000a46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a4a:	d1ca      	bne.n	80009e2 <__aeabi_fdiv+0xba>
 8000a4c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a50:	f47f af5c 	bne.w	800090c <__aeabi_fmul+0x14c>
 8000a54:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a58:	f47f af3c 	bne.w	80008d4 <__aeabi_fmul+0x114>
 8000a5c:	e75f      	b.n	800091e <__aeabi_fmul+0x15e>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_f2iz>:
 8000a60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a64:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a68:	d30f      	bcc.n	8000a8a <__aeabi_f2iz+0x2a>
 8000a6a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_f2iz+0x30>
 8000a74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a80:	fa23 f002 	lsr.w	r0, r3, r2
 8000a84:	bf18      	it	ne
 8000a86:	4240      	negne	r0, r0
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr
 8000a90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a94:	d101      	bne.n	8000a9a <__aeabi_f2iz+0x3a>
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	d105      	bne.n	8000aa6 <__aeabi_f2iz+0x46>
 8000a9a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000a9e:	bf08      	it	eq
 8000aa0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_f2uiz>:
 8000aac:	0042      	lsls	r2, r0, #1
 8000aae:	d20e      	bcs.n	8000ace <__aeabi_f2uiz+0x22>
 8000ab0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ab4:	d30b      	bcc.n	8000ace <__aeabi_f2uiz+0x22>
 8000ab6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000aba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000abe:	d409      	bmi.n	8000ad4 <__aeabi_f2uiz+0x28>
 8000ac0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ac4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac8:	fa23 f002 	lsr.w	r0, r3, r2
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	4770      	bx	lr
 8000ad4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ad8:	d101      	bne.n	8000ade <__aeabi_f2uiz+0x32>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_f2uiz+0x38>
 8000ade:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b968 	b.w	8000dd4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b52:	fb07 1114 	mls	r1, r7, r4, r1
 8000b56:	fa1f f68c 	uxth.w	r6, ip
 8000b5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8110 	bcs.w	8000d96 <__udivmoddi4+0x27a>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810d 	bls.w	8000d96 <__udivmoddi4+0x27a>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b86:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8a:	fb00 f606 	mul.w	r6, r0, r6
 8000b8e:	fa1f f38e 	uxth.w	r3, lr
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fa 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f7 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	1b9b      	subs	r3, r3, r6
 8000bb4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80ee 	bcc.w	8000dc4 <__udivmoddi4+0x2a8>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 808f 	bne.w	8000d1e <__udivmoddi4+0x202>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	2101      	movs	r1, #1
 8000c06:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	fb08 4416 	mls	r4, r8, r6, r4
 8000c16:	fb07 f006 	mul.w	r0, r7, r6
 8000c1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000c42:	fb00 f707 	mul.w	r7, r0, r7
 8000c46:	fa1f f38e 	uxth.w	r3, lr
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80ae 	bhi.w	8000dbe <__udivmoddi4+0x2a2>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0720 	rsb	r7, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa24 f607 	lsr.w	r6, r4, r7
 8000c7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c82:	fbb6 f8f9 	udiv	r8, r6, r9
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	fb09 6618 	mls	r6, r9, r8, r6
 8000c8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c92:	408c      	lsls	r4, r1
 8000c94:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c98:	fb08 f00e 	mul.w	r0, r8, lr
 8000c9c:	431c      	orrs	r4, r3
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ca4:	4298      	cmp	r0, r3
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb0:	f108 36ff 	add.w	r6, r8, #4294967295
 8000cb4:	f080 8081 	bcs.w	8000dba <__udivmoddi4+0x29e>
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	d97e      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000cbc:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc0:	4463      	add	r3, ip
 8000cc2:	1a1e      	subs	r6, r3, r0
 8000cc4:	fbb6 f3f9 	udiv	r3, r6, r9
 8000cc8:	fb09 6613 	mls	r6, r9, r3, r6
 8000ccc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd0:	b2a4      	uxth	r4, r4
 8000cd2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x1d0>
 8000cda:	eb1c 0404 	adds.w	r4, ip, r4
 8000cde:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce2:	d266      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d964      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000ce8:	3b02      	subs	r3, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000cf0:	fba0 8302 	umull	r8, r3, r0, r2
 8000cf4:	eba4 040e 	sub.w	r4, r4, lr
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	46c6      	mov	lr, r8
 8000cfc:	461e      	mov	r6, r3
 8000cfe:	d350      	bcc.n	8000da2 <__udivmoddi4+0x286>
 8000d00:	d04d      	beq.n	8000d9e <__udivmoddi4+0x282>
 8000d02:	b155      	cbz	r5, 8000d1a <__udivmoddi4+0x1fe>
 8000d04:	ebba 030e 	subs.w	r3, sl, lr
 8000d08:	eb64 0406 	sbc.w	r4, r4, r6
 8000d0c:	fa04 f707 	lsl.w	r7, r4, r7
 8000d10:	40cb      	lsrs	r3, r1
 8000d12:	431f      	orrs	r7, r3
 8000d14:	40cc      	lsrs	r4, r1
 8000d16:	e9c5 7400 	strd	r7, r4, [r5]
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	e751      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d34:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d38:	fb08 1110 	mls	r1, r8, r0, r1
 8000d3c:	4094      	lsls	r4, r2
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	0c23      	lsrs	r3, r4, #16
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f107 	mul.w	r1, r0, r7
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x248>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5a:	d22c      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d92a      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000d60:	3802      	subs	r0, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d6a:	fb08 3311 	mls	r3, r8, r1, r3
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb01 f307 	mul.w	r3, r1, r7
 8000d78:	42a3      	cmp	r3, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x272>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d84:	d213      	bcs.n	8000dae <__udivmoddi4+0x292>
 8000d86:	42a3      	cmp	r3, r4
 8000d88:	d911      	bls.n	8000dae <__udivmoddi4+0x292>
 8000d8a:	3902      	subs	r1, #2
 8000d8c:	4464      	add	r4, ip
 8000d8e:	1ae4      	subs	r4, r4, r3
 8000d90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d94:	e73b      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d96:	4604      	mov	r4, r0
 8000d98:	e6f2      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e708      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000d9e:	45c2      	cmp	sl, r8
 8000da0:	d2af      	bcs.n	8000d02 <__udivmoddi4+0x1e6>
 8000da2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da6:	eb63 060c 	sbc.w	r6, r3, ip
 8000daa:	3801      	subs	r0, #1
 8000dac:	e7a9      	b.n	8000d02 <__udivmoddi4+0x1e6>
 8000dae:	4631      	mov	r1, r6
 8000db0:	e7ed      	b.n	8000d8e <__udivmoddi4+0x272>
 8000db2:	4603      	mov	r3, r0
 8000db4:	e79a      	b.n	8000cec <__udivmoddi4+0x1d0>
 8000db6:	4630      	mov	r0, r6
 8000db8:	e7d4      	b.n	8000d64 <__udivmoddi4+0x248>
 8000dba:	46b0      	mov	r8, r6
 8000dbc:	e781      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dbe:	4463      	add	r3, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e74f      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	4608      	mov	r0, r1
 8000dca:	e711      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dcc:	3e02      	subs	r6, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000dde:	4b4e      	ldr	r3, [pc, #312]	@ (8000f18 <MX_BlueNRG_MS_Init+0x140>)
 8000de0:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000de2:	f000 f8ad 	bl	8000f40 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f002 fe68 	bl	8003abc <BSP_PB_GetState>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b4a      	ldr	r3, [pc, #296]	@ (8000f1c <MX_BlueNRG_MS_Init+0x144>)
 8000df2:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000df4:	2100      	movs	r1, #0
 8000df6:	484a      	ldr	r0, [pc, #296]	@ (8000f20 <MX_BlueNRG_MS_Init+0x148>)
 8000df8:	f006 fde0 	bl	80079bc <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000dfc:	1dba      	adds	r2, r7, #6
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f006 fc4f 	bl	80076a8 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000e0a:	f006 fc91 	bl	8007730 <hci_reset>
  HAL_Delay(100);
 8000e0e:	2064      	movs	r0, #100	@ 0x64
 8000e10:	f002 ffec 	bl	8003dec <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000e14:	7a3b      	ldrb	r3, [r7, #8]
 8000e16:	2b30      	cmp	r3, #48	@ 0x30
 8000e18:	d902      	bls.n	8000e20 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000e1a:	4b42      	ldr	r3, [pc, #264]	@ (8000f24 <MX_BlueNRG_MS_Init+0x14c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000e20:	f107 0209 	add.w	r2, r7, #9
 8000e24:	4b40      	ldr	r3, [pc, #256]	@ (8000f28 <MX_BlueNRG_MS_Init+0x150>)
 8000e26:	2106      	movs	r1, #6
 8000e28:	2080      	movs	r0, #128	@ 0x80
 8000e2a:	f006 fbb7 	bl	800759c <aci_hal_read_config_data>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000e32:	4b3d      	ldr	r3, [pc, #244]	@ (8000f28 <MX_BlueNRG_MS_Init+0x150>)
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8000e3c:	d001      	beq.n	8000e42 <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000e3e:	bf00      	nop
 8000e40:	e7fd      	b.n	8000e3e <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000e42:	f006 f977 	bl	8007134 <aci_gatt_init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000e4a:	4b36      	ldr	r3, [pc, #216]	@ (8000f24 <MX_BlueNRG_MS_Init+0x14c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d110      	bne.n	8000e74 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000e52:	f107 020e 	add.w	r2, r7, #14
 8000e56:	f107 030a 	add.w	r3, r7, #10
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4613      	mov	r3, r2
 8000e64:	2207      	movs	r2, #7
 8000e66:	2100      	movs	r1, #0
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f005 ff37 	bl	8006cdc <aci_gap_init_IDB05A1>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	e00a      	b.n	8000e8a <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000e74:	f107 030a 	add.w	r3, r7, #10
 8000e78:	f107 020c 	add.w	r2, r7, #12
 8000e7c:	f107 010e 	add.w	r1, r7, #14
 8000e80:	2001      	movs	r0, #1
 8000e82:	f005 ff7b 	bl	8006d7c <aci_gap_init_IDB04A1>
 8000e86:	4603      	mov	r3, r0
 8000e88:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000e8a:	89fc      	ldrh	r4, [r7, #14]
 8000e8c:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff f974 	bl	800017c <strlen>
 8000e94:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f006 fabd 	bl	8007422 <aci_gatt_update_char_value>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000eb2:	bf00      	nop
 8000eb4:	e7fd      	b.n	8000eb2 <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <MX_BlueNRG_MS_Init+0x154>)
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f006 f889 	bl	8006fe4 <aci_gap_set_auth_requirement>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000ee0:	f001 fab4 	bl	800244c <Add_HWServW2ST_Service>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000eee:	bf00      	nop
 8000ef0:	e7fd      	b.n	8000eee <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8000ef2:	f001 fb7d 	bl	80025f0 <Add_SWServW2ST_Service>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000f04:	2104      	movs	r1, #4
 8000f06:	2001      	movs	r0, #1
 8000f08:	f006 fb9d 	bl	8007646 <aci_hal_set_tx_power_level>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	080093b4 	.word	0x080093b4
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	08002bb5 	.word	0x08002bb5
 8000f24:	200000a0 	.word	0x200000a0
 8000f28:	200000a4 	.word	0x200000a4
 8000f2c:	0001e240 	.word	0x0001e240

08000f30 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000f34:	f000 f812 	bl	8000f5c <User_Process>
  hci_user_evt_proc();
 8000f38:	f006 feba 	bl	8007cb0 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f44:	2101      	movs	r1, #1
 8000f46:	2000      	movs	r0, #0
 8000f48:	f002 fd64 	bl	8003a14 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f002 fcfb 	bl	8003948 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f002 fe10 	bl	8003b78 <BSP_COM_Init>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000f62:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <User_Process+0xb0>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000f6c:	f001 fdae 	bl	8002acc <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000f70:	4b26      	ldr	r3, [pc, #152]	@ (800100c <User_Process+0xb0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f002 fcf8 	bl	800396c <BSP_LED_Toggle>

    if (connected)
 8000f7c:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <User_Process+0xb4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d03e      	beq.n	8001002 <User_Process+0xa6>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000f84:	f002 ff28 	bl	8003dd8 <HAL_GetTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 f81a 	bl	8007fc4 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000f90:	463a      	mov	r2, r7
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f84a 	bl	8001030 <Set_Random_Environmental_Values>
      int32_t pressure = 101325;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <User_Process+0xb8>)
 8000f9e:	60fb      	str	r3, [r7, #12]
      int16_t temp_int = (int16_t)(temperature);
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <User_Process+0xbc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd5b 	bl	8000a60 <__aeabi_f2iz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	817b      	strh	r3, [r7, #10]
      BlueMS_Environmental_Update(pressure, temperature);
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <User_Process+0xbc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fd54 	bl	8000a60 <__aeabi_f2iz>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f001 fd3e 	bl	8002a40 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <User_Process+0xc0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f8b1 	bl	8001130 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8000fce:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <User_Process+0xc4>)
 8000fd0:	4914      	ldr	r1, [pc, #80]	@ (8001024 <User_Process+0xc8>)
 8000fd2:	4815      	ldr	r0, [pc, #84]	@ (8001028 <User_Process+0xcc>)
 8000fd4:	f001 fb9c 	bl	8002710 <Acc_Update>
      Quat_Update(&q_axes);
 8000fd8:	4814      	ldr	r0, [pc, #80]	@ (800102c <User_Process+0xd0>)
 8000fda:	f001 fc23 	bl	8002824 <Quat_Update>

      counter ++;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <User_Process+0xc0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <User_Process+0xc0>)
 8000fe6:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <User_Process+0xc0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b28      	cmp	r3, #40	@ 0x28
 8000fee:	d104      	bne.n	8000ffa <User_Process+0x9e>
        counter = 0;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <User_Process+0xc0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000ff6:	f001 f931 	bl	800225c <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8000ffa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffe:	f002 fef5 	bl	8003dec <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000001 	.word	0x20000001
 8001010:	200000e0 	.word	0x200000e0
 8001014:	00018bcd 	.word	0x00018bcd
 8001018:	20000004 	.word	0x20000004
 800101c:	200000ac 	.word	0x200000ac
 8001020:	200000fc 	.word	0x200000fc
 8001024:	200000f0 	.word	0x200000f0
 8001028:	200000e4 	.word	0x200000e4
 800102c:	20000108 	.word	0x20000108

08001030 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8001030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 800103c:	f006 fff0 	bl	8008020 <rand>
 8001040:	4603      	mov	r3, r0
 8001042:	17da      	asrs	r2, r3, #31
 8001044:	469a      	mov	sl, r3
 8001046:	4693      	mov	fp, r2
 8001048:	4652      	mov	r2, sl
 800104a:	465b      	mov	r3, fp
 800104c:	f04f 0000 	mov.w	r0, #0
 8001050:	f04f 0100 	mov.w	r1, #0
 8001054:	0099      	lsls	r1, r3, #2
 8001056:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800105a:	0090      	lsls	r0, r2, #2
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	eb12 010a 	adds.w	r1, r2, sl
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	eb43 030b 	adc.w	r3, r3, fp
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001078:	f7ff fd38 	bl	8000aec <__aeabi_uldivmod>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fa08 	bl	8000498 <__aeabi_ul2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <Set_Random_Environmental_Values+0xf8>)
 800108e:	f7ff f883 	bl	8000198 <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fa33 	bl	8000504 <__aeabi_d2f>
 800109e:	4602      	mov	r2, r0
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80010a4:	f006 ffbc 	bl	8008020 <rand>
 80010a8:	4603      	mov	r3, r0
 80010aa:	17da      	asrs	r2, r3, #31
 80010ac:	4698      	mov	r8, r3
 80010ae:	4691      	mov	r9, r2
 80010b0:	4642      	mov	r2, r8
 80010b2:	464b      	mov	r3, r9
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	f04f 0100 	mov.w	r1, #0
 80010bc:	0099      	lsls	r1, r3, #2
 80010be:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80010c2:	0090      	lsls	r0, r2, #2
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	eb12 0408 	adds.w	r4, r2, r8
 80010cc:	eb43 0509 	adc.w	r5, r3, r9
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	012b      	lsls	r3, r5, #4
 80010da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80010de:	0122      	lsls	r2, r4, #4
 80010e0:	4614      	mov	r4, r2
 80010e2:	461d      	mov	r5, r3
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	f7ff fcfc 	bl	8000aec <__aeabi_uldivmod>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff f9cc 	bl	8000498 <__aeabi_ul2d>
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <Set_Random_Environmental_Values+0xfc>)
 8001106:	f7ff f847 	bl	8000198 <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff f9f7 	bl	8000504 <__aeabi_d2f>
 8001116:	4602      	mov	r2, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001126:	bf00      	nop
 8001128:	403b0000 	.word	0x403b0000
 800112c:	408f4000 	.word	0x408f4000

08001130 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8001130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001134:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 8001138:	af00      	add	r7, sp, #0
 800113a:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 800113e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001142:	2b13      	cmp	r3, #19
 8001144:	f200 843a 	bhi.w	80019bc <Set_Random_Motion_Values+0x88c>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001148:	f006 ff6a 	bl	8008020 <rand>
 800114c:	4603      	mov	r3, r0
 800114e:	17da      	asrs	r2, r3, #31
 8001150:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001154:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8001158:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800115c:	2200      	movs	r2, #0
 800115e:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8001162:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 8001166:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	@ 0x328
 800116a:	4622      	mov	r2, r4
 800116c:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 8001170:	4651      	mov	r1, sl
 8001172:	fb01 f202 	mul.w	r2, r1, r2
 8001176:	465d      	mov	r5, fp
 8001178:	4618      	mov	r0, r3
 800117a:	4621      	mov	r1, r4
 800117c:	4603      	mov	r3, r0
 800117e:	fb03 f305 	mul.w	r3, r3, r5
 8001182:	4413      	add	r3, r2
 8001184:	4602      	mov	r2, r0
 8001186:	4651      	mov	r1, sl
 8001188:	fba2 8901 	umull	r8, r9, r2, r1
 800118c:	444b      	add	r3, r9
 800118e:	4699      	mov	r9, r3
 8001190:	4642      	mov	r2, r8
 8001192:	464b      	mov	r3, r9
 8001194:	1891      	adds	r1, r2, r2
 8001196:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001198:	415b      	adcs	r3, r3
 800119a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800119c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011a0:	eb12 0108 	adds.w	r1, r2, r8
 80011a4:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 80011a8:	eb43 0309 	adc.w	r3, r3, r9
 80011ac:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80011b0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 80011bc:	f7ff fc96 	bl	8000aec <__aeabi_uldivmod>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	f112 010a 	adds.w	r1, r2, #10
 80011c8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80011cc:	f143 0300 	adc.w	r3, r3, #0
 80011d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80011d4:	4bd9      	ldr	r3, [pc, #868]	@ (800153c <Set_Random_Motion_Values+0x40c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011de:	4413      	add	r3, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4bd6      	ldr	r3, [pc, #856]	@ (800153c <Set_Random_Motion_Values+0x40c>)
 80011e4:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80011e6:	f006 ff1b 	bl	8008020 <rand>
 80011ea:	4603      	mov	r3, r0
 80011ec:	17da      	asrs	r2, r3, #31
 80011ee:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 80011f2:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 80011f6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80011fa:	2200      	movs	r2, #0
 80011fc:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8001200:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8001204:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	@ 0x310
 8001208:	4622      	mov	r2, r4
 800120a:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 800120e:	4641      	mov	r1, r8
 8001210:	fb01 f202 	mul.w	r2, r1, r2
 8001214:	464d      	mov	r5, r9
 8001216:	4618      	mov	r0, r3
 8001218:	4621      	mov	r1, r4
 800121a:	4603      	mov	r3, r0
 800121c:	fb03 f305 	mul.w	r3, r3, r5
 8001220:	4413      	add	r3, r2
 8001222:	4602      	mov	r2, r0
 8001224:	4641      	mov	r1, r8
 8001226:	fba2 2101 	umull	r2, r1, r2, r1
 800122a:	f8c7 13dc 	str.w	r1, [r7, #988]	@ 0x3dc
 800122e:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 8001232:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8001236:	4413      	add	r3, r2
 8001238:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800123c:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 8001240:	4622      	mov	r2, r4
 8001242:	462b      	mov	r3, r5
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	f04f 0100 	mov.w	r1, #0
 800124c:	0099      	lsls	r1, r3, #2
 800124e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001252:	0090      	lsls	r0, r2, #2
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4621      	mov	r1, r4
 800125a:	1851      	adds	r1, r2, r1
 800125c:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 8001260:	4629      	mov	r1, r5
 8001262:	eb43 0101 	adc.w	r1, r3, r1
 8001266:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 800126a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8001276:	f7ff fc39 	bl	8000aec <__aeabi_uldivmod>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	f06f 0009 	mvn.w	r0, #9
 8001282:	f04f 31ff 	mov.w	r1, #4294967295
 8001286:	1a80      	subs	r0, r0, r2
 8001288:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800128c:	eb61 0303 	sbc.w	r3, r1, r3
 8001290:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001294:	4ba9      	ldr	r3, [pc, #676]	@ (800153c <Set_Random_Motion_Values+0x40c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	461a      	mov	r2, r3
 800129a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800129e:	4413      	add	r3, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4ba6      	ldr	r3, [pc, #664]	@ (800153c <Set_Random_Motion_Values+0x40c>)
 80012a4:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80012a6:	f006 febb 	bl	8008020 <rand>
 80012aa:	4603      	mov	r3, r0
 80012ac:	17da      	asrs	r2, r3, #31
 80012ae:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 80012b2:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 80012b6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80012ba:	2200      	movs	r2, #0
 80012bc:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80012c0:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 80012c4:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	@ 0x2f8
 80012c8:	4622      	mov	r2, r4
 80012ca:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 80012ce:	4641      	mov	r1, r8
 80012d0:	fb01 f202 	mul.w	r2, r1, r2
 80012d4:	464d      	mov	r5, r9
 80012d6:	4618      	mov	r0, r3
 80012d8:	4621      	mov	r1, r4
 80012da:	4603      	mov	r3, r0
 80012dc:	fb03 f305 	mul.w	r3, r3, r5
 80012e0:	4413      	add	r3, r2
 80012e2:	4602      	mov	r2, r0
 80012e4:	4641      	mov	r1, r8
 80012e6:	fba2 2101 	umull	r2, r1, r2, r1
 80012ea:	f8c7 13d4 	str.w	r1, [r7, #980]	@ 0x3d4
 80012ee:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 80012f2:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 80012f6:	4413      	add	r3, r2
 80012f8:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 80012fc:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 8001300:	4622      	mov	r2, r4
 8001302:	462b      	mov	r3, r5
 8001304:	f04f 0000 	mov.w	r0, #0
 8001308:	f04f 0100 	mov.w	r1, #0
 800130c:	00d9      	lsls	r1, r3, #3
 800130e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001312:	00d0      	lsls	r0, r2, #3
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4620      	mov	r0, r4
 800131a:	4629      	mov	r1, r5
 800131c:	4604      	mov	r4, r0
 800131e:	1b14      	subs	r4, r2, r4
 8001320:	f8c7 42e8 	str.w	r4, [r7, #744]	@ 0x2e8
 8001324:	eb63 0301 	sbc.w	r3, r3, r1
 8001328:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800132c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8001338:	f7ff fbd8 	bl	8000aec <__aeabi_uldivmod>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	f112 010a 	adds.w	r1, r2, #10
 8001344:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001348:	f143 0300 	adc.w	r3, r3, #0
 800134c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001350:	4b7a      	ldr	r3, [pc, #488]	@ (800153c <Set_Random_Motion_Values+0x40c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	461a      	mov	r2, r3
 8001356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800135a:	4413      	add	r3, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4b77      	ldr	r3, [pc, #476]	@ (800153c <Set_Random_Motion_Values+0x40c>)
 8001360:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001362:	f006 fe5d 	bl	8008020 <rand>
 8001366:	4603      	mov	r3, r0
 8001368:	17da      	asrs	r2, r3, #31
 800136a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800136e:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8001372:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001376:	2200      	movs	r2, #0
 8001378:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 800137c:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8001380:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	@ 0x2e0
 8001384:	4622      	mov	r2, r4
 8001386:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 800138a:	4641      	mov	r1, r8
 800138c:	fb01 f202 	mul.w	r2, r1, r2
 8001390:	464d      	mov	r5, r9
 8001392:	4618      	mov	r0, r3
 8001394:	4621      	mov	r1, r4
 8001396:	4603      	mov	r3, r0
 8001398:	fb03 f305 	mul.w	r3, r3, r5
 800139c:	4413      	add	r3, r2
 800139e:	4602      	mov	r2, r0
 80013a0:	4641      	mov	r1, r8
 80013a2:	fba2 2101 	umull	r2, r1, r2, r1
 80013a6:	f8c7 13cc 	str.w	r1, [r7, #972]	@ 0x3cc
 80013aa:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 80013ae:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 80013b2:	4413      	add	r3, r2
 80013b4:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80013b8:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 80013bc:	460b      	mov	r3, r1
 80013be:	18db      	adds	r3, r3, r3
 80013c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80013c2:	4613      	mov	r3, r2
 80013c4:	eb42 0303 	adc.w	r3, r2, r3
 80013c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80013ca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80013ce:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	f7ff fb89 	bl	8000aec <__aeabi_uldivmod>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80013e2:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80013e6:	f143 0300 	adc.w	r3, r3, #0
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013ee:	4b54      	ldr	r3, [pc, #336]	@ (8001540 <Set_Random_Motion_Values+0x410>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80013f8:	4413      	add	r3, r2
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b50      	ldr	r3, [pc, #320]	@ (8001540 <Set_Random_Motion_Values+0x410>)
 80013fe:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001400:	f006 fe0e 	bl	8008020 <rand>
 8001404:	4603      	mov	r3, r0
 8001406:	17da      	asrs	r2, r3, #31
 8001408:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800140c:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001410:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001414:	2200      	movs	r2, #0
 8001416:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 800141a:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 800141e:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	@ 0x2d0
 8001422:	4622      	mov	r2, r4
 8001424:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 8001428:	4641      	mov	r1, r8
 800142a:	fb01 f202 	mul.w	r2, r1, r2
 800142e:	464d      	mov	r5, r9
 8001430:	4618      	mov	r0, r3
 8001432:	4621      	mov	r1, r4
 8001434:	4603      	mov	r3, r0
 8001436:	fb03 f305 	mul.w	r3, r3, r5
 800143a:	4413      	add	r3, r2
 800143c:	4602      	mov	r2, r0
 800143e:	4641      	mov	r1, r8
 8001440:	fba2 2101 	umull	r2, r1, r2, r1
 8001444:	f8c7 13c4 	str.w	r1, [r7, #964]	@ 0x3c4
 8001448:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 800144c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8001450:	4413      	add	r3, r2
 8001452:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001456:	f04f 0000 	mov.w	r0, #0
 800145a:	f04f 0100 	mov.w	r1, #0
 800145e:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 8001462:	462b      	mov	r3, r5
 8001464:	0099      	lsls	r1, r3, #2
 8001466:	4622      	mov	r2, r4
 8001468:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800146c:	4623      	mov	r3, r4
 800146e:	0098      	lsls	r0, r3, #2
 8001470:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f7ff fb38 	bl	8000aec <__aeabi_uldivmod>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	1a80      	subs	r0, r0, r2
 800148a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 800148e:	eb61 0303 	sbc.w	r3, r1, r3
 8001492:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <Set_Random_Motion_Values+0x410>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	461a      	mov	r2, r3
 800149c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <Set_Random_Motion_Values+0x410>)
 80014a6:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80014a8:	f006 fdba 	bl	8008020 <rand>
 80014ac:	4603      	mov	r3, r0
 80014ae:	17da      	asrs	r2, r3, #31
 80014b0:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80014b4:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 80014b8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80014bc:	2200      	movs	r2, #0
 80014be:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 80014c2:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 80014c6:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	@ 0x2c0
 80014ca:	4622      	mov	r2, r4
 80014cc:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 80014d0:	4641      	mov	r1, r8
 80014d2:	fb01 f202 	mul.w	r2, r1, r2
 80014d6:	464d      	mov	r5, r9
 80014d8:	4618      	mov	r0, r3
 80014da:	4621      	mov	r1, r4
 80014dc:	4603      	mov	r3, r0
 80014de:	fb03 f305 	mul.w	r3, r3, r5
 80014e2:	4413      	add	r3, r2
 80014e4:	4602      	mov	r2, r0
 80014e6:	4641      	mov	r1, r8
 80014e8:	fba2 2101 	umull	r2, r1, r2, r1
 80014ec:	f8c7 13bc 	str.w	r1, [r7, #956]	@ 0x3bc
 80014f0:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 80014f4:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80014f8:	4413      	add	r3, r2
 80014fa:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 80014fe:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 8001502:	4622      	mov	r2, r4
 8001504:	462b      	mov	r3, r5
 8001506:	1891      	adds	r1, r2, r2
 8001508:	65b9      	str	r1, [r7, #88]	@ 0x58
 800150a:	415b      	adcs	r3, r3
 800150c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800150e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001512:	4621      	mov	r1, r4
 8001514:	1851      	adds	r1, r2, r1
 8001516:	6539      	str	r1, [r7, #80]	@ 0x50
 8001518:	4629      	mov	r1, r5
 800151a:	eb43 0101 	adc.w	r1, r3, r1
 800151e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001520:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8001524:	460b      	mov	r3, r1
 8001526:	18db      	adds	r3, r3, r3
 8001528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800152a:	4613      	mov	r3, r2
 800152c:	eb42 0303 	adc.w	r3, r2, r3
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001532:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001536:	4618      	mov	r0, r3
 8001538:	e004      	b.n	8001544 <Set_Random_Motion_Values+0x414>
 800153a:	bf00      	nop
 800153c:	200000e4 	.word	0x200000e4
 8001540:	200000f0 	.word	0x200000f0
 8001544:	4621      	mov	r1, r4
 8001546:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f7ff facd 	bl	8000aec <__aeabi_uldivmod>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800155a:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800155e:	f143 0300 	adc.w	r3, r3, #0
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001566:	4bdb      	ldr	r3, [pc, #876]	@ (80018d4 <Set_Random_Motion_Values+0x7a4>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	461a      	mov	r2, r3
 800156c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001570:	4413      	add	r3, r2
 8001572:	461a      	mov	r2, r3
 8001574:	4bd7      	ldr	r3, [pc, #860]	@ (80018d4 <Set_Random_Motion_Values+0x7a4>)
 8001576:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001578:	f006 fd52 	bl	8008020 <rand>
 800157c:	4603      	mov	r3, r0
 800157e:	17da      	asrs	r2, r3, #31
 8001580:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001584:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001588:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800158c:	2200      	movs	r2, #0
 800158e:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001592:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8001596:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	@ 0x2b0
 800159a:	4622      	mov	r2, r4
 800159c:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 80015a0:	4641      	mov	r1, r8
 80015a2:	fb01 f202 	mul.w	r2, r1, r2
 80015a6:	464d      	mov	r5, r9
 80015a8:	4618      	mov	r0, r3
 80015aa:	4621      	mov	r1, r4
 80015ac:	4603      	mov	r3, r0
 80015ae:	fb03 f305 	mul.w	r3, r3, r5
 80015b2:	4413      	add	r3, r2
 80015b4:	4602      	mov	r2, r0
 80015b6:	4641      	mov	r1, r8
 80015b8:	fba2 2101 	umull	r2, r1, r2, r1
 80015bc:	f8c7 13b4 	str.w	r1, [r7, #948]	@ 0x3b4
 80015c0:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 80015c4:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 80015c8:	4413      	add	r3, r2
 80015ca:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80015ce:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 80015d2:	4622      	mov	r2, r4
 80015d4:	462b      	mov	r3, r5
 80015d6:	1891      	adds	r1, r2, r2
 80015d8:	6439      	str	r1, [r7, #64]	@ 0x40
 80015da:	415b      	adcs	r3, r3
 80015dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80015de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015e2:	4621      	mov	r1, r4
 80015e4:	1851      	adds	r1, r2, r1
 80015e6:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 80015ea:	4629      	mov	r1, r5
 80015ec:	eb43 0101 	adc.w	r1, r3, r1
 80015f0:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 80015f4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 8001600:	f7ff fa74 	bl	8000aec <__aeabi_uldivmod>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	1cd1      	adds	r1, r2, #3
 800160a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800160e:	f143 0300 	adc.w	r3, r3, #0
 8001612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001616:	4bb0      	ldr	r3, [pc, #704]	@ (80018d8 <Set_Random_Motion_Values+0x7a8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001620:	4413      	add	r3, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4bac      	ldr	r3, [pc, #688]	@ (80018d8 <Set_Random_Motion_Values+0x7a8>)
 8001626:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001628:	f006 fcfa 	bl	8008020 <rand>
 800162c:	4603      	mov	r3, r0
 800162e:	17da      	asrs	r2, r3, #31
 8001630:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001634:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8001638:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800163c:	2200      	movs	r2, #0
 800163e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001642:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8001646:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	@ 0x298
 800164a:	4622      	mov	r2, r4
 800164c:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 8001650:	4641      	mov	r1, r8
 8001652:	fb01 f202 	mul.w	r2, r1, r2
 8001656:	464d      	mov	r5, r9
 8001658:	4618      	mov	r0, r3
 800165a:	4621      	mov	r1, r4
 800165c:	4603      	mov	r3, r0
 800165e:	fb03 f305 	mul.w	r3, r3, r5
 8001662:	4413      	add	r3, r2
 8001664:	4602      	mov	r2, r0
 8001666:	4641      	mov	r1, r8
 8001668:	fba2 2101 	umull	r2, r1, r2, r1
 800166c:	f8c7 13ac 	str.w	r1, [r7, #940]	@ 0x3ac
 8001670:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 8001674:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8001678:	4413      	add	r3, r2
 800167a:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800167e:	f04f 0000 	mov.w	r0, #0
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800168a:	462b      	mov	r3, r5
 800168c:	0099      	lsls	r1, r3, #2
 800168e:	4622      	mov	r2, r4
 8001690:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001694:	4623      	mov	r3, r4
 8001696:	0098      	lsls	r0, r3, #2
 8001698:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	f7ff fa24 	bl	8000aec <__aeabi_uldivmod>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	f06f 0002 	mvn.w	r0, #2
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	1a80      	subs	r0, r0, r2
 80016b2:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80016b6:	eb61 0303 	sbc.w	r3, r1, r3
 80016ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016be:	4b86      	ldr	r3, [pc, #536]	@ (80018d8 <Set_Random_Motion_Values+0x7a8>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	461a      	mov	r2, r3
 80016c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016c8:	4413      	add	r3, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b82      	ldr	r3, [pc, #520]	@ (80018d8 <Set_Random_Motion_Values+0x7a8>)
 80016ce:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80016d0:	f006 fca6 	bl	8008020 <rand>
 80016d4:	4603      	mov	r3, r0
 80016d6:	17da      	asrs	r2, r3, #31
 80016d8:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 80016dc:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 80016e0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80016e4:	2200      	movs	r2, #0
 80016e6:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 80016ea:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 80016ee:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	@ 0x288
 80016f2:	4622      	mov	r2, r4
 80016f4:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 80016f8:	4641      	mov	r1, r8
 80016fa:	fb01 f202 	mul.w	r2, r1, r2
 80016fe:	464d      	mov	r5, r9
 8001700:	4618      	mov	r0, r3
 8001702:	4621      	mov	r1, r4
 8001704:	4603      	mov	r3, r0
 8001706:	fb03 f305 	mul.w	r3, r3, r5
 800170a:	4413      	add	r3, r2
 800170c:	4602      	mov	r2, r0
 800170e:	4641      	mov	r1, r8
 8001710:	fba2 2101 	umull	r2, r1, r2, r1
 8001714:	f8c7 13a4 	str.w	r1, [r7, #932]	@ 0x3a4
 8001718:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 800171c:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8001720:	4413      	add	r3, r2
 8001722:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001726:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 800172a:	4622      	mov	r2, r4
 800172c:	462b      	mov	r3, r5
 800172e:	f04f 0000 	mov.w	r0, #0
 8001732:	f04f 0100 	mov.w	r1, #0
 8001736:	0099      	lsls	r1, r3, #2
 8001738:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800173c:	0090      	lsls	r0, r2, #2
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4621      	mov	r1, r4
 8001744:	1851      	adds	r1, r2, r1
 8001746:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 800174a:	4629      	mov	r1, r5
 800174c:	eb43 0101 	adc.w	r1, r3, r1
 8001750:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 8001754:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8001760:	f7ff f9c4 	bl	8000aec <__aeabi_uldivmod>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	1cd1      	adds	r1, r2, #3
 800176a:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800176e:	f143 0300 	adc.w	r3, r3, #0
 8001772:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001776:	4b58      	ldr	r3, [pc, #352]	@ (80018d8 <Set_Random_Motion_Values+0x7a8>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	461a      	mov	r2, r3
 800177c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001780:	4413      	add	r3, r2
 8001782:	461a      	mov	r2, r3
 8001784:	4b54      	ldr	r3, [pc, #336]	@ (80018d8 <Set_Random_Motion_Values+0x7a8>)
 8001786:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001788:	f006 fc4a 	bl	8008020 <rand>
 800178c:	4603      	mov	r3, r0
 800178e:	17da      	asrs	r2, r3, #31
 8001790:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001794:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001798:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800179c:	2200      	movs	r2, #0
 800179e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80017a2:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 80017a6:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	@ 0x270
 80017aa:	4622      	mov	r2, r4
 80017ac:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 80017b0:	4641      	mov	r1, r8
 80017b2:	fb01 f202 	mul.w	r2, r1, r2
 80017b6:	464d      	mov	r5, r9
 80017b8:	4618      	mov	r0, r3
 80017ba:	4621      	mov	r1, r4
 80017bc:	4603      	mov	r3, r0
 80017be:	fb03 f305 	mul.w	r3, r3, r5
 80017c2:	4413      	add	r3, r2
 80017c4:	4602      	mov	r2, r0
 80017c6:	4641      	mov	r1, r8
 80017c8:	fba2 2101 	umull	r2, r1, r2, r1
 80017cc:	f8c7 139c 	str.w	r1, [r7, #924]	@ 0x39c
 80017d0:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 80017d4:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80017d8:	4413      	add	r3, r2
 80017da:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 80017de:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 80017e2:	4622      	mov	r2, r4
 80017e4:	462b      	mov	r3, r5
 80017e6:	1891      	adds	r1, r2, r2
 80017e8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80017ea:	415b      	adcs	r3, r3
 80017ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017f2:	4621      	mov	r1, r4
 80017f4:	1851      	adds	r1, r2, r1
 80017f6:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 80017fa:	4629      	mov	r1, r5
 80017fc:	eb43 0101 	adc.w	r1, r3, r1
 8001800:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8001804:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8001810:	f7ff f96c 	bl	8000aec <__aeabi_uldivmod>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800181c:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001820:	f143 0300 	adc.w	r3, r3, #0
 8001824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001828:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <Set_Random_Motion_Values+0x7ac>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	461a      	mov	r2, r3
 8001836:	4b29      	ldr	r3, [pc, #164]	@ (80018dc <Set_Random_Motion_Values+0x7ac>)
 8001838:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800183a:	f006 fbf1 	bl	8008020 <rand>
 800183e:	4603      	mov	r3, r0
 8001840:	17da      	asrs	r2, r3, #31
 8001842:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001846:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 800184a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800184e:	2200      	movs	r2, #0
 8001850:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001854:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001858:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	@ 0x258
 800185c:	4622      	mov	r2, r4
 800185e:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 8001862:	4641      	mov	r1, r8
 8001864:	fb01 f202 	mul.w	r2, r1, r2
 8001868:	464d      	mov	r5, r9
 800186a:	4618      	mov	r0, r3
 800186c:	4621      	mov	r1, r4
 800186e:	4603      	mov	r3, r0
 8001870:	fb03 f305 	mul.w	r3, r3, r5
 8001874:	4413      	add	r3, r2
 8001876:	4602      	mov	r2, r0
 8001878:	4641      	mov	r1, r8
 800187a:	fba2 2101 	umull	r2, r1, r2, r1
 800187e:	f8c7 1394 	str.w	r1, [r7, #916]	@ 0x394
 8001882:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 8001886:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 800188a:	4413      	add	r3, r2
 800188c:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001890:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 8001894:	4622      	mov	r2, r4
 8001896:	462b      	mov	r3, r5
 8001898:	f04f 0000 	mov.w	r0, #0
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	0099      	lsls	r1, r3, #2
 80018a2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80018a6:	0090      	lsls	r0, r2, #2
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4621      	mov	r1, r4
 80018ae:	1851      	adds	r1, r2, r1
 80018b0:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 80018b4:	4629      	mov	r1, r5
 80018b6:	eb43 0101 	adc.w	r1, r3, r1
 80018ba:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 80018be:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 80018ca:	f7ff f90f 	bl	8000aec <__aeabi_uldivmod>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e005      	b.n	80018e0 <Set_Random_Motion_Values+0x7b0>
 80018d4:	200000f0 	.word	0x200000f0
 80018d8:	200000fc 	.word	0x200000fc
 80018dc:	20000108 	.word	0x20000108
 80018e0:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80018e4:	67b9      	str	r1, [r7, #120]	@ 0x78
 80018e6:	f143 0300 	adc.w	r3, r3, #0
 80018ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <Set_Random_Motion_Values+0x888>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	461a      	mov	r2, r3
 80018f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018f4:	4413      	add	r3, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <Set_Random_Motion_Values+0x888>)
 80018fa:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80018fc:	f006 fb90 	bl	8008020 <rand>
 8001900:	4603      	mov	r3, r0
 8001902:	17da      	asrs	r2, r3, #31
 8001904:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001908:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 800190c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001910:	2200      	movs	r2, #0
 8001912:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001916:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 800191a:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	@ 0x240
 800191e:	4622      	mov	r2, r4
 8001920:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001924:	4641      	mov	r1, r8
 8001926:	fb01 f202 	mul.w	r2, r1, r2
 800192a:	464d      	mov	r5, r9
 800192c:	4618      	mov	r0, r3
 800192e:	4621      	mov	r1, r4
 8001930:	4603      	mov	r3, r0
 8001932:	fb03 f305 	mul.w	r3, r3, r5
 8001936:	4413      	add	r3, r2
 8001938:	4602      	mov	r2, r0
 800193a:	4641      	mov	r1, r8
 800193c:	fba2 2101 	umull	r2, r1, r2, r1
 8001940:	f8c7 138c 	str.w	r1, [r7, #908]	@ 0x38c
 8001944:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 8001948:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800194c:	4413      	add	r3, r2
 800194e:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001952:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001956:	4622      	mov	r2, r4
 8001958:	462b      	mov	r3, r5
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	00d9      	lsls	r1, r3, #3
 8001964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001968:	00d0      	lsls	r0, r2, #3
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4620      	mov	r0, r4
 8001970:	4629      	mov	r1, r5
 8001972:	4604      	mov	r4, r0
 8001974:	1b14      	subs	r4, r2, r4
 8001976:	f8c7 4230 	str.w	r4, [r7, #560]	@ 0x230
 800197a:	eb63 0301 	sbc.w	r3, r3, r1
 800197e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8001982:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 800198e:	f7ff f8ad 	bl	8000aec <__aeabi_uldivmod>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800199a:	6739      	str	r1, [r7, #112]	@ 0x70
 800199c:	f143 0300 	adc.w	r3, r3, #0
 80019a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <Set_Random_Motion_Values+0x888>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	461a      	mov	r2, r3
 80019a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b02      	ldr	r3, [pc, #8]	@ (80019b8 <Set_Random_Motion_Values+0x888>)
 80019b0:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 80019b2:	f000 bc4a 	b.w	800224a <Set_Random_Motion_Values+0x111a>
 80019b6:	bf00      	nop
 80019b8:	20000108 	.word	0x20000108
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80019bc:	f006 fb30 	bl	8008020 <rand>
 80019c0:	4603      	mov	r3, r0
 80019c2:	17da      	asrs	r2, r3, #31
 80019c4:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 80019c8:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80019cc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80019d0:	2200      	movs	r2, #0
 80019d2:	469a      	mov	sl, r3
 80019d4:	4693      	mov	fp, r2
 80019d6:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80019da:	460b      	mov	r3, r1
 80019dc:	fb0a f203 	mul.w	r2, sl, r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	fb03 f30b 	mul.w	r3, r3, fp
 80019e6:	4413      	add	r3, r2
 80019e8:	4602      	mov	r2, r0
 80019ea:	fba2 450a 	umull	r4, r5, r2, sl
 80019ee:	442b      	add	r3, r5
 80019f0:	461d      	mov	r5, r3
 80019f2:	4622      	mov	r2, r4
 80019f4:	462b      	mov	r3, r5
 80019f6:	1891      	adds	r1, r2, r2
 80019f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80019fa:	415b      	adcs	r3, r3
 80019fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a02:	1911      	adds	r1, r2, r4
 8001a04:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 8001a08:	416b      	adcs	r3, r5
 8001a0a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001a0e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8001a1a:	f7ff f867 	bl	8000aec <__aeabi_uldivmod>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	f06f 0009 	mvn.w	r0, #9
 8001a26:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2a:	1a80      	subs	r0, r0, r2
 8001a2c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8001a30:	eb61 0303 	sbc.w	r3, r1, r3
 8001a34:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001a38:	4bd9      	ldr	r3, [pc, #868]	@ (8001da0 <Set_Random_Motion_Values+0xc70>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a42:	4413      	add	r3, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4bd6      	ldr	r3, [pc, #856]	@ (8001da0 <Set_Random_Motion_Values+0xc70>)
 8001a48:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001a4a:	f006 fae9 	bl	8008020 <rand>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	17da      	asrs	r2, r3, #31
 8001a52:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001a56:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001a5a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001a64:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001a68:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	@ 0x218
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001a72:	4641      	mov	r1, r8
 8001a74:	fb01 f202 	mul.w	r2, r1, r2
 8001a78:	464d      	mov	r5, r9
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	4603      	mov	r3, r0
 8001a80:	fb03 f305 	mul.w	r3, r3, r5
 8001a84:	4413      	add	r3, r2
 8001a86:	4602      	mov	r2, r0
 8001a88:	4641      	mov	r1, r8
 8001a8a:	fba2 2101 	umull	r2, r1, r2, r1
 8001a8e:	f8c7 1384 	str.w	r1, [r7, #900]	@ 0x384
 8001a92:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001a96:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001aa0:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	0099      	lsls	r1, r3, #2
 8001ab2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001ab6:	0090      	lsls	r0, r2, #2
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4621      	mov	r1, r4
 8001abe:	1851      	adds	r1, r2, r1
 8001ac0:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	eb43 0101 	adc.w	r1, r3, r1
 8001aca:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8001ace:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001ada:	f7ff f807 	bl	8000aec <__aeabi_uldivmod>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	f112 010a 	adds.w	r1, r2, #10
 8001ae6:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001aea:	f143 0300 	adc.w	r3, r3, #0
 8001aee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001af2:	4bab      	ldr	r3, [pc, #684]	@ (8001da0 <Set_Random_Motion_Values+0xc70>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001afc:	4413      	add	r3, r2
 8001afe:	461a      	mov	r2, r3
 8001b00:	4ba7      	ldr	r3, [pc, #668]	@ (8001da0 <Set_Random_Motion_Values+0xc70>)
 8001b02:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001b04:	f006 fa8c 	bl	8008020 <rand>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	17da      	asrs	r2, r3, #31
 8001b0c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001b10:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001b14:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001b1e:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001b22:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8001b26:	4622      	mov	r2, r4
 8001b28:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	fb01 f202 	mul.w	r2, r1, r2
 8001b32:	464d      	mov	r5, r9
 8001b34:	4618      	mov	r0, r3
 8001b36:	4621      	mov	r1, r4
 8001b38:	4603      	mov	r3, r0
 8001b3a:	fb03 f305 	mul.w	r3, r3, r5
 8001b3e:	4413      	add	r3, r2
 8001b40:	4602      	mov	r2, r0
 8001b42:	4641      	mov	r1, r8
 8001b44:	fba2 2101 	umull	r2, r1, r2, r1
 8001b48:	f8c7 137c 	str.w	r1, [r7, #892]	@ 0x37c
 8001b4c:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001b50:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001b54:	4413      	add	r3, r2
 8001b56:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001b5a:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8001b5e:	4622      	mov	r2, r4
 8001b60:	462b      	mov	r3, r5
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	00d9      	lsls	r1, r3, #3
 8001b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b70:	00d0      	lsls	r0, r2, #3
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	1b14      	subs	r4, r2, r4
 8001b7e:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001b8a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8001b96:	f7fe ffa9 	bl	8000aec <__aeabi_uldivmod>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	f06f 0009 	mvn.w	r0, #9
 8001ba2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba6:	1a80      	subs	r0, r0, r2
 8001ba8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001bac:	eb61 0303 	sbc.w	r3, r1, r3
 8001bb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001bb4:	4b7a      	ldr	r3, [pc, #488]	@ (8001da0 <Set_Random_Motion_Values+0xc70>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bbe:	4413      	add	r3, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b77      	ldr	r3, [pc, #476]	@ (8001da0 <Set_Random_Motion_Values+0xc70>)
 8001bc4:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001bc6:	f006 fa2b 	bl	8008020 <rand>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	17da      	asrs	r2, r3, #31
 8001bce:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001bd2:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8001bd6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001be0:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001be4:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	@ 0x1e8
 8001be8:	4622      	mov	r2, r4
 8001bea:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8001bee:	4641      	mov	r1, r8
 8001bf0:	fb01 f202 	mul.w	r2, r1, r2
 8001bf4:	464d      	mov	r5, r9
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	fb03 f305 	mul.w	r3, r3, r5
 8001c00:	4413      	add	r3, r2
 8001c02:	4602      	mov	r2, r0
 8001c04:	4641      	mov	r1, r8
 8001c06:	fba2 2101 	umull	r2, r1, r2, r1
 8001c0a:	f8c7 1374 	str.w	r1, [r7, #884]	@ 0x374
 8001c0e:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8001c12:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001c16:	4413      	add	r3, r2
 8001c18:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001c1c:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8001c20:	460b      	mov	r3, r1
 8001c22:	18db      	adds	r3, r3, r3
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c26:	4613      	mov	r3, r2
 8001c28:	eb42 0303 	adc.w	r3, r2, r3
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c32:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	f7fe ff57 	bl	8000aec <__aeabi_uldivmod>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001c46:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4a:	1a80      	subs	r0, r0, r2
 8001c4c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8001c50:	eb61 0303 	sbc.w	r3, r1, r3
 8001c54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001c58:	4b52      	ldr	r3, [pc, #328]	@ (8001da4 <Set_Random_Motion_Values+0xc74>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c62:	4413      	add	r3, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b4f      	ldr	r3, [pc, #316]	@ (8001da4 <Set_Random_Motion_Values+0xc74>)
 8001c68:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001c6a:	f006 f9d9 	bl	8008020 <rand>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	17da      	asrs	r2, r3, #31
 8001c72:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001c76:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001c7a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001c84:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8001c88:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001c92:	4641      	mov	r1, r8
 8001c94:	fb01 f202 	mul.w	r2, r1, r2
 8001c98:	464d      	mov	r5, r9
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	fb03 f305 	mul.w	r3, r3, r5
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4641      	mov	r1, r8
 8001caa:	fba2 2101 	umull	r2, r1, r2, r1
 8001cae:	f8c7 136c 	str.w	r1, [r7, #876]	@ 0x36c
 8001cb2:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001cb6:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8001cba:	4413      	add	r3, r2
 8001cbc:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8001ccc:	462b      	mov	r3, r5
 8001cce:	0099      	lsls	r1, r3, #2
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	0098      	lsls	r0, r3, #2
 8001cda:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	f7fe ff03 	bl	8000aec <__aeabi_uldivmod>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001cee:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001cf2:	f143 0300 	adc.w	r3, r3, #0
 8001cf6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <Set_Random_Motion_Values+0xc74>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001d04:	4413      	add	r3, r2
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <Set_Random_Motion_Values+0xc74>)
 8001d0a:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001d0c:	f006 f988 	bl	8008020 <rand>
 8001d10:	4603      	mov	r3, r0
 8001d12:	17da      	asrs	r2, r3, #31
 8001d14:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001d18:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001d1c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d20:	2200      	movs	r2, #0
 8001d22:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d26:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001d2a:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8001d2e:	4622      	mov	r2, r4
 8001d30:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001d34:	4641      	mov	r1, r8
 8001d36:	fb01 f202 	mul.w	r2, r1, r2
 8001d3a:	464d      	mov	r5, r9
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4603      	mov	r3, r0
 8001d42:	fb03 f305 	mul.w	r3, r3, r5
 8001d46:	4413      	add	r3, r2
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	fba2 2101 	umull	r2, r1, r2, r1
 8001d50:	f8c7 1364 	str.w	r1, [r7, #868]	@ 0x364
 8001d54:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8001d58:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001d62:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001d66:	4622      	mov	r2, r4
 8001d68:	462b      	mov	r3, r5
 8001d6a:	1891      	adds	r1, r2, r2
 8001d6c:	6239      	str	r1, [r7, #32]
 8001d6e:	415b      	adcs	r3, r3
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d76:	4621      	mov	r1, r4
 8001d78:	1851      	adds	r1, r2, r1
 8001d7a:	61b9      	str	r1, [r7, #24]
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	eb43 0101 	adc.w	r1, r3, r1
 8001d82:	61f9      	str	r1, [r7, #28]
 8001d84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	18db      	adds	r3, r3, r3
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	eb42 0303 	adc.w	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	e004      	b.n	8001da8 <Set_Random_Motion_Values+0xc78>
 8001d9e:	bf00      	nop
 8001da0:	200000e4 	.word	0x200000e4
 8001da4:	200000f0 	.word	0x200000f0
 8001da8:	4621      	mov	r1, r4
 8001daa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	f7fe fe9b 	bl	8000aec <__aeabi_uldivmod>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc2:	1a80      	subs	r0, r0, r2
 8001dc4:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 8001dc8:	eb61 0303 	sbc.w	r3, r1, r3
 8001dcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001dd0:	4bd9      	ldr	r3, [pc, #868]	@ (8002138 <Set_Random_Motion_Values+0x1008>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001dda:	4413      	add	r3, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4bd6      	ldr	r3, [pc, #856]	@ (8002138 <Set_Random_Motion_Values+0x1008>)
 8001de0:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001de2:	f006 f91d 	bl	8008020 <rand>
 8001de6:	4603      	mov	r3, r0
 8001de8:	17da      	asrs	r2, r3, #31
 8001dea:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001dee:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001df2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001dfc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001e00:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8001e04:	4622      	mov	r2, r4
 8001e06:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	fb01 f202 	mul.w	r2, r1, r2
 8001e10:	464d      	mov	r5, r9
 8001e12:	4618      	mov	r0, r3
 8001e14:	4621      	mov	r1, r4
 8001e16:	4603      	mov	r3, r0
 8001e18:	fb03 f305 	mul.w	r3, r3, r5
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4641      	mov	r1, r8
 8001e22:	fba2 2101 	umull	r2, r1, r2, r1
 8001e26:	f8c7 135c 	str.w	r1, [r7, #860]	@ 0x35c
 8001e2a:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8001e2e:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001e32:	4413      	add	r3, r2
 8001e34:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001e38:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	462b      	mov	r3, r5
 8001e40:	f04f 0000 	mov.w	r0, #0
 8001e44:	f04f 0100 	mov.w	r1, #0
 8001e48:	00d9      	lsls	r1, r3, #3
 8001e4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e4e:	00d0      	lsls	r0, r2, #3
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	4604      	mov	r4, r0
 8001e5a:	1b14      	subs	r4, r2, r4
 8001e5c:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8001e60:	eb63 0301 	sbc.w	r3, r3, r1
 8001e64:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001e68:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001e74:	f7fe fe3a 	bl	8000aec <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	f06f 0002 	mvn.w	r0, #2
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	1a80      	subs	r0, r0, r2
 8001e86:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 8001e8a:	eb61 0303 	sbc.w	r3, r1, r3
 8001e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001e92:	4baa      	ldr	r3, [pc, #680]	@ (800213c <Set_Random_Motion_Values+0x100c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e9c:	4413      	add	r3, r2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800213c <Set_Random_Motion_Values+0x100c>)
 8001ea2:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001ea4:	f006 f8bc 	bl	8008020 <rand>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	17da      	asrs	r2, r3, #31
 8001eac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001eb0:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8001eb4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001ebe:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001ec2:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	@ 0x1a0
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 8001ecc:	4641      	mov	r1, r8
 8001ece:	fb01 f202 	mul.w	r2, r1, r2
 8001ed2:	464d      	mov	r5, r9
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	4603      	mov	r3, r0
 8001eda:	fb03 f305 	mul.w	r3, r3, r5
 8001ede:	4413      	add	r3, r2
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4641      	mov	r1, r8
 8001ee4:	fba2 2101 	umull	r2, r1, r2, r1
 8001ee8:	f8c7 1354 	str.w	r1, [r7, #852]	@ 0x354
 8001eec:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 8001ef0:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001efa:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8001efe:	4622      	mov	r2, r4
 8001f00:	462b      	mov	r3, r5
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	00d9      	lsls	r1, r3, #3
 8001f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f10:	00d0      	lsls	r0, r2, #3
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4621      	mov	r1, r4
 8001f18:	1851      	adds	r1, r2, r1
 8001f1a:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8001f1e:	4629      	mov	r1, r5
 8001f20:	eb43 0101 	adc.w	r1, r3, r1
 8001f24:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8001f28:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001f34:	f7fe fdda 	bl	8000aec <__aeabi_uldivmod>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	1cd1      	adds	r1, r2, #3
 8001f3e:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8001f42:	f143 0300 	adc.w	r3, r3, #0
 8001f46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001f4a:	4b7c      	ldr	r3, [pc, #496]	@ (800213c <Set_Random_Motion_Values+0x100c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001f54:	4413      	add	r3, r2
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b78      	ldr	r3, [pc, #480]	@ (800213c <Set_Random_Motion_Values+0x100c>)
 8001f5a:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001f5c:	f006 f860 	bl	8008020 <rand>
 8001f60:	4603      	mov	r3, r0
 8001f62:	17da      	asrs	r2, r3, #31
 8001f64:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001f68:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8001f6c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f76:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001f7a:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8001f7e:	4622      	mov	r2, r4
 8001f80:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8001f84:	4641      	mov	r1, r8
 8001f86:	fb01 f202 	mul.w	r2, r1, r2
 8001f8a:	464d      	mov	r5, r9
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4621      	mov	r1, r4
 8001f90:	4603      	mov	r3, r0
 8001f92:	fb03 f305 	mul.w	r3, r3, r5
 8001f96:	4413      	add	r3, r2
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	fba2 2101 	umull	r2, r1, r2, r1
 8001fa0:	f8c7 134c 	str.w	r1, [r7, #844]	@ 0x34c
 8001fa4:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 8001fa8:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001fac:	4413      	add	r3, r2
 8001fae:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8001fb2:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	462b      	mov	r3, r5
 8001fba:	1891      	adds	r1, r2, r2
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	415b      	adcs	r3, r3
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	1851      	adds	r1, r2, r1
 8001fca:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 8001fce:	4629      	mov	r1, r5
 8001fd0:	eb43 0101 	adc.w	r1, r3, r1
 8001fd4:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8001fd8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001fe4:	f7fe fd82 	bl	8000aec <__aeabi_uldivmod>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	f06f 0002 	mvn.w	r0, #2
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff4:	1a80      	subs	r0, r0, r2
 8001ff6:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8001ffa:	eb61 0303 	sbc.w	r3, r1, r3
 8001ffe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002002:	4b4e      	ldr	r3, [pc, #312]	@ (800213c <Set_Random_Motion_Values+0x100c>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	461a      	mov	r2, r3
 8002008:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800200c:	4413      	add	r3, r2
 800200e:	461a      	mov	r2, r3
 8002010:	4b4a      	ldr	r3, [pc, #296]	@ (800213c <Set_Random_Motion_Values+0x100c>)
 8002012:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8002014:	f006 f804 	bl	8008020 <rand>
 8002018:	4603      	mov	r3, r0
 800201a:	17da      	asrs	r2, r3, #31
 800201c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002020:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8002024:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002028:	2200      	movs	r2, #0
 800202a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800202e:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8002032:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 8002036:	4622      	mov	r2, r4
 8002038:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 800203c:	4641      	mov	r1, r8
 800203e:	fb01 f202 	mul.w	r2, r1, r2
 8002042:	464d      	mov	r5, r9
 8002044:	4618      	mov	r0, r3
 8002046:	4621      	mov	r1, r4
 8002048:	4603      	mov	r3, r0
 800204a:	fb03 f305 	mul.w	r3, r3, r5
 800204e:	4413      	add	r3, r2
 8002050:	4602      	mov	r2, r0
 8002052:	4641      	mov	r1, r8
 8002054:	fba2 2101 	umull	r2, r1, r2, r1
 8002058:	f8c7 1344 	str.w	r1, [r7, #836]	@ 0x344
 800205c:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 8002060:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8002064:	4413      	add	r3, r2
 8002066:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800206a:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 800206e:	4622      	mov	r2, r4
 8002070:	462b      	mov	r3, r5
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	00d9      	lsls	r1, r3, #3
 800207c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002080:	00d0      	lsls	r0, r2, #3
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	4604      	mov	r4, r0
 800208c:	1b14      	subs	r4, r2, r4
 800208e:	f8c7 4160 	str.w	r4, [r7, #352]	@ 0x160
 8002092:	eb63 0301 	sbc.w	r3, r3, r1
 8002096:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800209a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80020a6:	f7fe fd21 	bl	8000aec <__aeabi_uldivmod>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 80020b2:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 80020b6:	f143 0300 	adc.w	r3, r3, #0
 80020ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <Set_Random_Motion_Values+0x1010>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020c8:	4413      	add	r3, r2
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <Set_Random_Motion_Values+0x1010>)
 80020ce:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80020d0:	f005 ffa6 	bl	8008020 <rand>
 80020d4:	4603      	mov	r3, r0
 80020d6:	17da      	asrs	r2, r3, #31
 80020d8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80020dc:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80020e0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80020e4:	2200      	movs	r2, #0
 80020e6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80020ea:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80020ee:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 80020f2:	4622      	mov	r2, r4
 80020f4:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 80020f8:	4641      	mov	r1, r8
 80020fa:	fb01 f202 	mul.w	r2, r1, r2
 80020fe:	464d      	mov	r5, r9
 8002100:	4618      	mov	r0, r3
 8002102:	4621      	mov	r1, r4
 8002104:	4603      	mov	r3, r0
 8002106:	fb03 f305 	mul.w	r3, r3, r5
 800210a:	4413      	add	r3, r2
 800210c:	4602      	mov	r2, r0
 800210e:	4641      	mov	r1, r8
 8002110:	fba2 2101 	umull	r2, r1, r2, r1
 8002114:	f8c7 133c 	str.w	r1, [r7, #828]	@ 0x33c
 8002118:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 800211c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002120:	4413      	add	r3, r2
 8002122:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002126:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 800212a:	4622      	mov	r2, r4
 800212c:	462b      	mov	r3, r5
 800212e:	1891      	adds	r1, r2, r2
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	415b      	adcs	r3, r3
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	e005      	b.n	8002144 <Set_Random_Motion_Values+0x1014>
 8002138:	200000f0 	.word	0x200000f0
 800213c:	200000fc 	.word	0x200000fc
 8002140:	20000108 	.word	0x20000108
 8002144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002148:	4621      	mov	r1, r4
 800214a:	1851      	adds	r1, r2, r1
 800214c:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8002150:	4629      	mov	r1, r5
 8002152:	eb43 0101 	adc.w	r1, r3, r1
 8002156:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 800215a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8002166:	f7fe fcc1 	bl	8000aec <__aeabi_uldivmod>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 8002172:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8002176:	f143 0300 	adc.w	r3, r3, #0
 800217a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800217e:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <Set_Random_Motion_Values+0x1128>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4b32      	ldr	r3, [pc, #200]	@ (8002258 <Set_Random_Motion_Values+0x1128>)
 800218e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8002190:	f005 ff46 	bl	8008020 <rand>
 8002194:	4603      	mov	r3, r0
 8002196:	17da      	asrs	r2, r3, #31
 8002198:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800219c:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80021a0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80021a4:	2200      	movs	r2, #0
 80021a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80021aa:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80021ae:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 80021b2:	4622      	mov	r2, r4
 80021b4:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80021b8:	4641      	mov	r1, r8
 80021ba:	fb01 f202 	mul.w	r2, r1, r2
 80021be:	464d      	mov	r5, r9
 80021c0:	4618      	mov	r0, r3
 80021c2:	4621      	mov	r1, r4
 80021c4:	4603      	mov	r3, r0
 80021c6:	fb03 f305 	mul.w	r3, r3, r5
 80021ca:	4413      	add	r3, r2
 80021cc:	4602      	mov	r2, r0
 80021ce:	4641      	mov	r1, r8
 80021d0:	fba2 2101 	umull	r2, r1, r2, r1
 80021d4:	f8c7 1334 	str.w	r1, [r7, #820]	@ 0x334
 80021d8:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 80021dc:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80021e0:	4413      	add	r3, r2
 80021e2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80021e6:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 80021ea:	4622      	mov	r2, r4
 80021ec:	462b      	mov	r3, r5
 80021ee:	f04f 0000 	mov.w	r0, #0
 80021f2:	f04f 0100 	mov.w	r1, #0
 80021f6:	0099      	lsls	r1, r3, #2
 80021f8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80021fc:	0090      	lsls	r0, r2, #2
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4621      	mov	r1, r4
 8002204:	1851      	adds	r1, r2, r1
 8002206:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 800220a:	4629      	mov	r1, r5
 800220c:	eb43 0101 	adc.w	r1, r3, r1
 8002210:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8002214:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002220:	f7fe fc64 	bl	8000aec <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	f112 010a 	adds.w	r1, r2, #10
 800222c:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8002230:	f143 0300 	adc.w	r3, r3, #0
 8002234:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <Set_Random_Motion_Values+0x1128>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	461a      	mov	r2, r3
 800223e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002242:	4413      	add	r3, r2
 8002244:	461a      	mov	r2, r3
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <Set_Random_Motion_Values+0x1128>)
 8002248:	609a      	str	r2, [r3, #8]
}
 800224a:	bf00      	nop
 800224c:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 8002250:	46bd      	mov	sp, r7
 8002252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002256:	bf00      	nop
 8002258:	20000108 	.word	0x20000108

0800225c <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8002260:	4b6d      	ldr	r3, [pc, #436]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b6d      	ldr	r3, [pc, #436]	@ (800241c <Reset_Motion_Values+0x1c0>)
 8002266:	fb83 1302 	smull	r1, r3, r3, r2
 800226a:	11d9      	asrs	r1, r3, #7
 800226c:	17d3      	asrs	r3, r2, #31
 800226e:	1acb      	subs	r3, r1, r3
 8002270:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <Reset_Motion_Values+0x2a>
 800227e:	4b66      	ldr	r3, [pc, #408]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	425b      	negs	r3, r3
 8002284:	e000      	b.n	8002288 <Reset_Motion_Values+0x2c>
 8002286:	230a      	movs	r3, #10
 8002288:	4a63      	ldr	r2, [pc, #396]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 800228a:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 800228c:	4b62      	ldr	r3, [pc, #392]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4b62      	ldr	r3, [pc, #392]	@ (800241c <Reset_Motion_Values+0x1c0>)
 8002292:	fb83 1302 	smull	r1, r3, r3, r2
 8002296:	11d9      	asrs	r1, r3, #7
 8002298:	17d3      	asrs	r3, r2, #31
 800229a:	1acb      	subs	r3, r1, r3
 800229c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <Reset_Motion_Values+0x56>
 80022aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	425b      	negs	r3, r3
 80022b0:	e001      	b.n	80022b6 <Reset_Motion_Values+0x5a>
 80022b2:	f06f 0309 	mvn.w	r3, #9
 80022b6:	4a58      	ldr	r2, [pc, #352]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 80022b8:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 80022ba:	4b57      	ldr	r3, [pc, #348]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	4b57      	ldr	r3, [pc, #348]	@ (800241c <Reset_Motion_Values+0x1c0>)
 80022c0:	fb83 1302 	smull	r1, r3, r3, r2
 80022c4:	11d9      	asrs	r1, r3, #7
 80022c6:	17d3      	asrs	r3, r2, #31
 80022c8:	1acb      	subs	r3, r1, r3
 80022ca:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <Reset_Motion_Values+0x84>
 80022d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	425b      	negs	r3, r3
 80022de:	e000      	b.n	80022e2 <Reset_Motion_Values+0x86>
 80022e0:	230a      	movs	r3, #10
 80022e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002418 <Reset_Motion_Values+0x1bc>)
 80022e4:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 80022e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b4c      	ldr	r3, [pc, #304]	@ (800241c <Reset_Motion_Values+0x1c0>)
 80022ec:	fb83 1302 	smull	r1, r3, r3, r2
 80022f0:	11d9      	asrs	r1, r3, #7
 80022f2:	17d3      	asrs	r3, r2, #31
 80022f4:	1acb      	subs	r3, r1, r3
 80022f6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <Reset_Motion_Values+0xb0>
 8002304:	4b46      	ldr	r3, [pc, #280]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	425b      	negs	r3, r3
 800230a:	e000      	b.n	800230e <Reset_Motion_Values+0xb2>
 800230c:	2364      	movs	r3, #100	@ 0x64
 800230e:	4a44      	ldr	r2, [pc, #272]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 8002310:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8002312:	4b43      	ldr	r3, [pc, #268]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4b41      	ldr	r3, [pc, #260]	@ (800241c <Reset_Motion_Values+0x1c0>)
 8002318:	fb83 1302 	smull	r1, r3, r3, r2
 800231c:	11d9      	asrs	r1, r3, #7
 800231e:	17d3      	asrs	r3, r2, #31
 8002320:	1acb      	subs	r3, r1, r3
 8002322:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <Reset_Motion_Values+0xdc>
 8002330:	4b3b      	ldr	r3, [pc, #236]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	425b      	negs	r3, r3
 8002336:	e001      	b.n	800233c <Reset_Motion_Values+0xe0>
 8002338:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800233c:	4a38      	ldr	r2, [pc, #224]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 800233e:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8002340:	4b37      	ldr	r3, [pc, #220]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	4b35      	ldr	r3, [pc, #212]	@ (800241c <Reset_Motion_Values+0x1c0>)
 8002346:	fb83 1302 	smull	r1, r3, r3, r2
 800234a:	11d9      	asrs	r1, r3, #7
 800234c:	17d3      	asrs	r3, r2, #31
 800234e:	1acb      	subs	r3, r1, r3
 8002350:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <Reset_Motion_Values+0x10a>
 800235e:	4b30      	ldr	r3, [pc, #192]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	425b      	negs	r3, r3
 8002364:	e000      	b.n	8002368 <Reset_Motion_Values+0x10c>
 8002366:	2364      	movs	r3, #100	@ 0x64
 8002368:	4a2d      	ldr	r2, [pc, #180]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 800236a:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 800236c:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b2a      	ldr	r3, [pc, #168]	@ (800241c <Reset_Motion_Values+0x1c0>)
 8002372:	fb83 1302 	smull	r1, r3, r3, r2
 8002376:	11d9      	asrs	r1, r3, #7
 8002378:	17d3      	asrs	r3, r2, #31
 800237a:	1acb      	subs	r3, r1, r3
 800237c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <Reset_Motion_Values+0x136>
 800238a:	4b26      	ldr	r3, [pc, #152]	@ (8002424 <Reset_Motion_Values+0x1c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	425b      	negs	r3, r3
 8002390:	e000      	b.n	8002394 <Reset_Motion_Values+0x138>
 8002392:	2303      	movs	r3, #3
 8002394:	4a23      	ldr	r2, [pc, #140]	@ (8002424 <Reset_Motion_Values+0x1c8>)
 8002396:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8002398:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <Reset_Motion_Values+0x1c0>)
 800239e:	fb83 1302 	smull	r1, r3, r3, r2
 80023a2:	11d9      	asrs	r1, r3, #7
 80023a4:	17d3      	asrs	r3, r2, #31
 80023a6:	1acb      	subs	r3, r1, r3
 80023a8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d103      	bne.n	80023be <Reset_Motion_Values+0x162>
 80023b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <Reset_Motion_Values+0x1c8>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	425b      	negs	r3, r3
 80023bc:	e001      	b.n	80023c2 <Reset_Motion_Values+0x166>
 80023be:	f06f 0302 	mvn.w	r3, #2
 80023c2:	4a18      	ldr	r2, [pc, #96]	@ (8002424 <Reset_Motion_Values+0x1c8>)
 80023c4:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <Reset_Motion_Values+0x1c4>)
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b14      	ldr	r3, [pc, #80]	@ (800241c <Reset_Motion_Values+0x1c0>)
 80023cc:	fb83 1302 	smull	r1, r3, r3, r2
 80023d0:	11d9      	asrs	r1, r3, #7
 80023d2:	17d3      	asrs	r3, r2, #31
 80023d4:	1acb      	subs	r3, r1, r3
 80023d6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d103      	bne.n	80023ec <Reset_Motion_Values+0x190>
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <Reset_Motion_Values+0x1c8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	425b      	negs	r3, r3
 80023ea:	e000      	b.n	80023ee <Reset_Motion_Values+0x192>
 80023ec:	2303      	movs	r3, #3
 80023ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002424 <Reset_Motion_Values+0x1c8>)
 80023f0:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 80023f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <Reset_Motion_Values+0x1cc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	425b      	negs	r3, r3
 80023f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002428 <Reset_Motion_Values+0x1cc>)
 80023fa:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <Reset_Motion_Values+0x1cc>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	425b      	negs	r3, r3
 8002402:	4a09      	ldr	r2, [pc, #36]	@ (8002428 <Reset_Motion_Values+0x1cc>)
 8002404:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8002406:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <Reset_Motion_Values+0x1cc>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	425b      	negs	r3, r3
 800240c:	4a06      	ldr	r2, [pc, #24]	@ (8002428 <Reset_Motion_Values+0x1cc>)
 800240e:	6093      	str	r3, [r2, #8]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	200000e4 	.word	0x200000e4
 800241c:	10624dd3 	.word	0x10624dd3
 8002420:	200000f0 	.word	0x200000f0
 8002424:	200000fc 	.word	0x200000fc
 8002428:	20000108 	.word	0x20000108

0800242c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8002436:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <BSP_PB_Callback+0x1c>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200000aa 	.word	0x200000aa

0800244c <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b08d      	sub	sp, #52	@ 0x34
 8002450:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8002452:	231b      	movs	r3, #27
 8002454:	713b      	strb	r3, [r7, #4]
 8002456:	23c5      	movs	r3, #197	@ 0xc5
 8002458:	717b      	strb	r3, [r7, #5]
 800245a:	23d5      	movs	r3, #213	@ 0xd5
 800245c:	71bb      	strb	r3, [r7, #6]
 800245e:	23a5      	movs	r3, #165	@ 0xa5
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	2302      	movs	r3, #2
 8002464:	723b      	strb	r3, [r7, #8]
 8002466:	2300      	movs	r3, #0
 8002468:	727b      	strb	r3, [r7, #9]
 800246a:	23b4      	movs	r3, #180	@ 0xb4
 800246c:	72bb      	strb	r3, [r7, #10]
 800246e:	239a      	movs	r3, #154	@ 0x9a
 8002470:	72fb      	strb	r3, [r7, #11]
 8002472:	23e1      	movs	r3, #225	@ 0xe1
 8002474:	733b      	strb	r3, [r7, #12]
 8002476:	2311      	movs	r3, #17
 8002478:	737b      	strb	r3, [r7, #13]
 800247a:	2301      	movs	r3, #1
 800247c:	73bb      	strb	r3, [r7, #14]
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	2300      	movs	r3, #0
 8002484:	743b      	strb	r3, [r7, #16]
 8002486:	2300      	movs	r3, #0
 8002488:	747b      	strb	r3, [r7, #17]
 800248a:	2300      	movs	r3, #0
 800248c:	74bb      	strb	r3, [r7, #18]
 800248e:	2300      	movs	r3, #0
 8002490:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002492:	4b52      	ldr	r3, [pc, #328]	@ (80025dc <Add_HWServW2ST_Service+0x190>)
 8002494:	461c      	mov	r4, r3
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800249a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800249e:	4b50      	ldr	r3, [pc, #320]	@ (80025e0 <Add_HWServW2ST_Service+0x194>)
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2310      	movs	r3, #16
 80024a4:	2201      	movs	r2, #1
 80024a6:	494d      	ldr	r1, [pc, #308]	@ (80025dc <Add_HWServW2ST_Service+0x190>)
 80024a8:	2002      	movs	r0, #2
 80024aa:	f004 fe66 	bl	800717a <aci_gatt_add_serv>
 80024ae:	4603      	mov	r3, r0
 80024b0:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 80024b8:	2347      	movs	r3, #71	@ 0x47
 80024ba:	e08a      	b.n	80025d2 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80024bc:	231b      	movs	r3, #27
 80024be:	713b      	strb	r3, [r7, #4]
 80024c0:	23c5      	movs	r3, #197	@ 0xc5
 80024c2:	717b      	strb	r3, [r7, #5]
 80024c4:	23d5      	movs	r3, #213	@ 0xd5
 80024c6:	71bb      	strb	r3, [r7, #6]
 80024c8:	23a5      	movs	r3, #165	@ 0xa5
 80024ca:	71fb      	strb	r3, [r7, #7]
 80024cc:	2302      	movs	r3, #2
 80024ce:	723b      	strb	r3, [r7, #8]
 80024d0:	2300      	movs	r3, #0
 80024d2:	727b      	strb	r3, [r7, #9]
 80024d4:	2336      	movs	r3, #54	@ 0x36
 80024d6:	72bb      	strb	r3, [r7, #10]
 80024d8:	23ac      	movs	r3, #172	@ 0xac
 80024da:	72fb      	strb	r3, [r7, #11]
 80024dc:	23e1      	movs	r3, #225	@ 0xe1
 80024de:	733b      	strb	r3, [r7, #12]
 80024e0:	2311      	movs	r3, #17
 80024e2:	737b      	strb	r3, [r7, #13]
 80024e4:	2301      	movs	r3, #1
 80024e6:	73bb      	strb	r3, [r7, #14]
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	2300      	movs	r3, #0
 80024ee:	743b      	strb	r3, [r7, #16]
 80024f0:	2300      	movs	r3, #0
 80024f2:	747b      	strb	r3, [r7, #17]
 80024f4:	2300      	movs	r3, #0
 80024f6:	74bb      	strb	r3, [r7, #18]
 80024f8:	2300      	movs	r3, #0
 80024fa:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80024fc:	7cbb      	ldrb	r3, [r7, #18]
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	b2db      	uxtb	r3, r3
 8002504:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002506:	7cbb      	ldrb	r3, [r7, #18]
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	b2db      	uxtb	r3, r3
 800250e:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002510:	4b34      	ldr	r3, [pc, #208]	@ (80025e4 <Add_HWServW2ST_Service+0x198>)
 8002512:	461c      	mov	r4, r3
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800251c:	4b30      	ldr	r3, [pc, #192]	@ (80025e0 <Add_HWServW2ST_Service+0x194>)
 800251e:	8818      	ldrh	r0, [r3, #0]
 8002520:	4b31      	ldr	r3, [pc, #196]	@ (80025e8 <Add_HWServW2ST_Service+0x19c>)
 8002522:	9305      	str	r3, [sp, #20]
 8002524:	2300      	movs	r3, #0
 8002526:	9304      	str	r3, [sp, #16]
 8002528:	2310      	movs	r3, #16
 800252a:	9303      	str	r3, [sp, #12]
 800252c:	2304      	movs	r3, #4
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	2300      	movs	r3, #0
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2312      	movs	r3, #18
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2308      	movs	r3, #8
 800253a:	4a2a      	ldr	r2, [pc, #168]	@ (80025e4 <Add_HWServW2ST_Service+0x198>)
 800253c:	2102      	movs	r1, #2
 800253e:	f004 fea5 	bl	800728c <aci_gatt_add_char>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 800254c:	2347      	movs	r3, #71	@ 0x47
 800254e:	e040      	b.n	80025d2 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002550:	231b      	movs	r3, #27
 8002552:	713b      	strb	r3, [r7, #4]
 8002554:	23c5      	movs	r3, #197	@ 0xc5
 8002556:	717b      	strb	r3, [r7, #5]
 8002558:	23d5      	movs	r3, #213	@ 0xd5
 800255a:	71bb      	strb	r3, [r7, #6]
 800255c:	23a5      	movs	r3, #165	@ 0xa5
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	2302      	movs	r3, #2
 8002562:	723b      	strb	r3, [r7, #8]
 8002564:	2300      	movs	r3, #0
 8002566:	727b      	strb	r3, [r7, #9]
 8002568:	2336      	movs	r3, #54	@ 0x36
 800256a:	72bb      	strb	r3, [r7, #10]
 800256c:	23ac      	movs	r3, #172	@ 0xac
 800256e:	72fb      	strb	r3, [r7, #11]
 8002570:	23e1      	movs	r3, #225	@ 0xe1
 8002572:	733b      	strb	r3, [r7, #12]
 8002574:	2311      	movs	r3, #17
 8002576:	737b      	strb	r3, [r7, #13]
 8002578:	2301      	movs	r3, #1
 800257a:	73bb      	strb	r3, [r7, #14]
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	2300      	movs	r3, #0
 8002582:	743b      	strb	r3, [r7, #16]
 8002584:	2300      	movs	r3, #0
 8002586:	747b      	strb	r3, [r7, #17]
 8002588:	23e0      	movs	r3, #224	@ 0xe0
 800258a:	74bb      	strb	r3, [r7, #18]
 800258c:	2300      	movs	r3, #0
 800258e:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <Add_HWServW2ST_Service+0x198>)
 8002592:	461c      	mov	r4, r3
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800259c:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <Add_HWServW2ST_Service+0x194>)
 800259e:	8818      	ldrh	r0, [r3, #0]
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <Add_HWServW2ST_Service+0x1a0>)
 80025a2:	9305      	str	r3, [sp, #20]
 80025a4:	2300      	movs	r3, #0
 80025a6:	9304      	str	r3, [sp, #16]
 80025a8:	2310      	movs	r3, #16
 80025aa:	9303      	str	r3, [sp, #12]
 80025ac:	2304      	movs	r3, #4
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	2310      	movs	r3, #16
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2314      	movs	r3, #20
 80025ba:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <Add_HWServW2ST_Service+0x198>)
 80025bc:	2102      	movs	r1, #2
 80025be:	f004 fe65 	bl	800728c <aci_gatt_add_char>
 80025c2:	4603      	mov	r3, r0
 80025c4:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 80025cc:	2347      	movs	r3, #71	@ 0x47
 80025ce:	e000      	b.n	80025d2 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd90      	pop	{r4, r7, pc}
 80025da:	bf00      	nop
 80025dc:	200000bc 	.word	0x200000bc
 80025e0:	200000b0 	.word	0x200000b0
 80025e4:	200000cc 	.word	0x200000cc
 80025e8:	200000b2 	.word	0x200000b2
 80025ec:	200000b4 	.word	0x200000b4

080025f0 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b08d      	sub	sp, #52	@ 0x34
 80025f4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80025fa:	231b      	movs	r3, #27
 80025fc:	703b      	strb	r3, [r7, #0]
 80025fe:	23c5      	movs	r3, #197	@ 0xc5
 8002600:	707b      	strb	r3, [r7, #1]
 8002602:	23d5      	movs	r3, #213	@ 0xd5
 8002604:	70bb      	strb	r3, [r7, #2]
 8002606:	23a5      	movs	r3, #165	@ 0xa5
 8002608:	70fb      	strb	r3, [r7, #3]
 800260a:	2302      	movs	r3, #2
 800260c:	713b      	strb	r3, [r7, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	717b      	strb	r3, [r7, #5]
 8002612:	23b4      	movs	r3, #180	@ 0xb4
 8002614:	71bb      	strb	r3, [r7, #6]
 8002616:	239a      	movs	r3, #154	@ 0x9a
 8002618:	71fb      	strb	r3, [r7, #7]
 800261a:	23e1      	movs	r3, #225	@ 0xe1
 800261c:	723b      	strb	r3, [r7, #8]
 800261e:	2311      	movs	r3, #17
 8002620:	727b      	strb	r3, [r7, #9]
 8002622:	2302      	movs	r3, #2
 8002624:	72bb      	strb	r3, [r7, #10]
 8002626:	2300      	movs	r3, #0
 8002628:	72fb      	strb	r3, [r7, #11]
 800262a:	2300      	movs	r3, #0
 800262c:	733b      	strb	r3, [r7, #12]
 800262e:	2300      	movs	r3, #0
 8002630:	737b      	strb	r3, [r7, #13]
 8002632:	2300      	movs	r3, #0
 8002634:	73bb      	strb	r3, [r7, #14]
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800263a:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <Add_SWServW2ST_Service+0x110>)
 800263c:	461c      	mov	r4, r3
 800263e:	463b      	mov	r3, r7
 8002640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	0052      	lsls	r2, r2, #1
 800264e:	4413      	add	r3, r2
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3301      	adds	r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4a2b      	ldr	r2, [pc, #172]	@ (8002704 <Add_SWServW2ST_Service+0x114>)
 8002658:	9200      	str	r2, [sp, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	4928      	ldr	r1, [pc, #160]	@ (8002700 <Add_SWServW2ST_Service+0x110>)
 800265e:	2002      	movs	r0, #2
 8002660:	f004 fd8b 	bl	800717a <aci_gatt_add_serv>
 8002664:	4603      	mov	r3, r0
 8002666:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d13f      	bne.n	80026ee <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 800266e:	231b      	movs	r3, #27
 8002670:	703b      	strb	r3, [r7, #0]
 8002672:	23c5      	movs	r3, #197	@ 0xc5
 8002674:	707b      	strb	r3, [r7, #1]
 8002676:	23d5      	movs	r3, #213	@ 0xd5
 8002678:	70bb      	strb	r3, [r7, #2]
 800267a:	23a5      	movs	r3, #165	@ 0xa5
 800267c:	70fb      	strb	r3, [r7, #3]
 800267e:	2302      	movs	r3, #2
 8002680:	713b      	strb	r3, [r7, #4]
 8002682:	2300      	movs	r3, #0
 8002684:	717b      	strb	r3, [r7, #5]
 8002686:	2336      	movs	r3, #54	@ 0x36
 8002688:	71bb      	strb	r3, [r7, #6]
 800268a:	23ac      	movs	r3, #172	@ 0xac
 800268c:	71fb      	strb	r3, [r7, #7]
 800268e:	23e1      	movs	r3, #225	@ 0xe1
 8002690:	723b      	strb	r3, [r7, #8]
 8002692:	2311      	movs	r3, #17
 8002694:	727b      	strb	r3, [r7, #9]
 8002696:	2301      	movs	r3, #1
 8002698:	72bb      	strb	r3, [r7, #10]
 800269a:	2300      	movs	r3, #0
 800269c:	72fb      	strb	r3, [r7, #11]
 800269e:	2300      	movs	r3, #0
 80026a0:	733b      	strb	r3, [r7, #12]
 80026a2:	2301      	movs	r3, #1
 80026a4:	737b      	strb	r3, [r7, #13]
 80026a6:	2300      	movs	r3, #0
 80026a8:	73bb      	strb	r3, [r7, #14]
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80026ae:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <Add_SWServW2ST_Service+0x118>)
 80026b0:	461c      	mov	r4, r3
 80026b2:	463b      	mov	r3, r7
 80026b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <Add_SWServW2ST_Service+0x114>)
 80026bc:	8818      	ldrh	r0, [r3, #0]
 80026be:	4b13      	ldr	r3, [pc, #76]	@ (800270c <Add_SWServW2ST_Service+0x11c>)
 80026c0:	9305      	str	r3, [sp, #20]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9304      	str	r3, [sp, #16]
 80026c6:	2310      	movs	r3, #16
 80026c8:	9303      	str	r3, [sp, #12]
 80026ca:	2304      	movs	r3, #4
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2310      	movs	r3, #16
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2308      	movs	r3, #8
 80026d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002708 <Add_SWServW2ST_Service+0x118>)
 80026da:	2102      	movs	r1, #2
 80026dc:	f004 fdd6 	bl	800728c <aci_gatt_add_char>
 80026e0:	4603      	mov	r3, r0
 80026e2:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e003      	b.n	80026f6 <Add_SWServW2ST_Service+0x106>
    goto fail;
 80026ee:	bf00      	nop
 80026f0:	e000      	b.n	80026f4 <Add_SWServW2ST_Service+0x104>
    goto fail;
 80026f2:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80026f4:	2347      	movs	r3, #71	@ 0x47
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	bf00      	nop
 8002700:	200000bc 	.word	0x200000bc
 8002704:	200000b6 	.word	0x200000b6
 8002708:	200000cc 	.word	0x200000cc
 800270c:	200000b8 	.word	0x200000b8

08002710 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	@ 0x30
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 800271c:	f001 fb5c 	bl	8003dd8 <HAL_GetTick>
 8002720:	4603      	mov	r3, r0
 8002722:	08db      	lsrs	r3, r3, #3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	743b      	strb	r3, [r7, #16]
 8002728:	f001 fb56 	bl	8003dd8 <HAL_GetTick>
 800272c:	4603      	mov	r3, r0
 800272e:	0adb      	lsrs	r3, r3, #11
 8002730:	b2db      	uxtb	r3, r3
 8002732:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	425b      	negs	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	74bb      	strb	r3, [r7, #18]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	425b      	negs	r3, r3
 8002746:	121b      	asrs	r3, r3, #8
 8002748:	b2db      	uxtb	r3, r3
 800274a:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	753b      	strb	r3, [r7, #20]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	121b      	asrs	r3, r3, #8
 800275a:	b2db      	uxtb	r3, r3
 800275c:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	425b      	negs	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	75bb      	strb	r3, [r7, #22]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	425b      	negs	r3, r3
 8002770:	121b      	asrs	r3, r3, #8
 8002772:	b2db      	uxtb	r3, r3
 8002774:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	763b      	strb	r3, [r7, #24]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	121b      	asrs	r3, r3, #8
 8002784:	b2db      	uxtb	r3, r3
 8002786:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	76bb      	strb	r3, [r7, #26]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	121b      	asrs	r3, r3, #8
 8002796:	b2db      	uxtb	r3, r3
 8002798:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	773b      	strb	r3, [r7, #28]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	121b      	asrs	r3, r3, #8
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	77bb      	strb	r3, [r7, #30]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	121b      	asrs	r3, r3, #8
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f887 3020 	strb.w	r3, [r7, #32]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	121b      	asrs	r3, r3, #8
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	121b      	asrs	r3, r3, #8
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <Acc_Update+0x10c>)
 80027ec:	8818      	ldrh	r0, [r3, #0]
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <Acc_Update+0x110>)
 80027f0:	8819      	ldrh	r1, [r3, #0]
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2314      	movs	r3, #20
 80027fa:	2200      	movs	r2, #0
 80027fc:	f004 fe11 	bl	8007422 <aci_gatt_update_char_value>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800280e:	2347      	movs	r3, #71	@ 0x47
 8002810:	e000      	b.n	8002814 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3728      	adds	r7, #40	@ 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200000b0 	.word	0x200000b0
 8002820:	200000b4 	.word	0x200000b4

08002824 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 800282c:	f001 fad4 	bl	8003dd8 <HAL_GetTick>
 8002830:	4603      	mov	r3, r0
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	733b      	strb	r3, [r7, #12]
 8002838:	f001 face 	bl	8003dd8 <HAL_GetTick>
 800283c:	4603      	mov	r3, r0
 800283e:	0adb      	lsrs	r3, r3, #11
 8002840:	b2db      	uxtb	r3, r3
 8002842:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	73bb      	strb	r3, [r7, #14]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	121b      	asrs	r3, r3, #8
 8002852:	b2db      	uxtb	r3, r3
 8002854:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	743b      	strb	r3, [r7, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	121b      	asrs	r3, r3, #8
 8002864:	b2db      	uxtb	r3, r3
 8002866:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	74bb      	strb	r3, [r7, #18]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	121b      	asrs	r3, r3, #8
 8002876:	b2db      	uxtb	r3, r3
 8002878:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 800287a:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <Quat_Update+0x84>)
 800287c:	8818      	ldrh	r0, [r3, #0]
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <Quat_Update+0x88>)
 8002880:	8819      	ldrh	r1, [r3, #0]
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2308      	movs	r3, #8
 800288a:	2200      	movs	r2, #0
 800288c:	f004 fdc9 	bl	8007422 <aci_gatt_update_char_value>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800289a:	2347      	movs	r3, #71	@ 0x47
 800289c:	e000      	b.n	80028a0 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200000b6 	.word	0x200000b6
 80028ac:	200000b8 	.word	0x200000b8

080028b0 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b08e      	sub	sp, #56	@ 0x38
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 80028bc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80028be:	4b56      	ldr	r3, [pc, #344]	@ (8002a18 <Read_Request_CB+0x168>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d105      	bne.n	80028d4 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 80028c8:	4a54      	ldr	r2, [pc, #336]	@ (8002a1c <Read_Request_CB+0x16c>)
 80028ca:	4955      	ldr	r1, [pc, #340]	@ (8002a20 <Read_Request_CB+0x170>)
 80028cc:	4855      	ldr	r0, [pc, #340]	@ (8002a24 <Read_Request_CB+0x174>)
 80028ce:	f7ff ff1f 	bl	8002710 <Acc_Update>
 80028d2:	e090      	b.n	80029f6 <Read_Request_CB+0x146>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80028d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80028d6:	4b54      	ldr	r3, [pc, #336]	@ (8002a28 <Read_Request_CB+0x178>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	429a      	cmp	r2, r3
 80028de:	f040 808a 	bne.w	80029f6 <Read_Request_CB+0x146>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 80028e2:	f005 fb9d 	bl	8008020 <rand>
 80028e6:	4603      	mov	r3, r0
 80028e8:	17da      	asrs	r2, r3, #31
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	61fa      	str	r2, [r7, #28]
 80028ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	0099      	lsls	r1, r3, #2
 80028fc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002900:	0090      	lsls	r0, r2, #2
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	1851      	adds	r1, r2, r1
 800290a:	6139      	str	r1, [r7, #16]
 800290c:	69f9      	ldr	r1, [r7, #28]
 800290e:	eb43 0101 	adc.w	r1, r3, r1
 8002912:	6179      	str	r1, [r7, #20]
 8002914:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002920:	f7fe f8e4 	bl	8000aec <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	f7fd fdb4 	bl	8000498 <__aeabi_ul2d>
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <Read_Request_CB+0x17c>)
 8002936:	f7fd fc2f 	bl	8000198 <__adddf3>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f7fd fddf 	bl	8000504 <__aeabi_d2f>
 8002946:	4603      	mov	r3, r0
 8002948:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 800294a:	f005 fb69 	bl	8008020 <rand>
 800294e:	4603      	mov	r3, r0
 8002950:	17da      	asrs	r2, r3, #31
 8002952:	4698      	mov	r8, r3
 8002954:	4691      	mov	r9, r2
 8002956:	4642      	mov	r2, r8
 8002958:	464b      	mov	r3, r9
 800295a:	1891      	adds	r1, r2, r2
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	415b      	adcs	r3, r3
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002966:	eb12 0408 	adds.w	r4, r2, r8
 800296a:	eb43 0509 	adc.w	r5, r3, r9
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	016b      	lsls	r3, r5, #5
 8002978:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800297c:	0162      	lsls	r2, r4, #5
 800297e:	eb14 0a02 	adds.w	sl, r4, r2
 8002982:	eb45 0b03 	adc.w	fp, r5, r3
 8002986:	eb1a 0308 	adds.w	r3, sl, r8
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	eb4b 0309 	adc.w	r3, fp, r9
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800299e:	f7fe f8a5 	bl	8000aec <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7fd fd75 	bl	8000498 <__aeabi_ul2d>
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a30 <Read_Request_CB+0x180>)
 80029b4:	f7fd fbf0 	bl	8000198 <__adddf3>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fd fda0 	bl	8000504 <__aeabi_d2f>
 80029c4:	4603      	mov	r3, r0
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80029c8:	491a      	ldr	r1, [pc, #104]	@ (8002a34 <Read_Request_CB+0x184>)
 80029ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029cc:	f7fd fef8 	bl	80007c0 <__aeabi_fmul>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f844 	bl	8000a60 <__aeabi_f2iz>
 80029d8:	4604      	mov	r4, r0
 80029da:	4917      	ldr	r1, [pc, #92]	@ (8002a38 <Read_Request_CB+0x188>)
 80029dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80029de:	f7fd feef 	bl	80007c0 <__aeabi_fmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe f83b 	bl	8000a60 <__aeabi_f2iz>
 80029ea:	4603      	mov	r3, r0
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	4619      	mov	r1, r3
 80029f0:	4620      	mov	r0, r4
 80029f2:	f000 f825 	bl	8002a40 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 80029f6:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <Read_Request_CB+0x18c>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <Read_Request_CB+0x15e>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80029fe:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <Read_Request_CB+0x18c>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 fd9d 	bl	8007542 <aci_gatt_allow_read>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3738      	adds	r7, #56	@ 0x38
 8002a12:	46bd      	mov	sp, r7
 8002a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a18:	200000b4 	.word	0x200000b4
 8002a1c:	200000fc 	.word	0x200000fc
 8002a20:	200000f0 	.word	0x200000f0
 8002a24:	200000e4 	.word	0x200000e4
 8002a28:	200000b2 	.word	0x200000b2
 8002a2c:	403b0000 	.word	0x403b0000
 8002a30:	408f4000 	.word	0x408f4000
 8002a34:	42c80000 	.word	0x42c80000
 8002a38:	41200000 	.word	0x41200000
 8002a3c:	200000dc 	.word	0x200000dc

08002a40 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002a4c:	f001 f9c4 	bl	8003dd8 <HAL_GetTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	733b      	strb	r3, [r7, #12]
 8002a58:	f001 f9be 	bl	8003dd8 <HAL_GetTick>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	0adb      	lsrs	r3, r3, #11
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	73bb      	strb	r3, [r7, #14]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	121b      	asrs	r3, r3, #8
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	141b      	asrs	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	743b      	strb	r3, [r7, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	161b      	asrs	r3, r3, #24
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	74bb      	strb	r3, [r7, #18]
 8002a88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a8c:	121b      	asrs	r3, r3, #8
 8002a8e:	b21b      	sxth	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <BlueMS_Environmental_Update+0x84>)
 8002a96:	8818      	ldrh	r0, [r3, #0]
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <BlueMS_Environmental_Update+0x88>)
 8002a9a:	8819      	ldrh	r1, [r3, #0]
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f004 fcbc 	bl	8007422 <aci_gatt_update_char_value>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002ab4:	2347      	movs	r3, #71	@ 0x47
 8002ab6:	e000      	b.n	8002aba <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200000b0 	.word	0x200000b0
 8002ac8:	200000b2 	.word	0x200000b2

08002acc <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b092      	sub	sp, #72	@ 0x48
 8002ad0:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002ad2:	4a36      	ldr	r2, [pc, #216]	@ (8002bac <Set_DeviceConnectable+0xe0>)
 8002ad4:	f107 031c 	add.w	r3, r7, #28
 8002ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002adc:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	703b      	strb	r3, [r7, #0]
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	707b      	strb	r3, [r7, #1]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	70bb      	strb	r3, [r7, #2]
 8002aec:	2308      	movs	r3, #8
 8002aee:	70fb      	strb	r3, [r7, #3]
 8002af0:	2309      	movs	r3, #9
 8002af2:	713b      	strb	r3, [r7, #4]
 8002af4:	2342      	movs	r3, #66	@ 0x42
 8002af6:	717b      	strb	r3, [r7, #5]
 8002af8:	236c      	movs	r3, #108	@ 0x6c
 8002afa:	71bb      	strb	r3, [r7, #6]
 8002afc:	2375      	movs	r3, #117	@ 0x75
 8002afe:	71fb      	strb	r3, [r7, #7]
 8002b00:	2365      	movs	r3, #101	@ 0x65
 8002b02:	723b      	strb	r3, [r7, #8]
 8002b04:	234e      	movs	r3, #78	@ 0x4e
 8002b06:	727b      	strb	r3, [r7, #9]
 8002b08:	2352      	movs	r3, #82	@ 0x52
 8002b0a:	72bb      	strb	r3, [r7, #10]
 8002b0c:	2347      	movs	r3, #71	@ 0x47
 8002b0e:	72fb      	strb	r3, [r7, #11]
 8002b10:	230d      	movs	r3, #13
 8002b12:	733b      	strb	r3, [r7, #12]
 8002b14:	23ff      	movs	r3, #255	@ 0xff
 8002b16:	737b      	strb	r3, [r7, #13]
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73bb      	strb	r3, [r7, #14]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	2300      	movs	r3, #0
 8002b22:	743b      	strb	r3, [r7, #16]
 8002b24:	23f4      	movs	r3, #244	@ 0xf4
 8002b26:	747b      	strb	r3, [r7, #17]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	74bb      	strb	r3, [r7, #18]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8002b30:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb0 <Set_DeviceConnectable+0xe4>)
 8002b32:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8002b34:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8002b36:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <Set_DeviceConnectable+0xe4>)
 8002b38:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002b3a:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb0 <Set_DeviceConnectable+0xe4>)
 8002b3e:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002b40:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8002b42:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <Set_DeviceConnectable+0xe4>)
 8002b44:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8002b46:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <Set_DeviceConnectable+0xe4>)
 8002b4a:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8002b4c:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8002b4e:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <Set_DeviceConnectable+0xe4>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8002b52:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8002b54:	7cbb      	ldrb	r3, [r7, #18]
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2000      	movs	r0, #0
 8002b62:	f004 fe51 	bl	8007808 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8002b66:	2300      	movs	r3, #0
 8002b68:	9306      	str	r3, [sp, #24]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9305      	str	r3, [sp, #20]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9304      	str	r3, [sp, #16]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9303      	str	r3, [sp, #12]
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	9302      	str	r3, [sp, #8]
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2300      	movs	r3, #0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2301      	movs	r3, #1
 8002b86:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8002b8a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f004 f93e 	bl	8006e10 <aci_gap_set_discoverable>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002b9a:	463b      	mov	r3, r7
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	201a      	movs	r0, #26
 8002ba0:	f004 fa77 	bl	8007092 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	@ 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	080093bc 	.word	0x080093bc
 8002bb0:	200000a4 	.word	0x200000a4

08002bb4 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d139      	bne.n	8002c42 <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2bff      	cmp	r3, #255	@ 0xff
 8002bd4:	d01f      	beq.n	8002c16 <user_notify+0x62>
 8002bd6:	2bff      	cmp	r3, #255	@ 0xff
 8002bd8:	dc38      	bgt.n	8002c4c <user_notify+0x98>
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d002      	beq.n	8002be4 <user_notify+0x30>
 8002bde:	2b3e      	cmp	r3, #62	@ 0x3e
 8002be0:	d003      	beq.n	8002bea <user_notify+0x36>
 8002be2:	e033      	b.n	8002c4c <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002be4:	f000 f836 	bl	8002c54 <GAP_DisconnectionComplete_CB>
    }
    break;
 8002be8:	e030      	b.n	8002c4c <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	3302      	adds	r3, #2
 8002bee:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d126      	bne.n	8002c46 <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1d5a      	adds	r2, r3, #5
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f000 f837 	bl	8002c80 <GAP_ConnectionComplete_CB>
        }
        break;
 8002c12:	bf00      	nop
      }
    }
    break;
 8002c14:	e017      	b.n	8002c46 <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	3302      	adds	r3, #2
 8002c1a:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	f640 4314 	movw	r3, #3092	@ 0xc14
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d10e      	bne.n	8002c4a <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3302      	adds	r3, #2
 8002c30:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	885b      	ldrh	r3, [r3, #2]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe39 	bl	80028b0 <Read_Request_CB>
        }
        break;
 8002c3e:	bf00      	nop
      }

    }
    break;
 8002c40:	e003      	b.n	8002c4a <user_notify+0x96>
    return;
 8002c42:	bf00      	nop
 8002c44:	e002      	b.n	8002c4c <user_notify+0x98>
    break;
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <user_notify+0x98>
    break;
 8002c4a:	bf00      	nop
  }
}
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <GAP_DisconnectionComplete_CB+0x20>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <GAP_DisconnectionComplete_CB+0x24>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <GAP_DisconnectionComplete_CB+0x28>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200000e0 	.word	0x200000e0
 8002c78:	20000001 	.word	0x20000001
 8002c7c:	200000de 	.word	0x200000de

08002c80 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <GAP_ConnectionComplete_CB+0x38>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002c92:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <GAP_ConnectionComplete_CB+0x3c>)
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002c98:	2305      	movs	r3, #5
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e002      	b.n	8002ca4 <GAP_ConnectionComplete_CB+0x24>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f9      	bne.n	8002c9e <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	200000e0 	.word	0x200000e0
 8002cbc:	200000dc 	.word	0x200000dc

08002cc0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d44 <HCI_TL_SPI_Init+0x84>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d44 <HCI_TL_SPI_Init+0x84>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	61d3      	str	r3, [r2, #28]
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HCI_TL_SPI_Init+0x84>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ce4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4814      	ldr	r0, [pc, #80]	@ (8002d48 <HCI_TL_SPI_Init+0x88>)
 8002cf6:	f001 f9f9 	bl	80040ec <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d00:	2301      	movs	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	4619      	mov	r1, r3
 8002d12:	480d      	ldr	r0, [pc, #52]	@ (8002d48 <HCI_TL_SPI_Init+0x88>)
 8002d14:	f001 f9ea 	bl	80040ec <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4806      	ldr	r0, [pc, #24]	@ (8002d48 <HCI_TL_SPI_Init+0x88>)
 8002d30:	f001 f9dc 	bl	80040ec <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8002d34:	f000 fc24 	bl	8003580 <BSP_SPI1_Init>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000

08002d4c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002d50:	2101      	movs	r1, #1
 8002d52:	4807      	ldr	r0, [pc, #28]	@ (8002d70 <HCI_TL_SPI_DeInit+0x24>)
 8002d54:	f001 fb5a 	bl	800440c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4805      	ldr	r0, [pc, #20]	@ (8002d70 <HCI_TL_SPI_DeInit+0x24>)
 8002d5c:	f001 fb56 	bl	800440c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <HCI_TL_SPI_DeInit+0x24>)
 8002d66:	f001 fb51 	bl	800440c <HAL_GPIO_DeInit>
  return 0;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40020000 	.word	0x40020000

08002d74 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	480b      	ldr	r0, [pc, #44]	@ (8002dac <HCI_TL_SPI_Reset+0x38>)
 8002d7e:	f001 fc4c 	bl	800461a <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d88:	4808      	ldr	r0, [pc, #32]	@ (8002dac <HCI_TL_SPI_Reset+0x38>)
 8002d8a:	f001 fc46 	bl	800461a <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002d8e:	2005      	movs	r0, #5
 8002d90:	f001 f82c 	bl	8003dec <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002d94:	2201      	movs	r2, #1
 8002d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d9a:	4804      	ldr	r0, [pc, #16]	@ (8002dac <HCI_TL_SPI_Reset+0x38>)
 8002d9c:	f001 fc3d 	bl	800461a <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002da0:	2005      	movs	r0, #5
 8002da2:	f001 f823 	bl	8003dec <HAL_Delay>
  return 0;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40020000 	.word	0x40020000

08002db0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002dc0:	23ff      	movs	r3, #255	@ 0xff
 8002dc2:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002dc4:	4a25      	ldr	r2, [pc, #148]	@ (8002e5c <HCI_TL_SPI_Receive+0xac>)
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dce:	6018      	str	r0, [r3, #0]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	4821      	ldr	r0, [pc, #132]	@ (8002e60 <HCI_TL_SPI_Receive+0xb0>)
 8002dda:	f001 fc1e 	bl	800461a <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002dde:	f107 010c 	add.w	r1, r7, #12
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	2205      	movs	r2, #5
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fbf9 	bl	80035e0 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8002dee:	7b3b      	ldrb	r3, [r7, #12]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d129      	bne.n	8002e48 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002df4:	7c3b      	ldrb	r3, [r7, #16]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	b21b      	sxth	r3, r3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8002e04:	8bfb      	ldrh	r3, [r7, #30]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01e      	beq.n	8002e48 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002e0a:	8bfa      	ldrh	r2, [r7, #30]
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d901      	bls.n	8002e16 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	777b      	strb	r3, [r7, #29]
 8002e1a:	e010      	b.n	8002e3e <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002e1c:	f107 011b 	add.w	r1, r7, #27
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	2201      	movs	r2, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fbda 	bl	80035e0 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8002e2c:	7f7b      	ldrb	r3, [r7, #29]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	7efa      	ldrb	r2, [r7, #27]
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8002e38:	7f7b      	ldrb	r3, [r7, #29]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	777b      	strb	r3, [r7, #29]
 8002e3e:	7f7b      	ldrb	r3, [r7, #29]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	8bfa      	ldrh	r2, [r7, #30]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d8e9      	bhi.n	8002e1c <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4804      	ldr	r0, [pc, #16]	@ (8002e60 <HCI_TL_SPI_Receive+0xb0>)
 8002e4e:	f001 fbe4 	bl	800461a <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8002e52:	7f7b      	ldrb	r3, [r7, #29]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	080093c4 	.word	0x080093c4
 8002e60:	40020000 	.word	0x40020000

08002e64 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002e70:	4a23      	ldr	r2, [pc, #140]	@ (8002f00 <HCI_TL_SPI_Send+0x9c>)
 8002e72:	f107 0310 	add.w	r3, r7, #16
 8002e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7a:	6018      	str	r0, [r3, #0]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f000 ffaa 	bl	8003dd8 <HAL_GetTick>
 8002e84:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	481d      	ldr	r0, [pc, #116]	@ (8002f04 <HCI_TL_SPI_Send+0xa0>)
 8002e90:	f001 fbc3 	bl	800461a <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002e94:	f107 0108 	add.w	r1, r7, #8
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fb9e 	bl	80035e0 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8002ea4:	7a3b      	ldrb	r3, [r7, #8]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d10f      	bne.n	8002eca <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002eaa:	7a7b      	ldrb	r3, [r7, #9]
 8002eac:	461a      	mov	r2, r3
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d806      	bhi.n	8002ec2 <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4913      	ldr	r1, [pc, #76]	@ (8002f08 <HCI_TL_SPI_Send+0xa4>)
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fb90 	bl	80035e0 <BSP_SPI1_SendRecv>
 8002ec0:	e006      	b.n	8002ed0 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002ec2:	f06f 0301 	mvn.w	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	e002      	b.n	8002ed0 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	480b      	ldr	r0, [pc, #44]	@ (8002f04 <HCI_TL_SPI_Send+0xa0>)
 8002ed6:	f001 fba0 	bl	800461a <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002eda:	f000 ff7d 	bl	8003dd8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b0f      	cmp	r3, #15
 8002ee6:	d903      	bls.n	8002ef0 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8002ee8:	f06f 0302 	mvn.w	r3, #2
 8002eec:	61fb      	str	r3, [r7, #28]
      break;
 8002eee:	e002      	b.n	8002ef6 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	dbc7      	blt.n	8002e86 <HCI_TL_SPI_Send+0x22>

  return result;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	080093cc 	.word	0x080093cc
 8002f04:	40020000 	.word	0x40020000
 8002f08:	2000011c 	.word	0x2000011c

08002f0c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002f10:	2101      	movs	r1, #1
 8002f12:	4805      	ldr	r0, [pc, #20]	@ (8002f28 <IsDataAvailable+0x1c>)
 8002f14:	f001 fb6a 	bl	80045ec <HAL_GPIO_ReadPin>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40020000 	.word	0x40020000

08002f2c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002f32:	4b13      	ldr	r3, [pc, #76]	@ (8002f80 <hci_tl_lowlevel_init+0x54>)
 8002f34:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002f36:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <hci_tl_lowlevel_init+0x58>)
 8002f38:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002f3a:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <hci_tl_lowlevel_init+0x5c>)
 8002f3c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002f3e:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <hci_tl_lowlevel_init+0x60>)
 8002f40:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002f42:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <hci_tl_lowlevel_init+0x64>)
 8002f44:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002f46:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <hci_tl_lowlevel_init+0x68>)
 8002f48:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 fd77 	bl	8007a40 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8002f52:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8002f56:	4810      	ldr	r0, [pc, #64]	@ (8002f98 <hci_tl_lowlevel_init+0x6c>)
 8002f58:	f001 f890 	bl	800407c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f9c <hci_tl_lowlevel_init+0x70>)
 8002f5e:	2100      	movs	r1, #0
 8002f60:	480d      	ldr	r0, [pc, #52]	@ (8002f98 <hci_tl_lowlevel_init+0x6c>)
 8002f62:	f001 f872 	bl	800404a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2006      	movs	r0, #6
 8002f6c:	f001 f837 	bl	8003fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f70:	2006      	movs	r0, #6
 8002f72:	f001 f850 	bl	8004016 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002f76:	bf00      	nop
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	08002cc1 	.word	0x08002cc1
 8002f84:	08002d4d 	.word	0x08002d4d
 8002f88:	08002e65 	.word	0x08002e65
 8002f8c:	08002db1 	.word	0x08002db1
 8002f90:	08002d75 	.word	0x08002d75
 8002f94:	08003621 	.word	0x08003621
 8002f98:	20000114 	.word	0x20000114
 8002f9c:	08002fa1 	.word	0x08002fa1

08002fa0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002fa4:	e005      	b.n	8002fb2 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f004 feae 	bl	8007d08 <hci_notify_asynch_evt>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002fb2:	f7ff ffab 	bl	8002f0c <IsDataAvailable>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f4      	bne.n	8002fa6 <hci_tl_lowlevel_isr+0x6>
 8002fbc:	e000      	b.n	8002fc0 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002fbe:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b0ad      	sub	sp, #180	@ 0xb4
 8002fc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fca:	f000 fea1 	bl	8003d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fce:	f000 f8bd 	bl	800314c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fd2:	f000 f961 	bl	8003298 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002fd6:	f000 f907 	bl	80031e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002fda:	f000 f933 	bl	8003244 <MX_USART1_UART_Init>
  MX_BlueNRG_MS_Init();
 8002fde:	f7fd fefb 	bl	8000dd8 <MX_BlueNRG_MS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  buff[0] = REG_ADDR;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	  	  ret = HAL_I2C_Master_Transmit(&hi2c1, TMP_ADDR, buff, 1, HAL_MAX_DELAY);
 8002fe8:	2390      	movs	r3, #144	@ 0x90
 8002fea:	4619      	mov	r1, r3
 8002fec:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	484c      	ldr	r0, [pc, #304]	@ (800312c <main+0x168>)
 8002ffa:	f001 fc83 	bl	8004904 <HAL_I2C_Master_Transmit>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	  	  if (ret != HAL_OK) {
 8003004:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <main+0x5c>
	  		  strcpy((char*)buff, "Error Tx\r\n");
 800300c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003010:	4a47      	ldr	r2, [pc, #284]	@ (8003130 <main+0x16c>)
 8003012:	ca07      	ldmia	r2, {r0, r1, r2}
 8003014:	c303      	stmia	r3!, {r0, r1}
 8003016:	801a      	strh	r2, [r3, #0]
 8003018:	3302      	adds	r3, #2
 800301a:	0c12      	lsrs	r2, r2, #16
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e00d      	b.n	800303c <main+0x78>
	  	  } else {
	  		  ret = HAL_I2C_Master_Receive(&hi2c1, TMP_ADDR, buff, 2, HAL_MAX_DELAY);
 8003020:	2390      	movs	r3, #144	@ 0x90
 8003022:	4619      	mov	r1, r3
 8003024:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8003028:	f04f 33ff 	mov.w	r3, #4294967295
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2302      	movs	r3, #2
 8003030:	483e      	ldr	r0, [pc, #248]	@ (800312c <main+0x168>)
 8003032:	f001 fd65 	bl	8004b00 <HAL_I2C_Master_Receive>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	  	  }
	  	  if (ret != HAL_OK) {
 800303c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <main+0x94>
	  	  		  strcpy((char*)buff, "Error Tx\r\n");
 8003044:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003048:	4a39      	ldr	r2, [pc, #228]	@ (8003130 <main+0x16c>)
 800304a:	ca07      	ldmia	r2, {r0, r1, r2}
 800304c:	c303      	stmia	r3!, {r0, r1}
 800304e:	801a      	strh	r2, [r3, #0]
 8003050:	3302      	adds	r3, #2
 8003052:	0c12      	lsrs	r2, r2, #16
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e00b      	b.n	8003070 <main+0xac>
	  	  	  } else {
	  	  		  val = ((int16_t)buff[0] << 4) | (buff[1] >> 4);
 8003058:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	b21a      	sxth	r2, r3
 8003060:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	b2db      	uxtb	r3, r3
 8003068:	b21b      	sxth	r3, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	  	  	  }
	  	  if (val > 0x7FF) {
 8003070:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8003074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003078:	db07      	blt.n	800308a <main+0xc6>
	  		  val |= 0xF000;
 800307a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800307e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003082:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003086:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	  	  }
	  	  temp_c = (float)val*0.0625f;
 800308a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fb42 	bl	8000718 <__aeabi_i2f>
 8003094:	4603      	mov	r3, r0
 8003096:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fb90 	bl	80007c0 <__aeabi_fmul>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	  	  temp_c *= 100;
 80030a6:	4923      	ldr	r1, [pc, #140]	@ (8003134 <main+0x170>)
 80030a8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80030ac:	f7fd fb88 	bl	80007c0 <__aeabi_fmul>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	  	  sprintf((char*)buff, "%u.%02u C \r\n",
	  			  ((unsigned int)temp_c / 100), ((unsigned int)temp_c % 100));
 80030b6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80030ba:	f7fd fcf7 	bl	8000aac <__aeabi_f2uiz>
 80030be:	4603      	mov	r3, r0
	  	  sprintf((char*)buff, "%u.%02u C \r\n",
 80030c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <main+0x174>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	095c      	lsrs	r4, r3, #5
	  			  ((unsigned int)temp_c / 100), ((unsigned int)temp_c % 100));
 80030c8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80030cc:	f7fd fcee 	bl	8000aac <__aeabi_f2uiz>
 80030d0:	4602      	mov	r2, r0
	  	  sprintf((char*)buff, "%u.%02u C \r\n",
 80030d2:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <main+0x174>)
 80030d4:	fba3 1302 	umull	r1, r3, r3, r2
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	2164      	movs	r1, #100	@ 0x64
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80030e6:	4622      	mov	r2, r4
 80030e8:	4914      	ldr	r1, [pc, #80]	@ (800313c <main+0x178>)
 80030ea:	f005 f899 	bl	8008220 <siprintf>
	  	  //strcpy((char*)buff, "Hello!\r\n");

	  	  HAL_UART_Transmit(&huart2, buff, strlen((char*)buff), HAL_MAX_DELAY);
 80030ee:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd f842 	bl	800017c <strlen>
 80030f8:	4603      	mov	r3, r0
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	480e      	ldr	r0, [pc, #56]	@ (8003140 <main+0x17c>)
 8003106:	f003 fc13 	bl	8006930 <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 800310a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800310e:	f000 fe6d 	bl	8003dec <HAL_Delay>
	  	  temperature = temp_c/10.0f;
 8003112:	490c      	ldr	r1, [pc, #48]	@ (8003144 <main+0x180>)
 8003114:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003118:	f7fd fc06 	bl	8000928 <__aeabi_fdiv>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <main+0x184>)
 8003122:	601a      	str	r2, [r3, #0]
	  	  MX_BlueNRG_MS_Process();
 8003124:	f7fd ff04 	bl	8000f30 <MX_BlueNRG_MS_Process>
  {
 8003128:	e75b      	b.n	8002fe2 <main+0x1e>
 800312a:	bf00      	nop
 800312c:	2000021c 	.word	0x2000021c
 8003130:	080093d4 	.word	0x080093d4
 8003134:	42c80000 	.word	0x42c80000
 8003138:	51eb851f 	.word	0x51eb851f
 800313c:	080093e0 	.word	0x080093e0
 8003140:	20000318 	.word	0x20000318
 8003144:	41200000 	.word	0x41200000
 8003148:	20000004 	.word	0x20000004

0800314c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b092      	sub	sp, #72	@ 0x48
 8003150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	2234      	movs	r2, #52	@ 0x34
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f005 f8c3 	bl	80082e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003160:	463b      	mov	r3, r7
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <SystemClock_Config+0x98>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8003176:	4a1b      	ldr	r2, [pc, #108]	@ (80031e4 <SystemClock_Config+0x98>)
 8003178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800317c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800317e:	2302      	movs	r3, #2
 8003180:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003182:	2301      	movs	r3, #1
 8003184:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003186:	2310      	movs	r3, #16
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800318a:	2302      	movs	r3, #2
 800318c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800318e:	2300      	movs	r3, #0
 8003190:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003192:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003196:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8003198:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800319c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4618      	mov	r0, r3
 80031a4:	f002 fa64 	bl	8005670 <HAL_RCC_OscConfig>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80031ae:	f000 f8e9 	bl	8003384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031b2:	230f      	movs	r3, #15
 80031b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031b6:	2303      	movs	r3, #3
 80031b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031c6:	463b      	mov	r3, r7
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 fd80 	bl	8005cd0 <HAL_RCC_ClockConfig>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80031d6:	f000 f8d5 	bl	8003384 <Error_Handler>
  }
}
 80031da:	bf00      	nop
 80031dc:	3748      	adds	r7, #72	@ 0x48
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40007000 	.word	0x40007000

080031e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031ec:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <MX_I2C1_Init+0x50>)
 80031ee:	4a13      	ldr	r2, [pc, #76]	@ (800323c <MX_I2C1_Init+0x54>)
 80031f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031f2:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <MX_I2C1_Init+0x50>)
 80031f4:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <MX_I2C1_Init+0x58>)
 80031f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <MX_I2C1_Init+0x50>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <MX_I2C1_Init+0x50>)
 8003200:	2200      	movs	r2, #0
 8003202:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <MX_I2C1_Init+0x50>)
 8003206:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800320a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800320c:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <MX_I2C1_Init+0x50>)
 800320e:	2200      	movs	r2, #0
 8003210:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003212:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <MX_I2C1_Init+0x50>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003218:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <MX_I2C1_Init+0x50>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <MX_I2C1_Init+0x50>)
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003224:	4804      	ldr	r0, [pc, #16]	@ (8003238 <MX_I2C1_Init+0x50>)
 8003226:	f001 fa29 	bl	800467c <HAL_I2C_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003230:	f000 f8a8 	bl	8003384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}
 8003238:	2000021c 	.word	0x2000021c
 800323c:	40005400 	.word	0x40005400
 8003240:	000186a0 	.word	0x000186a0

08003244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 800324a:	4a12      	ldr	r2, [pc, #72]	@ (8003294 <MX_USART1_UART_Init+0x50>)
 800324c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 8003250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003256:	4b0e      	ldr	r3, [pc, #56]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800325c:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003262:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 800326a:	220c      	movs	r2, #12
 800326c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800326e:	4b08      	ldr	r3, [pc, #32]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003274:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800327a:	4805      	ldr	r0, [pc, #20]	@ (8003290 <MX_USART1_UART_Init+0x4c>)
 800327c:	f003 fb08 	bl	8006890 <HAL_UART_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003286:	f000 f87d 	bl	8003384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000270 	.word	0x20000270
 8003294:	40013800 	.word	0x40013800

08003298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ae:	4b33      	ldr	r3, [pc, #204]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4a32      	ldr	r2, [pc, #200]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	61d3      	str	r3, [r2, #28]
 80032ba:	4b30      	ldr	r3, [pc, #192]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032c6:	4b2d      	ldr	r3, [pc, #180]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4a2c      	ldr	r2, [pc, #176]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032cc:	f043 0320 	orr.w	r3, r3, #32
 80032d0:	61d3      	str	r3, [r2, #28]
 80032d2:	4b2a      	ldr	r3, [pc, #168]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	4b27      	ldr	r3, [pc, #156]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4a26      	ldr	r2, [pc, #152]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	61d3      	str	r3, [r2, #28]
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f6:	4b21      	ldr	r3, [pc, #132]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a20      	ldr	r2, [pc, #128]	@ (800337c <MX_GPIO_Init+0xe4>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	61d3      	str	r3, [r2, #28]
 8003302:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <MX_GPIO_Init+0xe4>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 800330e:	2200      	movs	r2, #0
 8003310:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003314:	481a      	ldr	r0, [pc, #104]	@ (8003380 <MX_GPIO_Init+0xe8>)
 8003316:	f001 f980 	bl	800461a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800331a:	2301      	movs	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800331e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	4619      	mov	r1, r3
 800332e:	4814      	ldr	r0, [pc, #80]	@ (8003380 <MX_GPIO_Init+0xe8>)
 8003330:	f000 fedc 	bl	80040ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8003334:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333a:	2301      	movs	r3, #1
 800333c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	4619      	mov	r1, r3
 800334c:	480c      	ldr	r0, [pc, #48]	@ (8003380 <MX_GPIO_Init+0xe8>)
 800334e:	f000 fecd 	bl	80040ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	2006      	movs	r0, #6
 8003358:	f000 fe41 	bl	8003fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800335c:	2006      	movs	r0, #6
 800335e:	f000 fe5a 	bl	8004016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2100      	movs	r1, #0
 8003366:	2028      	movs	r0, #40	@ 0x28
 8003368:	f000 fe39 	bl	8003fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800336c:	2028      	movs	r0, #40	@ 0x28
 800336e:	f000 fe52 	bl	8004016 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003372:	bf00      	nop
 8003374:	3728      	adds	r7, #40	@ 0x28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	40020000 	.word	0x40020000

08003384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003388:	b672      	cpsid	i
}
 800338a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <Error_Handler+0x8>

08003390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <HAL_MspInit+0x5c>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	4a14      	ldr	r2, [pc, #80]	@ (80033ec <HAL_MspInit+0x5c>)
 800339c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033a0:	6253      	str	r3, [r2, #36]	@ 0x24
 80033a2:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <HAL_MspInit+0x5c>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <HAL_MspInit+0x5c>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a0e      	ldr	r2, [pc, #56]	@ (80033ec <HAL_MspInit+0x5c>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6213      	str	r3, [r2, #32]
 80033ba:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <HAL_MspInit+0x5c>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_MspInit+0x5c>)
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <HAL_MspInit+0x5c>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	6253      	str	r3, [r2, #36]	@ 0x24
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_MspInit+0x5c>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033de:	2007      	movs	r0, #7
 80033e0:	f000 fdf2 	bl	8003fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800

080033f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	@ 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a17      	ldr	r2, [pc, #92]	@ (800346c <HAL_I2C_MspInit+0x7c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d128      	bne.n	8003464 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	4b17      	ldr	r3, [pc, #92]	@ (8003470 <HAL_I2C_MspInit+0x80>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4a16      	ldr	r2, [pc, #88]	@ (8003470 <HAL_I2C_MspInit+0x80>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	61d3      	str	r3, [r2, #28]
 800341e:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <HAL_I2C_MspInit+0x80>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800342a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800342e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003430:	2312      	movs	r3, #18
 8003432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800343c:	2304      	movs	r3, #4
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	4619      	mov	r1, r3
 8003446:	480b      	ldr	r0, [pc, #44]	@ (8003474 <HAL_I2C_MspInit+0x84>)
 8003448:	f000 fe50 	bl	80040ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800344c:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <HAL_I2C_MspInit+0x80>)
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_I2C_MspInit+0x80>)
 8003452:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003456:	6253      	str	r3, [r2, #36]	@ 0x24
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_I2C_MspInit+0x80>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003464:	bf00      	nop
 8003466:	3728      	adds	r7, #40	@ 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40005400 	.word	0x40005400
 8003470:	40023800 	.word	0x40023800
 8003474:	40020400 	.word	0x40020400

08003478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	@ 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a17      	ldr	r2, [pc, #92]	@ (80034f4 <HAL_UART_MspInit+0x7c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d128      	bne.n	80034ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800349a:	4b17      	ldr	r3, [pc, #92]	@ (80034f8 <HAL_UART_MspInit+0x80>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4a16      	ldr	r2, [pc, #88]	@ (80034f8 <HAL_UART_MspInit+0x80>)
 80034a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a4:	6213      	str	r3, [r2, #32]
 80034a6:	4b14      	ldr	r3, [pc, #80]	@ (80034f8 <HAL_UART_MspInit+0x80>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_UART_MspInit+0x80>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a10      	ldr	r2, [pc, #64]	@ (80034f8 <HAL_UART_MspInit+0x80>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b0e      	ldr	r3, [pc, #56]	@ (80034f8 <HAL_UART_MspInit+0x80>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80034ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d8:	2303      	movs	r3, #3
 80034da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034dc:	2307      	movs	r3, #7
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4619      	mov	r1, r3
 80034e6:	4805      	ldr	r0, [pc, #20]	@ (80034fc <HAL_UART_MspInit+0x84>)
 80034e8:	f000 fe00 	bl	80040ec <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80034ec:	bf00      	nop
 80034ee:	3728      	adds	r7, #40	@ 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40013800 	.word	0x40013800
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40020000 	.word	0x40020000

08003500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <NMI_Handler+0x4>

08003508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <HardFault_Handler+0x4>

08003510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <MemManage_Handler+0x4>

08003518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <BusFault_Handler+0x4>

08003520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <UsageFault_Handler+0x4>

08003528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003550:	f000 fc30 	bl	8003db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003554:	bf00      	nop
 8003556:	bd80      	pop	{r7, pc}

08003558 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800355c:	4802      	ldr	r0, [pc, #8]	@ (8003568 <EXTI0_IRQHandler+0x10>)
 800355e:	f000 fda1 	bl	80040a4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000114 	.word	0x20000114

0800356c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003570:	4802      	ldr	r0, [pc, #8]	@ (800357c <EXTI15_10_IRQHandler+0x10>)
 8003572:	f000 fd97 	bl	80040a4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000014 	.word	0x20000014

08003580 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800358a:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <BSP_SPI1_Init+0x54>)
 800358c:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <BSP_SPI1_Init+0x58>)
 800358e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8003590:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <BSP_SPI1_Init+0x5c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	4911      	ldr	r1, [pc, #68]	@ (80035dc <BSP_SPI1_Init+0x5c>)
 8003598:	600a      	str	r2, [r1, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d114      	bne.n	80035c8 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800359e:	480d      	ldr	r0, [pc, #52]	@ (80035d4 <BSP_SPI1_Init+0x54>)
 80035a0:	f003 f89e 	bl	80066e0 <HAL_SPI_GetState>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10e      	bne.n	80035c8 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80035aa:	480a      	ldr	r0, [pc, #40]	@ (80035d4 <BSP_SPI1_Init+0x54>)
 80035ac:	f000 f87c 	bl	80036a8 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80035b6:	4807      	ldr	r0, [pc, #28]	@ (80035d4 <BSP_SPI1_Init+0x54>)
 80035b8:	f000 f83a 	bl	8003630 <MX_SPI1_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80035c2:	f06f 0307 	mvn.w	r3, #7
 80035c6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80035c8:	687b      	ldr	r3, [r7, #4]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200002b8 	.word	0x200002b8
 80035d8:	40013000 	.word	0x40013000
 80035dc:	20000310 	.word	0x20000310

080035e0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035f8:	9200      	str	r2, [sp, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	4807      	ldr	r0, [pc, #28]	@ (800361c <BSP_SPI1_SendRecv+0x3c>)
 8003600:	f002 febe 	bl	8006380 <HAL_SPI_TransmitReceive>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800360a:	f06f 0305 	mvn.w	r3, #5
 800360e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003610:	697b      	ldr	r3, [r7, #20]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	200002b8 	.word	0x200002b8

08003620 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003624:	f000 fbd8 	bl	8003dd8 <HAL_GetTick>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <MX_SPI1_Init+0x74>)
 8003640:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003648:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003668:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2218      	movs	r2, #24
 800366e:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	220a      	movs	r2, #10
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f002 fde7 	bl	800625c <HAL_SPI_Init>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003698:	7bfb      	ldrb	r3, [r7, #15]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40013000 	.word	0x40013000

080036a8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	@ 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036ba:	6213      	str	r3, [r2, #32]
 80036bc:	4b28      	ldr	r3, [pc, #160]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c8:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a24      	ldr	r2, [pc, #144]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	61d3      	str	r3, [r2, #28]
 80036d4:	4b22      	ldr	r3, [pc, #136]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	61d3      	str	r3, [r2, #28]
 80036ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003760 <SPI1_MspInit+0xb8>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80036f8:	2340      	movs	r3, #64	@ 0x40
 80036fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fc:	2302      	movs	r3, #2
 80036fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003704:	2303      	movs	r3, #3
 8003706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003708:	2305      	movs	r3, #5
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800370c:	f107 0314 	add.w	r3, r7, #20
 8003710:	4619      	mov	r1, r3
 8003712:	4814      	ldr	r0, [pc, #80]	@ (8003764 <SPI1_MspInit+0xbc>)
 8003714:	f000 fcea 	bl	80040ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003718:	2380      	movs	r3, #128	@ 0x80
 800371a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003724:	2303      	movs	r3, #3
 8003726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003728:	2305      	movs	r3, #5
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	4619      	mov	r1, r3
 8003732:	480c      	ldr	r0, [pc, #48]	@ (8003764 <SPI1_MspInit+0xbc>)
 8003734:	f000 fcda 	bl	80040ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003738:	2308      	movs	r3, #8
 800373a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003744:	2303      	movs	r3, #3
 8003746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003748:	2305      	movs	r3, #5
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	4619      	mov	r1, r3
 8003752:	4805      	ldr	r0, [pc, #20]	@ (8003768 <SPI1_MspInit+0xc0>)
 8003754:	f000 fcca 	bl	80040ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003758:	bf00      	nop
 800375a:	3728      	adds	r7, #40	@ 0x28
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	40020000 	.word	0x40020000
 8003768:	40020400 	.word	0x40020400

0800376c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return 1;
 8003770:	2301      	movs	r3, #1
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <_kill>:

int _kill(int pid, int sig)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003784:	f004 fdfe 	bl	8008384 <__errno>
 8003788:	4603      	mov	r3, r0
 800378a:	2216      	movs	r2, #22
 800378c:	601a      	str	r2, [r3, #0]
  return -1;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_exit>:

void _exit (int status)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037a2:	f04f 31ff 	mov.w	r1, #4294967295
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffe7 	bl	800377a <_kill>
  while (1) {}    /* Make sure we hang here */
 80037ac:	bf00      	nop
 80037ae:	e7fd      	b.n	80037ac <_exit+0x12>

080037b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e00a      	b.n	80037d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037c2:	f3af 8000 	nop.w
 80037c6:	4601      	mov	r1, r0
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	60ba      	str	r2, [r7, #8]
 80037ce:	b2ca      	uxtb	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3301      	adds	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	dbf0      	blt.n	80037c2 <_read+0x12>
  }

  return len;
 80037e0:	687b      	ldr	r3, [r7, #4]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e009      	b.n	8003810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	60ba      	str	r2, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa23 	bl	8003c50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	dbf1      	blt.n	80037fc <_write+0x12>
  }
  return len;
 8003818:	687b      	ldr	r3, [r7, #4]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <_close>:

int _close(int file)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003848:	605a      	str	r2, [r3, #4]
  return 0;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <_isatty>:

int _isatty(int file)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800385e:	2301      	movs	r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
	...

08003884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800388c:	4a14      	ldr	r2, [pc, #80]	@ (80038e0 <_sbrk+0x5c>)
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <_sbrk+0x60>)
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <_sbrk+0x64>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a0:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <_sbrk+0x64>)
 80038a2:	4a12      	ldr	r2, [pc, #72]	@ (80038ec <_sbrk+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <_sbrk+0x64>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d207      	bcs.n	80038c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038b4:	f004 fd66 	bl	8008384 <__errno>
 80038b8:	4603      	mov	r3, r0
 80038ba:	220c      	movs	r2, #12
 80038bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	e009      	b.n	80038d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038c4:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ca:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <_sbrk+0x64>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <_sbrk+0x64>)
 80038d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20014000 	.word	0x20014000
 80038e4:	00000400 	.word	0x00000400
 80038e8:	20000314 	.word	0x20000314
 80038ec:	200007a0 	.word	0x200007a0

080038f0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80038fc:	f7ff fff8 	bl	80038f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003900:	480b      	ldr	r0, [pc, #44]	@ (8003930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003902:	490c      	ldr	r1, [pc, #48]	@ (8003934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003904:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003908:	e002      	b.n	8003910 <LoopCopyDataInit>

0800390a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800390a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800390c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800390e:	3304      	adds	r3, #4

08003910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003914:	d3f9      	bcc.n	800390a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003916:	4a09      	ldr	r2, [pc, #36]	@ (800393c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003918:	4c09      	ldr	r4, [pc, #36]	@ (8003940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800391a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800391c:	e001      	b.n	8003922 <LoopFillZerobss>

0800391e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800391e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003920:	3204      	adds	r2, #4

08003922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003924:	d3fb      	bcc.n	800391e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003926:	f004 fd33 	bl	8008390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800392a:	f7ff fb4b 	bl	8002fc4 <main>
  bx lr
 800392e:	4770      	bx	lr
  ldr r0, =_sdata
 8003930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003934:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003938:	08009518 	.word	0x08009518
  ldr r2, =_sbss
 800393c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003940:	200007a0 	.word	0x200007a0

08003944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003944:	e7fe      	b.n	8003944 <ADC1_IRQHandler>
	...

08003948 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <BSP_LED_Init+0x20>)
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	08009414 	.word	0x08009414

0800396c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	4a06      	ldr	r2, [pc, #24]	@ (8003994 <BSP_LED_Toggle+0x28>)
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	2220      	movs	r2, #32
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fe61 	bl	800464a <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000000c 	.word	0x2000000c

08003998 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800399e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <LED_USER_GPIO_Init+0x74>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a0c <LED_USER_GPIO_Init+0x74>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	61d3      	str	r3, [r2, #28]
 80039aa:	4b18      	ldr	r3, [pc, #96]	@ (8003a0c <LED_USER_GPIO_Init+0x74>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b6:	f107 030c 	add.w	r3, r7, #12
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c6:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <LED_USER_GPIO_Init+0x74>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	4a10      	ldr	r2, [pc, #64]	@ (8003a0c <LED_USER_GPIO_Init+0x74>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	61d3      	str	r3, [r2, #28]
 80039d2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <LED_USER_GPIO_Init+0x74>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	2120      	movs	r1, #32
 80039e2:	480b      	ldr	r0, [pc, #44]	@ (8003a10 <LED_USER_GPIO_Init+0x78>)
 80039e4:	f000 fe19 	bl	800461a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80039e8:	2320      	movs	r3, #32
 80039ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ec:	2301      	movs	r3, #1
 80039ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	4619      	mov	r1, r3
 80039fe:	4804      	ldr	r0, [pc, #16]	@ (8003a10 <LED_USER_GPIO_Init+0x78>)
 8003a00:	f000 fb74 	bl	80040ec <HAL_GPIO_Init>

}
 8003a04:	bf00      	nop
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020000 	.word	0x40020000

08003a14 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	71fb      	strb	r3, [r7, #7]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa8 <BSP_PB_Init+0x94>)
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003a32:	79bb      	ldrb	r3, [r7, #6]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d132      	bne.n	8003a9e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003aac <BSP_PB_Init+0x98>)
 8003a3e:	441a      	add	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	491b      	ldr	r1, [pc, #108]	@ (8003ab0 <BSP_PB_Init+0x9c>)
 8003a44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 fb16 	bl	800407c <HAL_EXTI_GetHandle>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a56:	f06f 0303 	mvn.w	r3, #3
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e01f      	b.n	8003a9e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4a12      	ldr	r2, [pc, #72]	@ (8003aac <BSP_PB_Init+0x98>)
 8003a64:	1898      	adds	r0, r3, r2
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	4a12      	ldr	r2, [pc, #72]	@ (8003ab4 <BSP_PB_Init+0xa0>)
 8003a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2100      	movs	r1, #0
 8003a72:	f000 faea 	bl	800404a <HAL_EXTI_RegisterCallback>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a7c:	f06f 0303 	mvn.w	r3, #3
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e00c      	b.n	8003a9e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003a84:	2028      	movs	r0, #40	@ 0x28
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab8 <BSP_PB_Init+0xa4>)
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	4619      	mov	r1, r3
 8003a92:	f000 faa4 	bl	8003fde <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003a96:	2328      	movs	r3, #40	@ 0x28
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fabc 	bl	8004016 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	08009418 	.word	0x08009418
 8003aac:	20000014 	.word	0x20000014
 8003ab0:	0800941c 	.word	0x0800941c
 8003ab4:	08009420 	.word	0x08009420
 8003ab8:	08009424 	.word	0x08009424

08003abc <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	4a09      	ldr	r2, [pc, #36]	@ (8003af0 <BSP_PB_GetState+0x34>)
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fd89 	bl	80045ec <HAL_GPIO_ReadPin>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000010 	.word	0x20000010

08003af4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003af8:	2000      	movs	r0, #0
 8003afa:	f7fe fc97 	bl	800242c <BSP_PB_Callback>
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0a:	4b19      	ldr	r3, [pc, #100]	@ (8003b70 <BUTTON_USER_GPIO_Init+0x6c>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4a18      	ldr	r2, [pc, #96]	@ (8003b70 <BUTTON_USER_GPIO_Init+0x6c>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	61d3      	str	r3, [r2, #28]
 8003b16:	4b16      	ldr	r3, [pc, #88]	@ (8003b70 <BUTTON_USER_GPIO_Init+0x6c>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b32:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <BUTTON_USER_GPIO_Init+0x6c>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4a0e      	ldr	r2, [pc, #56]	@ (8003b70 <BUTTON_USER_GPIO_Init+0x6c>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	61d3      	str	r3, [r2, #28]
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <BUTTON_USER_GPIO_Init+0x6c>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8003b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8003b5a:	f107 030c 	add.w	r3, r7, #12
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4804      	ldr	r0, [pc, #16]	@ (8003b74 <BUTTON_USER_GPIO_Init+0x70>)
 8003b62:	f000 fac3 	bl	80040ec <HAL_GPIO_Init>

}
 8003b66:	bf00      	nop
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40020800 	.word	0x40020800

08003b78 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d903      	bls.n	8003b94 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b8c:	f06f 0301 	mvn.w	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e025      	b.n	8003be0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	79fa      	ldrb	r2, [r7, #7]
 8003b98:	4914      	ldr	r1, [pc, #80]	@ (8003bec <BSP_COM_Init+0x74>)
 8003b9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003b9e:	4814      	ldr	r0, [pc, #80]	@ (8003bf0 <BSP_COM_Init+0x78>)
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4403      	add	r3, r0
 8003baa:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8003bac:	79fa      	ldrb	r2, [r7, #7]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf0 <BSP_COM_Init+0x78>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f864 	bl	8003c88 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8003bc0:	79fa      	ldrb	r2, [r7, #7]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4a09      	ldr	r2, [pc, #36]	@ (8003bf0 <BSP_COM_Init+0x78>)
 8003bcc:	4413      	add	r3, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f810 	bl	8003bf4 <MX_USART2_UART_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003bda:	f06f 0303 	mvn.w	r3, #3
 8003bde:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003be0:	68fb      	ldr	r3, [r7, #12]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000001c 	.word	0x2000001c
 8003bf0:	20000318 	.word	0x20000318

08003bf4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a12      	ldr	r2, [pc, #72]	@ (8003c4c <MX_USART2_UART_Init+0x58>)
 8003c04:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c0c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	220c      	movs	r2, #12
 8003c24:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f002 fe2c 	bl	8006890 <HAL_UART_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40004400 	.word	0x40004400

08003c50 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003c58:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <__io_putchar+0x30>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4a07      	ldr	r2, [pc, #28]	@ (8003c84 <__io_putchar+0x34>)
 8003c68:	1898      	adds	r0, r3, r2
 8003c6a:	1d39      	adds	r1, r7, #4
 8003c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c70:	2201      	movs	r2, #1
 8003c72:	f002 fe5d 	bl	8006930 <HAL_UART_Transmit>
  return ch;
 8003c76:	687b      	ldr	r3, [r7, #4]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000360 	.word	0x20000360
 8003c84:	20000318 	.word	0x20000318

08003c88 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	@ 0x28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c90:	4b1d      	ldr	r3, [pc, #116]	@ (8003d08 <USART2_MspInit+0x80>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <USART2_MspInit+0x80>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9a:	6253      	str	r3, [r2, #36]	@ 0x24
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <USART2_MspInit+0x80>)
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca8:	4b17      	ldr	r3, [pc, #92]	@ (8003d08 <USART2_MspInit+0x80>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	4a16      	ldr	r2, [pc, #88]	@ (8003d08 <USART2_MspInit+0x80>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	61d3      	str	r3, [r2, #28]
 8003cb4:	4b14      	ldr	r3, [pc, #80]	@ (8003d08 <USART2_MspInit+0x80>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8003cd0:	2307      	movs	r3, #7
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4619      	mov	r1, r3
 8003cda:	480c      	ldr	r0, [pc, #48]	@ (8003d0c <USART2_MspInit+0x84>)
 8003cdc:	f000 fa06 	bl	80040ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cec:	2303      	movs	r3, #3
 8003cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8003cf0:	2307      	movs	r3, #7
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4804      	ldr	r0, [pc, #16]	@ (8003d0c <USART2_MspInit+0x84>)
 8003cfc:	f000 f9f6 	bl	80040ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8003d00:	bf00      	nop
 8003d02:	3728      	adds	r7, #40	@ 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40020000 	.word	0x40020000

08003d10 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d1a:	2003      	movs	r0, #3
 8003d1c:	f000 f954 	bl	8003fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d20:	2000      	movs	r0, #0
 8003d22:	f000 f80d 	bl	8003d40 <HAL_InitTick>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	71fb      	strb	r3, [r7, #7]
 8003d30:	e001      	b.n	8003d36 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d32:	f7ff fb2d 	bl	8003390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d36:	79fb      	ldrb	r3, [r7, #7]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003d4c:	4b16      	ldr	r3, [pc, #88]	@ (8003da8 <HAL_InitTick+0x68>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d022      	beq.n	8003d9a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003d54:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <HAL_InitTick+0x6c>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b13      	ldr	r3, [pc, #76]	@ (8003da8 <HAL_InitTick+0x68>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f962 	bl	8004032 <HAL_SYSTICK_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10f      	bne.n	8003d94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	d809      	bhi.n	8003d8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	f000 f92c 	bl	8003fde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d86:	4a0a      	ldr	r2, [pc, #40]	@ (8003db0 <HAL_InitTick+0x70>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	e007      	b.n	8003d9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
 8003d92:	e004      	b.n	8003d9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e001      	b.n	8003d9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000024 	.word	0x20000024
 8003dac:	20000008 	.word	0x20000008
 8003db0:	20000020 	.word	0x20000020

08003db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_IncTick+0x1c>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <HAL_IncTick+0x20>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	4a03      	ldr	r2, [pc, #12]	@ (8003dd0 <HAL_IncTick+0x1c>)
 8003dc4:	6013      	str	r3, [r2, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000364 	.word	0x20000364
 8003dd4:	20000024 	.word	0x20000024

08003dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return uwTick;
 8003ddc:	4b02      	ldr	r3, [pc, #8]	@ (8003de8 <HAL_GetTick+0x10>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	20000364 	.word	0x20000364

08003dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7ff fff0 	bl	8003dd8 <HAL_GetTick>
 8003df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d004      	beq.n	8003e10 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <HAL_Delay+0x40>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e10:	bf00      	nop
 8003e12:	f7ff ffe1 	bl	8003dd8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d8f7      	bhi.n	8003e12 <HAL_Delay+0x26>
  {
  }
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000024 	.word	0x20000024

08003e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e40:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <__NVIC_SetPriorityGrouping+0x44>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e62:	4a04      	ldr	r2, [pc, #16]	@ (8003e74 <__NVIC_SetPriorityGrouping+0x44>)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	60d3      	str	r3, [r2, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e7c:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <__NVIC_GetPriorityGrouping+0x18>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	f003 0307 	and.w	r3, r3, #7
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db0b      	blt.n	8003ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	f003 021f 	and.w	r2, r3, #31
 8003eac:	4906      	ldr	r1, [pc, #24]	@ (8003ec8 <__NVIC_EnableIRQ+0x34>)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db0a      	blt.n	8003ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	490c      	ldr	r1, [pc, #48]	@ (8003f18 <__NVIC_SetPriority+0x4c>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef4:	e00a      	b.n	8003f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4908      	ldr	r1, [pc, #32]	@ (8003f1c <__NVIC_SetPriority+0x50>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3b04      	subs	r3, #4
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	440b      	add	r3, r1
 8003f0a:	761a      	strb	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	@ 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf28      	it	cs
 8003f3e:	2304      	movcs	r3, #4
 8003f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d902      	bls.n	8003f50 <NVIC_EncodePriority+0x30>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3b03      	subs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <NVIC_EncodePriority+0x32>
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	401a      	ands	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f68:	f04f 31ff 	mov.w	r1, #4294967295
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	4313      	orrs	r3, r2
         );
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	@ 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f94:	d301      	bcc.n	8003f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f96:	2301      	movs	r3, #1
 8003f98:	e00f      	b.n	8003fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc4 <SysTick_Config+0x40>)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fa2:	210f      	movs	r1, #15
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa8:	f7ff ff90 	bl	8003ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <SysTick_Config+0x40>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fb2:	4b04      	ldr	r3, [pc, #16]	@ (8003fc4 <SysTick_Config+0x40>)
 8003fb4:	2207      	movs	r2, #7
 8003fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	e000e010 	.word	0xe000e010

08003fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ff2d 	bl	8003e30 <__NVIC_SetPriorityGrouping>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b086      	sub	sp, #24
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff0:	f7ff ff42 	bl	8003e78 <__NVIC_GetPriorityGrouping>
 8003ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	f7ff ff90 	bl	8003f20 <NVIC_EncodePriority>
 8004000:	4602      	mov	r2, r0
 8004002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff5f 	bl	8003ecc <__NVIC_SetPriority>
}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	4603      	mov	r3, r0
 800401e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff35 	bl	8003e94 <__NVIC_EnableIRQ>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff ffa2 	bl	8003f84 <SysTick_Config>
 8004040:	4603      	mov	r3, r0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	460b      	mov	r3, r1
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800405c:	7afb      	ldrb	r3, [r7, #11]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	605a      	str	r2, [r3, #4]
      break;
 8004068:	e002      	b.n	8004070 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
      break;
 800406e:	bf00      	nop
  }

  return status;
 8004070:	7dfb      	ldrb	r3, [r7, #23]
}
 8004072:	4618      	mov	r0, r3
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e003      	b.n	8004098 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004096:	2300      	movs	r3, #0
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2201      	movs	r2, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80040bc:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <HAL_EXTI_IRQHandler+0x44>)
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4013      	ands	r3, r2
 80040c4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80040cc:	4a06      	ldr	r2, [pc, #24]	@ (80040e8 <HAL_EXTI_IRQHandler+0x44>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4798      	blx	r3
    }
  }
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40010400 	.word	0x40010400

080040ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004102:	e160      	b.n	80043c6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	4013      	ands	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8152 	beq.w	80043c0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d005      	beq.n	8004134 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004130:	2b02      	cmp	r3, #2
 8004132:	d130      	bne.n	8004196 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	2203      	movs	r2, #3
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800416a:	2201      	movs	r2, #1
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	f003 0201 	and.w	r2, r3, #1
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d017      	beq.n	80041d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	2203      	movs	r2, #3
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d123      	bne.n	8004226 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	08da      	lsrs	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3208      	adds	r2, #8
 80041e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	220f      	movs	r2, #15
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	08da      	lsrs	r2, r3, #3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3208      	adds	r2, #8
 8004220:	6939      	ldr	r1, [r7, #16]
 8004222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0203 	and.w	r2, r3, #3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80ac 	beq.w	80043c0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004268:	4b5e      	ldr	r3, [pc, #376]	@ (80043e4 <HAL_GPIO_Init+0x2f8>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4a5d      	ldr	r2, [pc, #372]	@ (80043e4 <HAL_GPIO_Init+0x2f8>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6213      	str	r3, [r2, #32]
 8004274:	4b5b      	ldr	r3, [pc, #364]	@ (80043e4 <HAL_GPIO_Init+0x2f8>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004280:	4a59      	ldr	r2, [pc, #356]	@ (80043e8 <HAL_GPIO_Init+0x2fc>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	3302      	adds	r3, #2
 8004288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a51      	ldr	r2, [pc, #324]	@ (80043ec <HAL_GPIO_Init+0x300>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d025      	beq.n	80042f8 <HAL_GPIO_Init+0x20c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a50      	ldr	r2, [pc, #320]	@ (80043f0 <HAL_GPIO_Init+0x304>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01f      	beq.n	80042f4 <HAL_GPIO_Init+0x208>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a4f      	ldr	r2, [pc, #316]	@ (80043f4 <HAL_GPIO_Init+0x308>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d019      	beq.n	80042f0 <HAL_GPIO_Init+0x204>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a4e      	ldr	r2, [pc, #312]	@ (80043f8 <HAL_GPIO_Init+0x30c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_GPIO_Init+0x200>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a4d      	ldr	r2, [pc, #308]	@ (80043fc <HAL_GPIO_Init+0x310>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00d      	beq.n	80042e8 <HAL_GPIO_Init+0x1fc>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004400 <HAL_GPIO_Init+0x314>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <HAL_GPIO_Init+0x1f8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a4b      	ldr	r2, [pc, #300]	@ (8004404 <HAL_GPIO_Init+0x318>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d101      	bne.n	80042e0 <HAL_GPIO_Init+0x1f4>
 80042dc:	2306      	movs	r3, #6
 80042de:	e00c      	b.n	80042fa <HAL_GPIO_Init+0x20e>
 80042e0:	2307      	movs	r3, #7
 80042e2:	e00a      	b.n	80042fa <HAL_GPIO_Init+0x20e>
 80042e4:	2305      	movs	r3, #5
 80042e6:	e008      	b.n	80042fa <HAL_GPIO_Init+0x20e>
 80042e8:	2304      	movs	r3, #4
 80042ea:	e006      	b.n	80042fa <HAL_GPIO_Init+0x20e>
 80042ec:	2303      	movs	r3, #3
 80042ee:	e004      	b.n	80042fa <HAL_GPIO_Init+0x20e>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e002      	b.n	80042fa <HAL_GPIO_Init+0x20e>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_GPIO_Init+0x20e>
 80042f8:	2300      	movs	r3, #0
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	f002 0203 	and.w	r2, r2, #3
 8004300:	0092      	lsls	r2, r2, #2
 8004302:	4093      	lsls	r3, r2
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800430a:	4937      	ldr	r1, [pc, #220]	@ (80043e8 <HAL_GPIO_Init+0x2fc>)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004318:	4b3b      	ldr	r3, [pc, #236]	@ (8004408 <HAL_GPIO_Init+0x31c>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800433c:	4a32      	ldr	r2, [pc, #200]	@ (8004408 <HAL_GPIO_Init+0x31c>)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004342:	4b31      	ldr	r3, [pc, #196]	@ (8004408 <HAL_GPIO_Init+0x31c>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004366:	4a28      	ldr	r2, [pc, #160]	@ (8004408 <HAL_GPIO_Init+0x31c>)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800436c:	4b26      	ldr	r3, [pc, #152]	@ (8004408 <HAL_GPIO_Init+0x31c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004390:	4a1d      	ldr	r2, [pc, #116]	@ (8004408 <HAL_GPIO_Init+0x31c>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004396:	4b1c      	ldr	r3, [pc, #112]	@ (8004408 <HAL_GPIO_Init+0x31c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	43db      	mvns	r3, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043ba:	4a13      	ldr	r2, [pc, #76]	@ (8004408 <HAL_GPIO_Init+0x31c>)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f ae97 	bne.w	8004104 <HAL_GPIO_Init+0x18>
  }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40020000 	.word	0x40020000
 80043f0:	40020400 	.word	0x40020400
 80043f4:	40020800 	.word	0x40020800
 80043f8:	40020c00 	.word	0x40020c00
 80043fc:	40021000 	.word	0x40021000
 8004400:	40021400 	.word	0x40021400
 8004404:	40021800 	.word	0x40021800
 8004408:	40010400 	.word	0x40010400

0800440c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8004422:	e0c4      	b.n	80045ae <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8004424:	2201      	movs	r2, #1
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80b7 	beq.w	80045a8 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800443a:	4a63      	ldr	r2, [pc, #396]	@ (80045c8 <HAL_GPIO_DeInit+0x1bc>)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	089b      	lsrs	r3, r3, #2
 8004440:	3302      	adds	r3, #2
 8004442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004446:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	220f      	movs	r2, #15
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4013      	ands	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a5b      	ldr	r2, [pc, #364]	@ (80045cc <HAL_GPIO_DeInit+0x1c0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d025      	beq.n	80044b0 <HAL_GPIO_DeInit+0xa4>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a5a      	ldr	r2, [pc, #360]	@ (80045d0 <HAL_GPIO_DeInit+0x1c4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d01f      	beq.n	80044ac <HAL_GPIO_DeInit+0xa0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a59      	ldr	r2, [pc, #356]	@ (80045d4 <HAL_GPIO_DeInit+0x1c8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d019      	beq.n	80044a8 <HAL_GPIO_DeInit+0x9c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a58      	ldr	r2, [pc, #352]	@ (80045d8 <HAL_GPIO_DeInit+0x1cc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d013      	beq.n	80044a4 <HAL_GPIO_DeInit+0x98>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a57      	ldr	r2, [pc, #348]	@ (80045dc <HAL_GPIO_DeInit+0x1d0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00d      	beq.n	80044a0 <HAL_GPIO_DeInit+0x94>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a56      	ldr	r2, [pc, #344]	@ (80045e0 <HAL_GPIO_DeInit+0x1d4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d007      	beq.n	800449c <HAL_GPIO_DeInit+0x90>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a55      	ldr	r2, [pc, #340]	@ (80045e4 <HAL_GPIO_DeInit+0x1d8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d101      	bne.n	8004498 <HAL_GPIO_DeInit+0x8c>
 8004494:	2306      	movs	r3, #6
 8004496:	e00c      	b.n	80044b2 <HAL_GPIO_DeInit+0xa6>
 8004498:	2307      	movs	r3, #7
 800449a:	e00a      	b.n	80044b2 <HAL_GPIO_DeInit+0xa6>
 800449c:	2305      	movs	r3, #5
 800449e:	e008      	b.n	80044b2 <HAL_GPIO_DeInit+0xa6>
 80044a0:	2304      	movs	r3, #4
 80044a2:	e006      	b.n	80044b2 <HAL_GPIO_DeInit+0xa6>
 80044a4:	2303      	movs	r3, #3
 80044a6:	e004      	b.n	80044b2 <HAL_GPIO_DeInit+0xa6>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e002      	b.n	80044b2 <HAL_GPIO_DeInit+0xa6>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_GPIO_DeInit+0xa6>
 80044b0:	2300      	movs	r3, #0
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	f002 0203 	and.w	r2, r2, #3
 80044b8:	0092      	lsls	r2, r2, #2
 80044ba:	4093      	lsls	r3, r2
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d132      	bne.n	8004528 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80044c2:	4b49      	ldr	r3, [pc, #292]	@ (80045e8 <HAL_GPIO_DeInit+0x1dc>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	4947      	ldr	r1, [pc, #284]	@ (80045e8 <HAL_GPIO_DeInit+0x1dc>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80044d0:	4b45      	ldr	r3, [pc, #276]	@ (80045e8 <HAL_GPIO_DeInit+0x1dc>)
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	4943      	ldr	r1, [pc, #268]	@ (80045e8 <HAL_GPIO_DeInit+0x1dc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80044de:	4b42      	ldr	r3, [pc, #264]	@ (80045e8 <HAL_GPIO_DeInit+0x1dc>)
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	4940      	ldr	r1, [pc, #256]	@ (80045e8 <HAL_GPIO_DeInit+0x1dc>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80044ec:	4b3e      	ldr	r3, [pc, #248]	@ (80045e8 <HAL_GPIO_DeInit+0x1dc>)
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	493c      	ldr	r1, [pc, #240]	@ (80045e8 <HAL_GPIO_DeInit+0x1dc>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	220f      	movs	r2, #15
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800450a:	4a2f      	ldr	r2, [pc, #188]	@ (80045c8 <HAL_GPIO_DeInit+0x1bc>)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	43da      	mvns	r2, r3
 800451a:	482b      	ldr	r0, [pc, #172]	@ (80045c8 <HAL_GPIO_DeInit+0x1bc>)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	400a      	ands	r2, r1
 8004522:	3302      	adds	r3, #2
 8004524:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	2103      	movs	r1, #3
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	401a      	ands	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	08da      	lsrs	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3208      	adds	r2, #8
 8004546:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	220f      	movs	r2, #15
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	08d2      	lsrs	r2, r2, #3
 800455e:	4019      	ands	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3208      	adds	r2, #8
 8004564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	2103      	movs	r1, #3
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	401a      	ands	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	2101      	movs	r1, #1
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	fa01 f303 	lsl.w	r3, r1, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	401a      	ands	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2103      	movs	r1, #3
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	609a      	str	r2, [r3, #8]
    }

    position++;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa22 f303 	lsr.w	r3, r2, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f47f af34 	bne.w	8004424 <HAL_GPIO_DeInit+0x18>
  }
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40020000 	.word	0x40020000
 80045d0:	40020400 	.word	0x40020400
 80045d4:	40020800 	.word	0x40020800
 80045d8:	40020c00 	.word	0x40020c00
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40021400 	.word	0x40021400
 80045e4:	40021800 	.word	0x40021800
 80045e8:	40010400 	.word	0x40010400

080045ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	e001      	b.n	800460e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	807b      	strh	r3, [r7, #2]
 8004626:	4613      	mov	r3, r2
 8004628:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800462a:	787b      	ldrb	r3, [r7, #1]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004630:	887a      	ldrh	r2, [r7, #2]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004636:	e003      	b.n	8004640 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004638:	887b      	ldrh	r3, [r7, #2]
 800463a:	041a      	lsls	r2, r3, #16
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	619a      	str	r2, [r3, #24]
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800465c:	887a      	ldrh	r2, [r7, #2]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4013      	ands	r3, r2
 8004662:	041a      	lsls	r2, r3, #16
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	43d9      	mvns	r1, r3
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	400b      	ands	r3, r1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	619a      	str	r2, [r3, #24]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e12b      	b.n	80048e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe fea4 	bl	80033f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2224      	movs	r2, #36	@ 0x24
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046e0:	f001 fd34 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 80046e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4a81      	ldr	r2, [pc, #516]	@ (80048f0 <HAL_I2C_Init+0x274>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d807      	bhi.n	8004700 <HAL_I2C_Init+0x84>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a80      	ldr	r2, [pc, #512]	@ (80048f4 <HAL_I2C_Init+0x278>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	bf94      	ite	ls
 80046f8:	2301      	movls	r3, #1
 80046fa:	2300      	movhi	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e006      	b.n	800470e <HAL_I2C_Init+0x92>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a7d      	ldr	r2, [pc, #500]	@ (80048f8 <HAL_I2C_Init+0x27c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	bf94      	ite	ls
 8004708:	2301      	movls	r3, #1
 800470a:	2300      	movhi	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e0e7      	b.n	80048e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a78      	ldr	r2, [pc, #480]	@ (80048fc <HAL_I2C_Init+0x280>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0c9b      	lsrs	r3, r3, #18
 8004720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a6a      	ldr	r2, [pc, #424]	@ (80048f0 <HAL_I2C_Init+0x274>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d802      	bhi.n	8004750 <HAL_I2C_Init+0xd4>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3301      	adds	r3, #1
 800474e:	e009      	b.n	8004764 <HAL_I2C_Init+0xe8>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	4a69      	ldr	r2, [pc, #420]	@ (8004900 <HAL_I2C_Init+0x284>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	3301      	adds	r3, #1
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	430b      	orrs	r3, r1
 800476a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004776:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	495c      	ldr	r1, [pc, #368]	@ (80048f0 <HAL_I2C_Init+0x274>)
 8004780:	428b      	cmp	r3, r1
 8004782:	d819      	bhi.n	80047b8 <HAL_I2C_Init+0x13c>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e59      	subs	r1, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004798:	400b      	ands	r3, r1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_I2C_Init+0x138>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1e59      	subs	r1, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ac:	3301      	adds	r3, #1
 80047ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b2:	e051      	b.n	8004858 <HAL_I2C_Init+0x1dc>
 80047b4:	2304      	movs	r3, #4
 80047b6:	e04f      	b.n	8004858 <HAL_I2C_Init+0x1dc>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d111      	bne.n	80047e4 <HAL_I2C_Init+0x168>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1e58      	subs	r0, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	440b      	add	r3, r1
 80047ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e012      	b.n	800480a <HAL_I2C_Init+0x18e>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e58      	subs	r0, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	0099      	lsls	r1, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_I2C_Init+0x196>
 800480e:	2301      	movs	r3, #1
 8004810:	e022      	b.n	8004858 <HAL_I2C_Init+0x1dc>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10e      	bne.n	8004838 <HAL_I2C_Init+0x1bc>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1e58      	subs	r0, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	440b      	add	r3, r1
 8004828:	fbb0 f3f3 	udiv	r3, r0, r3
 800482c:	3301      	adds	r3, #1
 800482e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004836:	e00f      	b.n	8004858 <HAL_I2C_Init+0x1dc>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1e58      	subs	r0, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	0099      	lsls	r1, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	fbb0 f3f3 	udiv	r3, r0, r3
 800484e:	3301      	adds	r3, #1
 8004850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	6809      	ldr	r1, [r1, #0]
 800485c:	4313      	orrs	r3, r2
 800485e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6911      	ldr	r1, [r2, #16]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68d2      	ldr	r2, [r2, #12]
 8004892:	4311      	orrs	r1, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	430b      	orrs	r3, r1
 800489a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	000186a0 	.word	0x000186a0
 80048f4:	001e847f 	.word	0x001e847f
 80048f8:	003d08ff 	.word	0x003d08ff
 80048fc:	431bde83 	.word	0x431bde83
 8004900:	10624dd3 	.word	0x10624dd3

08004904 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	461a      	mov	r2, r3
 8004910:	460b      	mov	r3, r1
 8004912:	817b      	strh	r3, [r7, #10]
 8004914:	4613      	mov	r3, r2
 8004916:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004918:	f7ff fa5e 	bl	8003dd8 <HAL_GetTick>
 800491c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	f040 80e0 	bne.w	8004aec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2319      	movs	r3, #25
 8004932:	2201      	movs	r2, #1
 8004934:	4970      	ldr	r1, [pc, #448]	@ (8004af8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fc64 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
 8004944:	e0d3      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_I2C_Master_Transmit+0x50>
 8004950:	2302      	movs	r3, #2
 8004952:	e0cc      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d007      	beq.n	800497a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004988:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2221      	movs	r2, #33	@ 0x21
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2210      	movs	r2, #16
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	893a      	ldrh	r2, [r7, #8]
 80049aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a50      	ldr	r2, [pc, #320]	@ (8004afc <HAL_I2C_Master_Transmit+0x1f8>)
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049bc:	8979      	ldrh	r1, [r7, #10]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 face 	bl	8004f64 <I2C_MasterRequestWrite>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e08d      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049e8:	e066      	b.n	8004ab8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	6a39      	ldr	r1, [r7, #32]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fd22 	bl	8005438 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d107      	bne.n	8004a12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e06b      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d11b      	bne.n	8004a8c <HAL_I2C_Master_Transmit+0x188>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d017      	beq.n	8004a8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	781a      	ldrb	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	6a39      	ldr	r1, [r7, #32]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fd19 	bl	80054c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d107      	bne.n	8004ab4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e01a      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d194      	bne.n	80049ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	00100002 	.word	0x00100002
 8004afc:	ffff0000 	.word	0xffff0000

08004b00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08c      	sub	sp, #48	@ 0x30
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	817b      	strh	r3, [r7, #10]
 8004b10:	4613      	mov	r3, r2
 8004b12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b14:	f7ff f960 	bl	8003dd8 <HAL_GetTick>
 8004b18:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	f040 8217 	bne.w	8004f56 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2319      	movs	r3, #25
 8004b2e:	2201      	movs	r2, #1
 8004b30:	497c      	ldr	r1, [pc, #496]	@ (8004d24 <HAL_I2C_Master_Receive+0x224>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fb66 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e20a      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_I2C_Master_Receive+0x50>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e203      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d007      	beq.n	8004b76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2222      	movs	r2, #34	@ 0x22
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2210      	movs	r2, #16
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	893a      	ldrh	r2, [r7, #8]
 8004ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a5c      	ldr	r2, [pc, #368]	@ (8004d28 <HAL_I2C_Master_Receive+0x228>)
 8004bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bb8:	8979      	ldrh	r1, [r7, #10]
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fa52 	bl	8005068 <I2C_MasterRequestRead>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e1c4      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d113      	bne.n	8004bfe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e198      	b.n	8004f30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d11b      	bne.n	8004c3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e178      	b.n	8004f30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d11b      	bne.n	8004c7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	e158      	b.n	8004f30 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ca4:	e144      	b.n	8004f30 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	f200 80f1 	bhi.w	8004e92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d123      	bne.n	8004d00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fc4b 	bl	8005558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e145      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cfe:	e117      	b.n	8004f30 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d14e      	bne.n	8004da6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4906      	ldr	r1, [pc, #24]	@ (8004d2c <HAL_I2C_Master_Receive+0x22c>)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fa76 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e11a      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
 8004d22:	bf00      	nop
 8004d24:	00100002 	.word	0x00100002
 8004d28:	ffff0000 	.word	0xffff0000
 8004d2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004da4:	e0c4      	b.n	8004f30 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	2200      	movs	r2, #0
 8004dae:	496c      	ldr	r1, [pc, #432]	@ (8004f60 <HAL_I2C_Master_Receive+0x460>)
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fa27 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0cb      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4955      	ldr	r1, [pc, #340]	@ (8004f60 <HAL_I2C_Master_Receive+0x460>)
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f9f9 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e09d      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e90:	e04e      	b.n	8004f30 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fb5e 	bl	8005558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e058      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d124      	bne.n	8004f30 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d107      	bne.n	8004efe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004efc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f47f aeb6 	bne.w	8004ca6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e000      	b.n	8004f58 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
  }
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3728      	adds	r7, #40	@ 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	00010004 	.word	0x00010004

08004f64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	460b      	mov	r3, r1
 8004f72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d006      	beq.n	8004f8e <I2C_MasterRequestWrite+0x2a>
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d003      	beq.n	8004f8e <I2C_MasterRequestWrite+0x2a>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f8c:	d108      	bne.n	8004fa0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e00b      	b.n	8004fb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	2b12      	cmp	r3, #18
 8004fa6:	d107      	bne.n	8004fb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f91d 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00d      	beq.n	8004fec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fde:	d103      	bne.n	8004fe8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fe6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e035      	b.n	8005058 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ff4:	d108      	bne.n	8005008 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005004:	611a      	str	r2, [r3, #16]
 8005006:	e01b      	b.n	8005040 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005008:	897b      	ldrh	r3, [r7, #10]
 800500a:	11db      	asrs	r3, r3, #7
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f003 0306 	and.w	r3, r3, #6
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f063 030f 	orn	r3, r3, #15
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	490e      	ldr	r1, [pc, #56]	@ (8005060 <I2C_MasterRequestWrite+0xfc>)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f966 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e010      	b.n	8005058 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005036:	897b      	ldrh	r3, [r7, #10]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4907      	ldr	r1, [pc, #28]	@ (8005064 <I2C_MasterRequestWrite+0x100>)
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f956 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	00010008 	.word	0x00010008
 8005064:	00010002 	.word	0x00010002

08005068 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	460b      	mov	r3, r1
 8005076:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800508c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d006      	beq.n	80050a2 <I2C_MasterRequestRead+0x3a>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d003      	beq.n	80050a2 <I2C_MasterRequestRead+0x3a>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050a0:	d108      	bne.n	80050b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e00b      	b.n	80050cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	2b11      	cmp	r3, #17
 80050ba:	d107      	bne.n	80050cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f893 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050f2:	d103      	bne.n	80050fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e079      	b.n	80051f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005108:	d108      	bne.n	800511c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	b2da      	uxtb	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	611a      	str	r2, [r3, #16]
 800511a:	e05f      	b.n	80051dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800511c:	897b      	ldrh	r3, [r7, #10]
 800511e:	11db      	asrs	r3, r3, #7
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0306 	and.w	r3, r3, #6
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f063 030f 	orn	r3, r3, #15
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4930      	ldr	r1, [pc, #192]	@ (80051fc <I2C_MasterRequestRead+0x194>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f8dc 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e054      	b.n	80051f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800514a:	897b      	ldrh	r3, [r7, #10]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4929      	ldr	r1, [pc, #164]	@ (8005200 <I2C_MasterRequestRead+0x198>)
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f8cc 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e044      	b.n	80051f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800518e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f831 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b6:	d103      	bne.n	80051c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e017      	b.n	80051f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051c4:	897b      	ldrh	r3, [r7, #10]
 80051c6:	11db      	asrs	r3, r3, #7
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0306 	and.w	r3, r3, #6
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f063 030e 	orn	r3, r3, #14
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4907      	ldr	r1, [pc, #28]	@ (8005200 <I2C_MasterRequestRead+0x198>)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f888 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	00010008 	.word	0x00010008
 8005200:	00010002 	.word	0x00010002

08005204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005214:	e048      	b.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d044      	beq.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521e:	f7fe fddb 	bl	8003dd8 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d139      	bne.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10d      	bne.n	800525a <I2C_WaitOnFlagUntilTimeout+0x56>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	43da      	mvns	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	e00c      	b.n	8005274 <I2C_WaitOnFlagUntilTimeout+0x70>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	43da      	mvns	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	429a      	cmp	r2, r3
 8005278:	d116      	bne.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e023      	b.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10d      	bne.n	80052ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	e00c      	b.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	43da      	mvns	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d093      	beq.n	8005216 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005306:	e071      	b.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005316:	d123      	bne.n	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005326:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	f043 0204 	orr.w	r2, r3, #4
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e067      	b.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d041      	beq.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005368:	f7fe fd36 	bl	8003dd8 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d302      	bcc.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d136      	bne.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10c      	bne.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	43da      	mvns	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf14      	ite	ne
 800539a:	2301      	movne	r3, #1
 800539c:	2300      	moveq	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e00b      	b.n	80053ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d016      	beq.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e021      	b.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d10c      	bne.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	43da      	mvns	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4013      	ands	r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e00b      	b.n	8005428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	43da      	mvns	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	f47f af6d 	bne.w	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005444:	e034      	b.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f8e3 	bl	8005612 <I2C_IsAcknowledgeFailed>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e034      	b.n	80054c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d028      	beq.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545e:	f7fe fcbb 	bl	8003dd8 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	429a      	cmp	r2, r3
 800546c:	d302      	bcc.n	8005474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d11d      	bne.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547e:	2b80      	cmp	r3, #128	@ 0x80
 8005480:	d016      	beq.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e007      	b.n	80054c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ba:	2b80      	cmp	r3, #128	@ 0x80
 80054bc:	d1c3      	bne.n	8005446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054d4:	e034      	b.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f89b 	bl	8005612 <I2C_IsAcknowledgeFailed>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e034      	b.n	8005550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d028      	beq.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ee:	f7fe fc73 	bl	8003dd8 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11d      	bne.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b04      	cmp	r3, #4
 8005510:	d016      	beq.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e007      	b.n	8005550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b04      	cmp	r3, #4
 800554c:	d1c3      	bne.n	80054d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005564:	e049      	b.n	80055fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b10      	cmp	r3, #16
 8005572:	d119      	bne.n	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0210 	mvn.w	r2, #16
 800557c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e030      	b.n	800560a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a8:	f7fe fc16 	bl	8003dd8 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d302      	bcc.n	80055be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d11d      	bne.n	80055fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b40      	cmp	r3, #64	@ 0x40
 80055ca:	d016      	beq.n	80055fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e007      	b.n	800560a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d1ae      	bne.n	8005566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005628:	d11b      	bne.n	8005662 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005632:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	f043 0204 	orr.w	r2, r3, #4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr
	...

08005670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e31d      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005682:	4b94      	ldr	r3, [pc, #592]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800568c:	4b91      	ldr	r3, [pc, #580]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005694:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d07b      	beq.n	800579a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d006      	beq.n	80056b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	d10f      	bne.n	80056ce <HAL_RCC_OscConfig+0x5e>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b4:	d10b      	bne.n	80056ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b6:	4b87      	ldr	r3, [pc, #540]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d06a      	beq.n	8005798 <HAL_RCC_OscConfig+0x128>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d166      	bne.n	8005798 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e2f7      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d106      	bne.n	80056e4 <HAL_RCC_OscConfig+0x74>
 80056d6:	4b7f      	ldr	r3, [pc, #508]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7e      	ldr	r2, [pc, #504]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e02d      	b.n	8005740 <HAL_RCC_OscConfig+0xd0>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10c      	bne.n	8005706 <HAL_RCC_OscConfig+0x96>
 80056ec:	4b79      	ldr	r3, [pc, #484]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a78      	ldr	r2, [pc, #480]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80056f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	4b76      	ldr	r3, [pc, #472]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a75      	ldr	r2, [pc, #468]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80056fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	e01c      	b.n	8005740 <HAL_RCC_OscConfig+0xd0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b05      	cmp	r3, #5
 800570c:	d10c      	bne.n	8005728 <HAL_RCC_OscConfig+0xb8>
 800570e:	4b71      	ldr	r3, [pc, #452]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a70      	ldr	r2, [pc, #448]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	4b6e      	ldr	r3, [pc, #440]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a6d      	ldr	r2, [pc, #436]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e00b      	b.n	8005740 <HAL_RCC_OscConfig+0xd0>
 8005728:	4b6a      	ldr	r3, [pc, #424]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a69      	ldr	r2, [pc, #420]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800572e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	4b67      	ldr	r3, [pc, #412]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a66      	ldr	r2, [pc, #408]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800573a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800573e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005748:	f7fe fb46 	bl	8003dd8 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005750:	f7fe fb42 	bl	8003dd8 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b64      	cmp	r3, #100	@ 0x64
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e2ad      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005762:	4b5c      	ldr	r3, [pc, #368]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0f0      	beq.n	8005750 <HAL_RCC_OscConfig+0xe0>
 800576e:	e014      	b.n	800579a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005770:	f7fe fb32 	bl	8003dd8 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005778:	f7fe fb2e 	bl	8003dd8 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b64      	cmp	r3, #100	@ 0x64
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e299      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800578a:	4b52      	ldr	r3, [pc, #328]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0x108>
 8005796:	e000      	b.n	800579a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d05a      	beq.n	800585c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b0c      	cmp	r3, #12
 80057b0:	d119      	bne.n	80057e6 <HAL_RCC_OscConfig+0x176>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d116      	bne.n	80057e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057b8:	4b46      	ldr	r3, [pc, #280]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_OscConfig+0x160>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e276      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d0:	4b40      	ldr	r3, [pc, #256]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	493d      	ldr	r1, [pc, #244]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057e4:	e03a      	b.n	800585c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d020      	beq.n	8005830 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ee:	4b3a      	ldr	r3, [pc, #232]	@ (80058d8 <HAL_RCC_OscConfig+0x268>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fe faf0 	bl	8003dd8 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057fc:	f7fe faec 	bl	8003dd8 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e257      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800580e:	4b31      	ldr	r3, [pc, #196]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581a:	4b2e      	ldr	r3, [pc, #184]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	492a      	ldr	r1, [pc, #168]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800582a:	4313      	orrs	r3, r2
 800582c:	604b      	str	r3, [r1, #4]
 800582e:	e015      	b.n	800585c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005830:	4b29      	ldr	r3, [pc, #164]	@ (80058d8 <HAL_RCC_OscConfig+0x268>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005836:	f7fe facf 	bl	8003dd8 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800583e:	f7fe facb 	bl	8003dd8 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e236      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005850:	4b20      	ldr	r3, [pc, #128]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f0      	bne.n	800583e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80b8 	beq.w	80059da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d170      	bne.n	8005952 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005870:	4b18      	ldr	r3, [pc, #96]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_OscConfig+0x218>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e21a      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1a      	ldr	r2, [r3, #32]
 800588c:	4b11      	ldr	r3, [pc, #68]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005894:	429a      	cmp	r2, r3
 8005896:	d921      	bls.n	80058dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fc7d 	bl	800619c <RCC_SetFlashLatencyFromMSIRange>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e208      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058ac:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	4906      	ldr	r1, [pc, #24]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058be:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	4901      	ldr	r1, [pc, #4]	@ (80058d4 <HAL_RCC_OscConfig+0x264>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	604b      	str	r3, [r1, #4]
 80058d2:	e020      	b.n	8005916 <HAL_RCC_OscConfig+0x2a6>
 80058d4:	40023800 	.word	0x40023800
 80058d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058dc:	4b99      	ldr	r3, [pc, #612]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4996      	ldr	r1, [pc, #600]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058ee:	4b95      	ldr	r3, [pc, #596]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	061b      	lsls	r3, r3, #24
 80058fc:	4991      	ldr	r1, [pc, #580]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fc48 	bl	800619c <RCC_SetFlashLatencyFromMSIRange>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e1d3      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	0b5b      	lsrs	r3, r3, #13
 800591c:	3301      	adds	r3, #1
 800591e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005926:	4a87      	ldr	r2, [pc, #540]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005928:	6892      	ldr	r2, [r2, #8]
 800592a:	0912      	lsrs	r2, r2, #4
 800592c:	f002 020f 	and.w	r2, r2, #15
 8005930:	4985      	ldr	r1, [pc, #532]	@ (8005b48 <HAL_RCC_OscConfig+0x4d8>)
 8005932:	5c8a      	ldrb	r2, [r1, r2]
 8005934:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005936:	4a85      	ldr	r2, [pc, #532]	@ (8005b4c <HAL_RCC_OscConfig+0x4dc>)
 8005938:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800593a:	4b85      	ldr	r3, [pc, #532]	@ (8005b50 <HAL_RCC_OscConfig+0x4e0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe f9fe 	bl	8003d40 <HAL_InitTick>
 8005944:	4603      	mov	r3, r0
 8005946:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d045      	beq.n	80059da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	e1b5      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d029      	beq.n	80059ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800595a:	4b7e      	ldr	r3, [pc, #504]	@ (8005b54 <HAL_RCC_OscConfig+0x4e4>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005960:	f7fe fa3a 	bl	8003dd8 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005968:	f7fe fa36 	bl	8003dd8 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e1a1      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800597a:	4b72      	ldr	r3, [pc, #456]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005986:	4b6f      	ldr	r3, [pc, #444]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	496c      	ldr	r1, [pc, #432]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005998:	4b6a      	ldr	r3, [pc, #424]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	061b      	lsls	r3, r3, #24
 80059a6:	4967      	ldr	r1, [pc, #412]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]
 80059ac:	e015      	b.n	80059da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059ae:	4b69      	ldr	r3, [pc, #420]	@ (8005b54 <HAL_RCC_OscConfig+0x4e4>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7fe fa10 	bl	8003dd8 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059bc:	f7fe fa0c 	bl	8003dd8 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e177      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80059ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d030      	beq.n	8005a48 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d016      	beq.n	8005a1c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005b58 <HAL_RCC_OscConfig+0x4e8>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f4:	f7fe f9f0 	bl	8003dd8 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059fc:	f7fe f9ec 	bl	8003dd8 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e157      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a0e:	4b4d      	ldr	r3, [pc, #308]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x38c>
 8005a1a:	e015      	b.n	8005a48 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005b58 <HAL_RCC_OscConfig+0x4e8>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a22:	f7fe f9d9 	bl	8003dd8 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a2a:	f7fe f9d5 	bl	8003dd8 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e140      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a3c:	4b41      	ldr	r3, [pc, #260]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f0      	bne.n	8005a2a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80b5 	beq.w	8005bc0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a56:	2300      	movs	r3, #0
 8005a58:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a66:	4b37      	ldr	r3, [pc, #220]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6a:	4a36      	ldr	r2, [pc, #216]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a70:	6253      	str	r3, [r2, #36]	@ 0x24
 8005a72:	4b34      	ldr	r3, [pc, #208]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a82:	4b36      	ldr	r3, [pc, #216]	@ (8005b5c <HAL_RCC_OscConfig+0x4ec>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d118      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a8e:	4b33      	ldr	r3, [pc, #204]	@ (8005b5c <HAL_RCC_OscConfig+0x4ec>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a32      	ldr	r2, [pc, #200]	@ (8005b5c <HAL_RCC_OscConfig+0x4ec>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a9a:	f7fe f99d 	bl	8003dd8 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa2:	f7fe f999 	bl	8003dd8 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b64      	cmp	r3, #100	@ 0x64
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e104      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	4b29      	ldr	r3, [pc, #164]	@ (8005b5c <HAL_RCC_OscConfig+0x4ec>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x466>
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005acc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad2:	6353      	str	r3, [r2, #52]	@ 0x34
 8005ad4:	e02d      	b.n	8005b32 <HAL_RCC_OscConfig+0x4c2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x488>
 8005ade:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae2:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae8:	6353      	str	r3, [r2, #52]	@ 0x34
 8005aea:	4b16      	ldr	r3, [pc, #88]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aee:	4a15      	ldr	r2, [pc, #84]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005af0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005af4:	6353      	str	r3, [r2, #52]	@ 0x34
 8005af6:	e01c      	b.n	8005b32 <HAL_RCC_OscConfig+0x4c2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d10c      	bne.n	8005b1a <HAL_RCC_OscConfig+0x4aa>
 8005b00:	4b10      	ldr	r3, [pc, #64]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b04:	4a0f      	ldr	r2, [pc, #60]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b0a:	6353      	str	r3, [r2, #52]	@ 0x34
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b10:	4a0c      	ldr	r2, [pc, #48]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b16:	6353      	str	r3, [r2, #52]	@ 0x34
 8005b18:	e00b      	b.n	8005b32 <HAL_RCC_OscConfig+0x4c2>
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1e:	4a09      	ldr	r2, [pc, #36]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b24:	6353      	str	r3, [r2, #52]	@ 0x34
 8005b26:	4b07      	ldr	r3, [pc, #28]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2a:	4a06      	ldr	r2, [pc, #24]	@ (8005b44 <HAL_RCC_OscConfig+0x4d4>)
 8005b2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b30:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d024      	beq.n	8005b84 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3a:	f7fe f94d 	bl	8003dd8 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b40:	e019      	b.n	8005b76 <HAL_RCC_OscConfig+0x506>
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800
 8005b48:	080093fc 	.word	0x080093fc
 8005b4c:	20000008 	.word	0x20000008
 8005b50:	20000020 	.word	0x20000020
 8005b54:	42470020 	.word	0x42470020
 8005b58:	42470680 	.word	0x42470680
 8005b5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b60:	f7fe f93a 	bl	8003dd8 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e0a3      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b76:	4b54      	ldr	r3, [pc, #336]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0ee      	beq.n	8005b60 <HAL_RCC_OscConfig+0x4f0>
 8005b82:	e014      	b.n	8005bae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b84:	f7fe f928 	bl	8003dd8 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8c:	f7fe f924 	bl	8003dd8 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e08d      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ba2:	4b49      	ldr	r3, [pc, #292]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ee      	bne.n	8005b8c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb4:	4b44      	ldr	r3, [pc, #272]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	4a43      	ldr	r2, [pc, #268]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bbe:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d079      	beq.n	8005cbc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d056      	beq.n	8005c7c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d13b      	bne.n	8005c4e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ccc <HAL_RCC_OscConfig+0x65c>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fe f8fc 	bl	8003dd8 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be4:	f7fe f8f8 	bl	8003dd8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e063      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bf6:	4b34      	ldr	r3, [pc, #208]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c02:	4b31      	ldr	r3, [pc, #196]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c12:	4319      	orrs	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	492b      	ldr	r1, [pc, #172]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c20:	4b2a      	ldr	r3, [pc, #168]	@ (8005ccc <HAL_RCC_OscConfig+0x65c>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c26:	f7fe f8d7 	bl	8003dd8 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c2e:	f7fe f8d3 	bl	8003dd8 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e03e      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c40:	4b21      	ldr	r3, [pc, #132]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x5be>
 8005c4c:	e036      	b.n	8005cbc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ccc <HAL_RCC_OscConfig+0x65c>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c54:	f7fe f8c0 	bl	8003dd8 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c5c:	f7fe f8bc 	bl	8003dd8 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e027      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c6e:	4b16      	ldr	r3, [pc, #88]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0x5ec>
 8005c7a:	e01f      	b.n	8005cbc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e01a      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c88:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc8 <HAL_RCC_OscConfig+0x658>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	42470060 	.word	0x42470060

08005cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e11a      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d919      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d105      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x34>
 8005cf8:	4b8a      	ldr	r3, [pc, #552]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a89      	ldr	r2, [pc, #548]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005cfe:	f043 0304 	orr.w	r3, r3, #4
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	4b87      	ldr	r3, [pc, #540]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f023 0201 	bic.w	r2, r3, #1
 8005d0c:	4985      	ldr	r1, [pc, #532]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d14:	4b83      	ldr	r3, [pc, #524]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d001      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e0f9      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d32:	4b7d      	ldr	r3, [pc, #500]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	497a      	ldr	r1, [pc, #488]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 808e 	beq.w	8005e6e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d107      	bne.n	8005d6a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d5a:	4b73      	ldr	r3, [pc, #460]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d121      	bne.n	8005daa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0d7      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d107      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d72:	4b6d      	ldr	r3, [pc, #436]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d115      	bne.n	8005daa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e0cb      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d107      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d8a:	4b67      	ldr	r3, [pc, #412]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e0bf      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d9a:	4b63      	ldr	r3, [pc, #396]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e0b7      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005daa:	4b5f      	ldr	r3, [pc, #380]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f023 0203 	bic.w	r2, r3, #3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	495c      	ldr	r1, [pc, #368]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dbc:	f7fe f80c 	bl	8003dd8 <HAL_GetTick>
 8005dc0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d112      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dca:	e00a      	b.n	8005de2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dcc:	f7fe f804 	bl	8003dd8 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e09b      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005de2:	4b51      	ldr	r3, [pc, #324]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d1ee      	bne.n	8005dcc <HAL_RCC_ClockConfig+0xfc>
 8005dee:	e03e      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d112      	bne.n	8005e1e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005df8:	e00a      	b.n	8005e10 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dfa:	f7fd ffed 	bl	8003dd8 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e084      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e10:	4b45      	ldr	r3, [pc, #276]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 030c 	and.w	r3, r3, #12
 8005e18:	2b0c      	cmp	r3, #12
 8005e1a:	d1ee      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x12a>
 8005e1c:	e027      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d11d      	bne.n	8005e62 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e28:	f7fd ffd6 	bl	8003dd8 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e06d      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 030c 	and.w	r3, r3, #12
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d1ee      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x158>
 8005e4a:	e010      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e4c:	f7fd ffc4 	bl	8003dd8 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e05b      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e62:	4b31      	ldr	r3, [pc, #196]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1ee      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d219      	bcs.n	8005eb0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d105      	bne.n	8005e8e <HAL_RCC_ClockConfig+0x1be>
 8005e82:	4b28      	ldr	r3, [pc, #160]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a27      	ldr	r2, [pc, #156]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005e88:	f043 0304 	orr.w	r3, r3, #4
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b25      	ldr	r3, [pc, #148]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 0201 	bic.w	r2, r3, #1
 8005e96:	4923      	ldr	r1, [pc, #140]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9e:	4b21      	ldr	r3, [pc, #132]	@ (8005f24 <HAL_RCC_ClockConfig+0x254>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d001      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e034      	b.n	8005f1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4917      	ldr	r1, [pc, #92]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eda:	4b13      	ldr	r3, [pc, #76]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	490f      	ldr	r1, [pc, #60]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eee:	f000 f823 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <HAL_RCC_ClockConfig+0x258>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	490b      	ldr	r1, [pc, #44]	@ (8005f2c <HAL_RCC_ClockConfig+0x25c>)
 8005f00:	5ccb      	ldrb	r3, [r1, r3]
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	4a0a      	ldr	r2, [pc, #40]	@ (8005f30 <HAL_RCC_ClockConfig+0x260>)
 8005f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f34 <HAL_RCC_ClockConfig+0x264>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd ff16 	bl	8003d40 <HAL_InitTick>
 8005f14:	4603      	mov	r3, r0
 8005f16:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f18:	7afb      	ldrb	r3, [r7, #11]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40023c00 	.word	0x40023c00
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	080093fc 	.word	0x080093fc
 8005f30:	20000008 	.word	0x20000008
 8005f34:	20000020 	.word	0x20000020

08005f38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f3c:	b092      	sub	sp, #72	@ 0x48
 8005f3e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005f40:	4b79      	ldr	r3, [pc, #484]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f48:	f003 030c 	and.w	r3, r3, #12
 8005f4c:	2b0c      	cmp	r3, #12
 8005f4e:	d00d      	beq.n	8005f6c <HAL_RCC_GetSysClockFreq+0x34>
 8005f50:	2b0c      	cmp	r3, #12
 8005f52:	f200 80d5 	bhi.w	8006100 <HAL_RCC_GetSysClockFreq+0x1c8>
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d002      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x28>
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d003      	beq.n	8005f66 <HAL_RCC_GetSysClockFreq+0x2e>
 8005f5e:	e0cf      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f60:	4b72      	ldr	r3, [pc, #456]	@ (800612c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005f62:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8005f64:	e0da      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f66:	4b72      	ldr	r3, [pc, #456]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005f68:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8005f6a:	e0d7      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6e:	0c9b      	lsrs	r3, r3, #18
 8005f70:	f003 020f 	and.w	r2, r3, #15
 8005f74:	4b6f      	ldr	r3, [pc, #444]	@ (8006134 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f76:	5c9b      	ldrb	r3, [r3, r2]
 8005f78:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7c:	0d9b      	lsrs	r3, r3, #22
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	3301      	adds	r3, #1
 8005f84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f86:	4b68      	ldr	r3, [pc, #416]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d05d      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	2200      	movs	r2, #0
 8005f96:	4618      	mov	r0, r3
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	460d      	mov	r5, r1
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f04f 0100 	mov.w	r1, #0
 8005faa:	0159      	lsls	r1, r3, #5
 8005fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fb0:	0150      	lsls	r0, r2, #5
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	1a51      	subs	r1, r2, r1
 8005fba:	6139      	str	r1, [r7, #16]
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fd0:	4659      	mov	r1, fp
 8005fd2:	018b      	lsls	r3, r1, #6
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fda:	4651      	mov	r1, sl
 8005fdc:	018a      	lsls	r2, r1, #6
 8005fde:	46d4      	mov	ip, sl
 8005fe0:	ebb2 080c 	subs.w	r8, r2, ip
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	eb63 0901 	sbc.w	r9, r3, r1
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffe:	4690      	mov	r8, r2
 8006000:	4699      	mov	r9, r3
 8006002:	4623      	mov	r3, r4
 8006004:	eb18 0303 	adds.w	r3, r8, r3
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	462b      	mov	r3, r5
 800600c:	eb49 0303 	adc.w	r3, r9, r3
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800601e:	4629      	mov	r1, r5
 8006020:	024b      	lsls	r3, r1, #9
 8006022:	4620      	mov	r0, r4
 8006024:	4629      	mov	r1, r5
 8006026:	4604      	mov	r4, r0
 8006028:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800602c:	4601      	mov	r1, r0
 800602e:	024a      	lsls	r2, r1, #9
 8006030:	4610      	mov	r0, r2
 8006032:	4619      	mov	r1, r3
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	2200      	movs	r2, #0
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800603a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800603c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006040:	f7fa fd54 	bl	8000aec <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4613      	mov	r3, r2
 800604a:	647b      	str	r3, [r7, #68]	@ 0x44
 800604c:	e055      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800604e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006050:	2200      	movs	r2, #0
 8006052:	623b      	str	r3, [r7, #32]
 8006054:	627a      	str	r2, [r7, #36]	@ 0x24
 8006056:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800605a:	4642      	mov	r2, r8
 800605c:	464b      	mov	r3, r9
 800605e:	f04f 0000 	mov.w	r0, #0
 8006062:	f04f 0100 	mov.w	r1, #0
 8006066:	0159      	lsls	r1, r3, #5
 8006068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800606c:	0150      	lsls	r0, r2, #5
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	46c4      	mov	ip, r8
 8006074:	ebb2 0a0c 	subs.w	sl, r2, ip
 8006078:	4640      	mov	r0, r8
 800607a:	4649      	mov	r1, r9
 800607c:	468c      	mov	ip, r1
 800607e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800608e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006092:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006096:	ebb2 040a 	subs.w	r4, r2, sl
 800609a:	eb63 050b 	sbc.w	r5, r3, fp
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	00eb      	lsls	r3, r5, #3
 80060a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ac:	00e2      	lsls	r2, r4, #3
 80060ae:	4614      	mov	r4, r2
 80060b0:	461d      	mov	r5, r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	18e3      	adds	r3, r4, r3
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	460b      	mov	r3, r1
 80060ba:	eb45 0303 	adc.w	r3, r5, r3
 80060be:	607b      	str	r3, [r7, #4]
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060cc:	4629      	mov	r1, r5
 80060ce:	028b      	lsls	r3, r1, #10
 80060d0:	4620      	mov	r0, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	4604      	mov	r4, r0
 80060d6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80060da:	4601      	mov	r1, r0
 80060dc:	028a      	lsls	r2, r1, #10
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e4:	2200      	movs	r2, #0
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	61fa      	str	r2, [r7, #28]
 80060ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ee:	f7fa fcfd 	bl	8000aec <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4613      	mov	r3, r2
 80060f8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80060fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060fc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80060fe:	e00d      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006100:	4b09      	ldr	r3, [pc, #36]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	0b5b      	lsrs	r3, r3, #13
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	3301      	adds	r3, #1
 8006110:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800611a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800611c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800611e:	4618      	mov	r0, r3
 8006120:	3748      	adds	r7, #72	@ 0x48
 8006122:	46bd      	mov	sp, r7
 8006124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006128:	40023800 	.word	0x40023800
 800612c:	00f42400 	.word	0x00f42400
 8006130:	007a1200 	.word	0x007a1200
 8006134:	080093f0 	.word	0x080093f0

08006138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800613c:	4b02      	ldr	r3, [pc, #8]	@ (8006148 <HAL_RCC_GetHCLKFreq+0x10>)
 800613e:	681b      	ldr	r3, [r3, #0]
}
 8006140:	4618      	mov	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr
 8006148:	20000008 	.word	0x20000008

0800614c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006150:	f7ff fff2 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b05      	ldr	r3, [pc, #20]	@ (800616c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4903      	ldr	r1, [pc, #12]	@ (8006170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40023800 	.word	0x40023800
 8006170:	0800940c 	.word	0x0800940c

08006174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006178:	f7ff ffde 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0adb      	lsrs	r3, r3, #11
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4903      	ldr	r1, [pc, #12]	@ (8006198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006190:	4618      	mov	r0, r3
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40023800 	.word	0x40023800
 8006198:	0800940c 	.word	0x0800940c

0800619c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80061a4:	2300      	movs	r3, #0
 80061a6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80061a8:	4b29      	ldr	r3, [pc, #164]	@ (8006250 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d12c      	bne.n	800620e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80061b4:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80061c0:	4b24      	ldr	r3, [pc, #144]	@ (8006254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	e016      	b.n	80061fa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061cc:	4b20      	ldr	r3, [pc, #128]	@ (8006250 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006250 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80061d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061d6:	6253      	str	r3, [r2, #36]	@ 0x24
 80061d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006250 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80061e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80061ec:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ee:	4b18      	ldr	r3, [pc, #96]	@ (8006250 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80061f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061f8:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006200:	d105      	bne.n	800620e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006208:	d101      	bne.n	800620e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800620a:	2301      	movs	r3, #1
 800620c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d105      	bne.n	8006220 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8006214:	4b10      	ldr	r3, [pc, #64]	@ (8006258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a0f      	ldr	r2, [pc, #60]	@ (8006258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800621a:	f043 0304 	orr.w	r3, r3, #4
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b0d      	ldr	r3, [pc, #52]	@ (8006258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f023 0201 	bic.w	r2, r3, #1
 8006228:	490b      	ldr	r1, [pc, #44]	@ (8006258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	429a      	cmp	r2, r3
 800623c:	d001      	beq.n	8006242 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40023800 	.word	0x40023800
 8006254:	40007000 	.word	0x40007000
 8006258:	40023c00 	.word	0x40023c00

0800625c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e07b      	b.n	8006366 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	d108      	bne.n	8006288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800627e:	d009      	beq.n	8006294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	61da      	str	r2, [r3, #28]
 8006286:	e005      	b.n	8006294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f85d 	bl	800636e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006318:	ea42 0103 	orr.w	r1, r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	f003 0104 	and.w	r1, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	f003 0210 	and.w	r2, r3, #16
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006354:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08c      	sub	sp, #48	@ 0x30
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800638e:	2301      	movs	r3, #1
 8006390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x26>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e198      	b.n	80066d8 <HAL_SPI_TransmitReceive+0x358>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ae:	f7fd fd13 	bl	8003dd8 <HAL_GetTick>
 80063b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80063c4:	887b      	ldrh	r3, [r7, #2]
 80063c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d00f      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x70>
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063d6:	d107      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0x68>
 80063e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d003      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80063ee:	e16d      	b.n	80066cc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_SPI_TransmitReceive+0x82>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_SPI_TransmitReceive+0x82>
 80063fc:	887b      	ldrh	r3, [r7, #2]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d103      	bne.n	800640a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006408:	e160      	b.n	80066cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b04      	cmp	r3, #4
 8006414:	d003      	beq.n	800641e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2205      	movs	r2, #5
 800641a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	887a      	ldrh	r2, [r7, #2]
 800642e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	887a      	ldrh	r2, [r7, #2]
 8006434:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	887a      	ldrh	r2, [r7, #2]
 8006440:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	887a      	ldrh	r2, [r7, #2]
 8006446:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b40      	cmp	r3, #64	@ 0x40
 8006460:	d007      	beq.n	8006472 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647a:	d17c      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_SPI_TransmitReceive+0x10a>
 8006484:	8b7b      	ldrh	r3, [r7, #26]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d16a      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649a:	1c9a      	adds	r2, r3, #2
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ae:	e057      	b.n	8006560 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d11b      	bne.n	80064f6 <HAL_SPI_TransmitReceive+0x176>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d016      	beq.n	80064f6 <HAL_SPI_TransmitReceive+0x176>
 80064c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d113      	bne.n	80064f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d2:	881a      	ldrh	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064de:	1c9a      	adds	r2, r3, #2
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b01      	cmp	r3, #1
 8006502:	d119      	bne.n	8006538 <HAL_SPI_TransmitReceive+0x1b8>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d014      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006518:	b292      	uxth	r2, r2
 800651a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006520:	1c9a      	adds	r2, r3, #2
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006534:	2301      	movs	r3, #1
 8006536:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006538:	f7fd fc4e 	bl	8003dd8 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006544:	429a      	cmp	r2, r3
 8006546:	d80b      	bhi.n	8006560 <HAL_SPI_TransmitReceive+0x1e0>
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d007      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800655e:	e0b5      	b.n	80066cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1a2      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x130>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d19d      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x130>
 8006574:	e080      	b.n	8006678 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x204>
 800657e:	8b7b      	ldrh	r3, [r7, #26]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d16f      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	330c      	adds	r3, #12
 800658e:	7812      	ldrb	r2, [r2, #0]
 8006590:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065aa:	e05b      	b.n	8006664 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d11c      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x274>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x274>
 80065c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d114      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d119      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x2b6>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d014      	beq.n	8006636 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006632:	2301      	movs	r3, #1
 8006634:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006636:	f7fd fbcf 	bl	8003dd8 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006642:	429a      	cmp	r2, r3
 8006644:	d803      	bhi.n	800664e <HAL_SPI_TransmitReceive+0x2ce>
 8006646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d102      	bne.n	8006654 <HAL_SPI_TransmitReceive+0x2d4>
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	2b00      	cmp	r3, #0
 8006652:	d107      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006662:	e033      	b.n	80066cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d19e      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x22c>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d199      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800667a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f8c5 	bl	800680c <SPI_EndRxTxTransaction>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006694:	e01a      	b.n	80066cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c2:	e003      	b.n	80066cc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80066d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3730      	adds	r7, #48	@ 0x30
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066ee:	b2db      	uxtb	r3, r3
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
	...

080066fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800670c:	f7fd fb64 	bl	8003dd8 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4413      	add	r3, r2
 800671a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800671c:	f7fd fb5c 	bl	8003dd8 <HAL_GetTick>
 8006720:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006722:	4b39      	ldr	r3, [pc, #228]	@ (8006808 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	015b      	lsls	r3, r3, #5
 8006728:	0d1b      	lsrs	r3, r3, #20
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006732:	e054      	b.n	80067de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673a:	d050      	beq.n	80067de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800673c:	f7fd fb4c 	bl	8003dd8 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	429a      	cmp	r2, r3
 800674a:	d902      	bls.n	8006752 <SPI_WaitFlagStateUntilTimeout+0x56>
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d13d      	bne.n	80067ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800676a:	d111      	bne.n	8006790 <SPI_WaitFlagStateUntilTimeout+0x94>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006774:	d004      	beq.n	8006780 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677e:	d107      	bne.n	8006790 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800678e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006798:	d10f      	bne.n	80067ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e017      	b.n	80067fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	3b01      	subs	r3, #1
 80067dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d19b      	bne.n	8006734 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000008 	.word	0x20000008

0800680c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006818:	4b1b      	ldr	r3, [pc, #108]	@ (8006888 <SPI_EndRxTxTransaction+0x7c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1b      	ldr	r2, [pc, #108]	@ (800688c <SPI_EndRxTxTransaction+0x80>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	0d5b      	lsrs	r3, r3, #21
 8006824:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006836:	d112      	bne.n	800685e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2200      	movs	r2, #0
 8006840:	2180      	movs	r1, #128	@ 0x80
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7ff ff5a 	bl	80066fc <SPI_WaitFlagStateUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d016      	beq.n	800687c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e00f      	b.n	800687e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	3b01      	subs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006874:	2b80      	cmp	r3, #128	@ 0x80
 8006876:	d0f2      	beq.n	800685e <SPI_EndRxTxTransaction+0x52>
 8006878:	e000      	b.n	800687c <SPI_EndRxTxTransaction+0x70>
        break;
 800687a:	bf00      	nop
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000008 	.word	0x20000008
 800688c:	165e9f81 	.word	0x165e9f81

08006890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e042      	b.n	8006928 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fc fdde 	bl	8003478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2224      	movs	r2, #36	@ 0x24
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f91d 	bl	8006b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695a      	ldr	r2, [r3, #20]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08a      	sub	sp, #40	@ 0x28
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b20      	cmp	r3, #32
 800694e:	d16d      	bne.n	8006a2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_UART_Transmit+0x2c>
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e066      	b.n	8006a2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2221      	movs	r2, #33	@ 0x21
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800696e:	f7fd fa33 	bl	8003dd8 <HAL_GetTick>
 8006972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	88fa      	ldrh	r2, [r7, #6]
 800697e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006988:	d108      	bne.n	800699c <HAL_UART_Transmit+0x6c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	e003      	b.n	80069a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069a4:	e02a      	b.n	80069fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2200      	movs	r2, #0
 80069ae:	2180      	movs	r1, #128	@ 0x80
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f840 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e036      	b.n	8006a2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10b      	bne.n	80069de <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	3302      	adds	r3, #2
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e007      	b.n	80069ee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	3301      	adds	r3, #1
 80069ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1cf      	bne.n	80069a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2140      	movs	r1, #64	@ 0x40
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f810 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e006      	b.n	8006a2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e000      	b.n	8006a2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006a2c:	2302      	movs	r3, #2
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b090      	sub	sp, #64	@ 0x40
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a46:	e050      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d04c      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a56:	f7fd f9bf 	bl	8003dd8 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d241      	bcs.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a86:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a88:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3314      	adds	r3, #20
 8006ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aba:	623a      	str	r2, [r7, #32]
 8006abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	69f9      	ldr	r1, [r7, #28]
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e5      	bne.n	8006a9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e00f      	b.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	bf0c      	ite	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	2300      	movne	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d09f      	beq.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3740      	adds	r7, #64	@ 0x40
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006b54:	f023 030c 	bic.w	r3, r3, #12
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a55      	ldr	r2, [pc, #340]	@ (8006cd4 <UART_SetConfig+0x1c0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d103      	bne.n	8006b8a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b82:	f7ff faf7 	bl	8006174 <HAL_RCC_GetPCLK2Freq>
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	e002      	b.n	8006b90 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b8a:	f7ff fadf 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8006b8e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b98:	d14c      	bne.n	8006c34 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009a      	lsls	r2, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb0:	4a49      	ldr	r2, [pc, #292]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	0119      	lsls	r1, r3, #4
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009a      	lsls	r2, r3, #2
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bd0:	4b41      	ldr	r3, [pc, #260]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	2064      	movs	r0, #100	@ 0x64
 8006bda:	fb00 f303 	mul.w	r3, r0, r3
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	3332      	adds	r3, #50	@ 0x32
 8006be4:	4a3c      	ldr	r2, [pc, #240]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bf2:	4419      	add	r1, r3
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009a      	lsls	r2, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c0a:	4b33      	ldr	r3, [pc, #204]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006c0c:	fba3 0302 	umull	r0, r3, r3, r2
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	2064      	movs	r0, #100	@ 0x64
 8006c14:	fb00 f303 	mul.w	r3, r0, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	3332      	adds	r3, #50	@ 0x32
 8006c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006c20:	fba2 2303 	umull	r2, r3, r2, r3
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	f003 0207 	and.w	r2, r3, #7
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	440a      	add	r2, r1
 8006c30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c32:	e04a      	b.n	8006cca <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009a      	lsls	r2, r3, #2
 8006c3e:	441a      	add	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4a:	4a23      	ldr	r2, [pc, #140]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	0119      	lsls	r1, r3, #4
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009a      	lsls	r2, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006c6c:	fba3 0302 	umull	r0, r3, r3, r2
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	2064      	movs	r0, #100	@ 0x64
 8006c74:	fb00 f303 	mul.w	r3, r0, r3
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	3332      	adds	r3, #50	@ 0x32
 8006c7e:	4a16      	ldr	r2, [pc, #88]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006c80:	fba2 2303 	umull	r2, r3, r2, r3
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c8a:	4419      	add	r1, r3
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009a      	lsls	r2, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006ca4:	fba3 0302 	umull	r0, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	2064      	movs	r0, #100	@ 0x64
 8006cac:	fb00 f303 	mul.w	r3, r0, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	3332      	adds	r3, #50	@ 0x32
 8006cb6:	4a08      	ldr	r2, [pc, #32]	@ (8006cd8 <UART_SetConfig+0x1c4>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	f003 020f 	and.w	r2, r3, #15
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	609a      	str	r2, [r3, #8]
}
 8006cca:	bf00      	nop
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40013800 	.word	0x40013800
 8006cd8:	51eb851f 	.word	0x51eb851f

08006cdc <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08c      	sub	sp, #48	@ 0x30
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	71fb      	strb	r3, [r7, #7]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	71bb      	strb	r3, [r7, #6]
 8006cec:	4613      	mov	r3, r2
 8006cee:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8006cf4:	79bb      	ldrb	r3, [r7, #6]
 8006cf6:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8006cf8:	797b      	ldrb	r3, [r7, #5]
 8006cfa:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006cfc:	f107 030c 	add.w	r3, r7, #12
 8006d00:	2207      	movs	r2, #7
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 faee 	bl	80082e6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006d0a:	f107 0318 	add.w	r3, r7, #24
 8006d0e:	2218      	movs	r2, #24
 8006d10:	2100      	movs	r1, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 fae7 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006d18:	233f      	movs	r3, #63	@ 0x3f
 8006d1a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8006d1c:	238a      	movs	r3, #138	@ 0x8a
 8006d1e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8006d26:	2303      	movs	r3, #3
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8006d2a:	f107 030c 	add.w	r3, r7, #12
 8006d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8006d30:	2307      	movs	r3, #7
 8006d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006d34:	f107 0318 	add.w	r3, r7, #24
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fea0 	bl	8007a80 <hci_send_req>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	da01      	bge.n	8006d4a <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8006d46:	23ff      	movs	r3, #255	@ 0xff
 8006d48:	e014      	b.n	8006d74 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8006d4a:	7b3b      	ldrb	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8006d50:	7b3b      	ldrb	r3, [r7, #12]
 8006d52:	e00f      	b.n	8006d74 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8006d54:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8006d5e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8006d68:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d70:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3730      	adds	r7, #48	@ 0x30
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08e      	sub	sp, #56	@ 0x38
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006d90:	f107 0314 	add.w	r3, r7, #20
 8006d94:	2207      	movs	r2, #7
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f001 faa4 	bl	80082e6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006d9e:	f107 0320 	add.w	r3, r7, #32
 8006da2:	2218      	movs	r2, #24
 8006da4:	2100      	movs	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fa9d 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006dac:	233f      	movs	r3, #63	@ 0x3f
 8006dae:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8006db0:	238a      	movs	r3, #138	@ 0x8a
 8006db2:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8006db4:	f107 031c 	add.w	r3, r7, #28
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8006dba:	2301      	movs	r3, #1
 8006dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8006dbe:	f107 0314 	add.w	r3, r7, #20
 8006dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8006dc4:	2307      	movs	r3, #7
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006dc8:	f107 0320 	add.w	r3, r7, #32
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fe56 	bl	8007a80 <hci_send_req>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da01      	bge.n	8006dde <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8006dda:	23ff      	movs	r3, #255	@ 0xff
 8006ddc:	e014      	b.n	8006e08 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8006dde:	7d3b      	ldrb	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8006de4:	7d3b      	ldrb	r3, [r7, #20]
 8006de6:	e00f      	b.n	8006e08 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8006de8:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8006df2:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8006dfc:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3738      	adds	r7, #56	@ 0x38
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8006e10:	b590      	push	{r4, r7, lr}
 8006e12:	b095      	sub	sp, #84	@ 0x54
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4623      	mov	r3, r4
 8006e20:	71fb      	strb	r3, [r7, #7]
 8006e22:	4603      	mov	r3, r0
 8006e24:	80bb      	strh	r3, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	807b      	strh	r3, [r7, #2]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8006e34:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8006e38:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8006e3c:	4413      	add	r3, r2
 8006e3e:	330e      	adds	r3, #14
 8006e40:	2b28      	cmp	r3, #40	@ 0x28
 8006e42:	d901      	bls.n	8006e48 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8006e44:	2342      	movs	r3, #66	@ 0x42
 8006e46:	e0c9      	b.n	8006fdc <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8006e48:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e4c:	3350      	adds	r3, #80	@ 0x50
 8006e4e:	443b      	add	r3, r7
 8006e50:	79fa      	ldrb	r2, [r7, #7]
 8006e52:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8006e56:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8006e60:	88bb      	ldrh	r3, [r7, #4]
 8006e62:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8006e64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e68:	f107 0208 	add.w	r2, r7, #8
 8006e6c:	4413      	add	r3, r2
 8006e6e:	88ba      	ldrh	r2, [r7, #4]
 8006e70:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8006e72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e76:	3302      	adds	r3, #2
 8006e78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8006e80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e84:	f107 0208 	add.w	r2, r7, #8
 8006e88:	4413      	add	r3, r2
 8006e8a:	887a      	ldrh	r2, [r7, #2]
 8006e8c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8006e8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e92:	3302      	adds	r3, #2
 8006e94:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8006e98:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e9c:	3350      	adds	r3, #80	@ 0x50
 8006e9e:	443b      	add	r3, r7
 8006ea0:	79ba      	ldrb	r2, [r7, #6]
 8006ea2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8006ea6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8006eb0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006eb4:	3350      	adds	r3, #80	@ 0x50
 8006eb6:	443b      	add	r3, r7
 8006eb8:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8006ebc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8006ec0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8006eca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006ece:	3350      	adds	r3, #80	@ 0x50
 8006ed0:	443b      	add	r3, r7
 8006ed2:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8006ed6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8006eda:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8006ee4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006ee8:	f107 0208 	add.w	r2, r7, #8
 8006eec:	4413      	add	r3, r2
 8006eee:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8006ef2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fa72 	bl	80083de <memcpy>
  indx +=  LocalNameLen;
 8006efa:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8006efe:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8006f02:	4413      	add	r3, r2
 8006f04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8006f08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006f0c:	3350      	adds	r3, #80	@ 0x50
 8006f0e:	443b      	add	r3, r7
 8006f10:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8006f14:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8006f18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8006f22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006f26:	f107 0208 	add.w	r2, r7, #8
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8006f30:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 fa53 	bl	80083de <memcpy>
  indx +=  ServiceUUIDLen;  
 8006f38:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8006f3c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8006f40:	4413      	add	r3, r2
 8006f42:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8006f46:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006f4a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8006f4e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006f52:	f107 0208 	add.w	r2, r7, #8
 8006f56:	4413      	add	r3, r2
 8006f58:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8006f5c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8006f5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006f62:	3302      	adds	r3, #2
 8006f64:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8006f68:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8006f6c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8006f70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006f74:	f107 0208 	add.w	r2, r7, #8
 8006f78:	4413      	add	r3, r2
 8006f7a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8006f7e:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8006f80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006f84:	3302      	adds	r3, #2
 8006f86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006f8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006f8e:	2218      	movs	r2, #24
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 f9a7 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006f98:	233f      	movs	r3, #63	@ 0x3f
 8006f9a:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8006f9c:	2383      	movs	r3, #131	@ 0x83
 8006f9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8006fa0:	f107 0308 	add.w	r3, r7, #8
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8006fa6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006faa:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8006fac:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8006fb0:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8006fb6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fd5f 	bl	8007a80 <hci_send_req>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da01      	bge.n	8006fcc <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8006fc8:	23ff      	movs	r3, #255	@ 0xff
 8006fca:	e007      	b.n	8006fdc <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8006fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <aci_gap_set_discoverable+0x1ca>
    return status;
 8006fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006fd8:	e000      	b.n	8006fdc <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3754      	adds	r7, #84	@ 0x54
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd90      	pop	{r4, r7, pc}

08006fe4 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8006fe4:	b590      	push	{r4, r7, lr}
 8006fe6:	b091      	sub	sp, #68	@ 0x44
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	603a      	str	r2, [r7, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	71bb      	strb	r3, [r7, #6]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8006ffe:	79bb      	ldrb	r3, [r7, #6]
 8007000:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8007002:	79bb      	ldrb	r3, [r7, #6]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	f107 030e 	add.w	r3, r7, #14
 800700e:	6814      	ldr	r4, [r2, #0]
 8007010:	6850      	ldr	r0, [r2, #4]
 8007012:	6891      	ldr	r1, [r2, #8]
 8007014:	68d2      	ldr	r2, [r2, #12]
 8007016:	601c      	str	r4, [r3, #0]
 8007018:	6058      	str	r0, [r3, #4]
 800701a:	6099      	str	r1, [r3, #8]
 800701c:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800701e:	797b      	ldrb	r3, [r7, #5]
 8007020:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8007022:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8007026:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8007028:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800702c:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8007030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007032:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8007036:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800703a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800703e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007042:	2218      	movs	r2, #24
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f001 f94d 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800704c:	233f      	movs	r3, #63	@ 0x3f
 800704e:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8007050:	2386      	movs	r3, #134	@ 0x86
 8007052:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8007054:	f107 030c 	add.w	r3, r7, #12
 8007058:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 800705a:	231a      	movs	r3, #26
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 800705e:	f107 030b 	add.w	r3, r7, #11
 8007062:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8007064:	2301      	movs	r3, #1
 8007066:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8007068:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fd06 	bl	8007a80 <hci_send_req>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	da01      	bge.n	800707e <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800707a:	23ff      	movs	r3, #255	@ 0xff
 800707c:	e005      	b.n	800708a <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8007084:	7afb      	ldrb	r3, [r7, #11]
 8007086:	e000      	b.n	800708a <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3744      	adds	r7, #68	@ 0x44
 800708e:	46bd      	mov	sp, r7
 8007090:	bd90      	pop	{r4, r7, pc}

08007092 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b092      	sub	sp, #72	@ 0x48
 8007096:	af00      	add	r7, sp, #0
 8007098:	4603      	mov	r3, r0
 800709a:	6039      	str	r1, [r7, #0]
 800709c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	2b1f      	cmp	r3, #31
 80070a8:	d901      	bls.n	80070ae <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 80070aa:	2342      	movs	r3, #66	@ 0x42
 80070ac:	e03e      	b.n	800712c <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 80070ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070b2:	3348      	adds	r3, #72	@ 0x48
 80070b4:	443b      	add	r3, r7
 80070b6:	79fa      	ldrb	r2, [r7, #7]
 80070b8:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 80070bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070c0:	3301      	adds	r3, #1
 80070c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80070c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070ca:	f107 0208 	add.w	r2, r7, #8
 80070ce:	4413      	add	r3, r2
 80070d0:	79fa      	ldrb	r2, [r7, #7]
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 f982 	bl	80083de <memcpy>
  indx +=  AdvLen;
 80070da:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	4413      	add	r3, r2
 80070e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80070e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80070ea:	2218      	movs	r2, #24
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 f8f9 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80070f4:	233f      	movs	r3, #63	@ 0x3f
 80070f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 80070f8:	238e      	movs	r3, #142	@ 0x8e
 80070fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80070fc:	f107 0308 	add.w	r3, r7, #8
 8007100:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8007102:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007106:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8007108:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 800710e:	2301      	movs	r3, #1
 8007110:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8007112:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fcb1 	bl	8007a80 <hci_send_req>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	da01      	bge.n	8007128 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8007124:	23ff      	movs	r3, #255	@ 0xff
 8007126:	e001      	b.n	800712c <aci_gap_update_adv_data+0x9a>
    
  return status;
 8007128:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800712c:	4618      	mov	r0, r3
 800712e:	3748      	adds	r7, #72	@ 0x48
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800713a:	f107 0308 	add.w	r3, r7, #8
 800713e:	2218      	movs	r2, #24
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f001 f8cf 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007148:	233f      	movs	r3, #63	@ 0x3f
 800714a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800714c:	f240 1301 	movw	r3, #257	@ 0x101
 8007150:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007152:	1dfb      	adds	r3, r7, #7
 8007154:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007156:	2301      	movs	r3, #1
 8007158:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800715a:	f107 0308 	add.w	r3, r7, #8
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fc8d 	bl	8007a80 <hci_send_req>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	da01      	bge.n	8007170 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800716c:	23ff      	movs	r3, #255	@ 0xff
 800716e:	e000      	b.n	8007172 <aci_gatt_init+0x3e>

  return status;
 8007170:	79fb      	ldrb	r3, [r7, #7]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b090      	sub	sp, #64	@ 0x40
 800717e:	af00      	add	r7, sp, #0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	4611      	mov	r1, r2
 8007184:	461a      	mov	r2, r3
 8007186:	4603      	mov	r3, r0
 8007188:	71fb      	strb	r3, [r7, #7]
 800718a:	460b      	mov	r3, r1
 800718c:	71bb      	strb	r3, [r7, #6]
 800718e:	4613      	mov	r3, r2
 8007190:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8007198:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800719c:	3340      	adds	r3, #64	@ 0x40
 800719e:	443b      	add	r3, r7
 80071a0:	79fa      	ldrb	r2, [r7, #7]
 80071a2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80071a6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80071aa:	3301      	adds	r3, #1
 80071ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d103      	bne.n	80071be <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 80071b6:	2302      	movs	r3, #2
 80071b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80071bc:	e002      	b.n	80071c4 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80071be:	2310      	movs	r3, #16
 80071c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80071c4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80071c8:	f107 020c 	add.w	r2, r7, #12
 80071cc:	4413      	add	r3, r2
 80071ce:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 f902 	bl	80083de <memcpy>
  indx +=  uuid_len;
 80071da:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80071de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80071e2:	4413      	add	r3, r2
 80071e4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 80071e8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80071ec:	3340      	adds	r3, #64	@ 0x40
 80071ee:	443b      	add	r3, r7
 80071f0:	79ba      	ldrb	r2, [r7, #6]
 80071f2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80071f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80071fa:	3301      	adds	r3, #1
 80071fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8007200:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007204:	3340      	adds	r3, #64	@ 0x40
 8007206:	443b      	add	r3, r7
 8007208:	797a      	ldrb	r2, [r7, #5]
 800720a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800720e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007212:	3301      	adds	r3, #1
 8007214:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007218:	f107 0320 	add.w	r3, r7, #32
 800721c:	2203      	movs	r2, #3
 800721e:	2100      	movs	r1, #0
 8007220:	4618      	mov	r0, r3
 8007222:	f001 f860 	bl	80082e6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800722a:	2218      	movs	r2, #24
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f001 f859 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007234:	233f      	movs	r3, #63	@ 0x3f
 8007236:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8007238:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800723c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 800723e:	f107 030c 	add.w	r3, r7, #12
 8007242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8007244:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007248:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 800724a:	f107 0320 	add.w	r3, r7, #32
 800724e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8007250:	2303      	movs	r3, #3
 8007252:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8007254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fc10 	bl	8007a80 <hci_send_req>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	da01      	bge.n	800726a <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8007266:	23ff      	movs	r3, #255	@ 0xff
 8007268:	e00c      	b.n	8007284 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800726a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8007272:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007276:	e005      	b.n	8007284 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8007278:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 800727c:	b29a      	uxth	r2, r3
 800727e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007280:	801a      	strh	r2, [r3, #0]

  return 0;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3740      	adds	r7, #64	@ 0x40
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b092      	sub	sp, #72	@ 0x48
 8007290:	af00      	add	r7, sp, #0
 8007292:	603a      	str	r2, [r7, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	4603      	mov	r3, r0
 8007298:	80fb      	strh	r3, [r7, #6]
 800729a:	460b      	mov	r3, r1
 800729c:	717b      	strb	r3, [r7, #5]
 800729e:	4613      	mov	r3, r2
 80072a0:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 80072a8:	88fb      	ldrh	r3, [r7, #6]
 80072aa:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80072ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80072b0:	f107 020c 	add.w	r2, r7, #12
 80072b4:	4413      	add	r3, r2
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80072ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80072be:	3302      	adds	r3, #2
 80072c0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 80072c4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80072c8:	3348      	adds	r3, #72	@ 0x48
 80072ca:	443b      	add	r3, r7
 80072cc:	797a      	ldrb	r2, [r7, #5]
 80072ce:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80072d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80072d6:	3301      	adds	r3, #1
 80072d8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80072dc:	797b      	ldrb	r3, [r7, #5]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d103      	bne.n	80072ea <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 80072e2:	2302      	movs	r3, #2
 80072e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80072e8:	e002      	b.n	80072f0 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 80072ea:	2310      	movs	r3, #16
 80072ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80072f0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80072f4:	f107 020c 	add.w	r2, r7, #12
 80072f8:	4413      	add	r3, r2
 80072fa:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f001 f86c 	bl	80083de <memcpy>
  indx +=  uuid_len;
 8007306:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800730a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800730e:	4413      	add	r3, r2
 8007310:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8007314:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007318:	3348      	adds	r3, #72	@ 0x48
 800731a:	443b      	add	r3, r7
 800731c:	793a      	ldrb	r2, [r7, #4]
 800731e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007322:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007326:	3301      	adds	r3, #1
 8007328:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800732c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007330:	3348      	adds	r3, #72	@ 0x48
 8007332:	443b      	add	r3, r7
 8007334:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8007338:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800733c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007340:	3301      	adds	r3, #1
 8007342:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8007346:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800734a:	3348      	adds	r3, #72	@ 0x48
 800734c:	443b      	add	r3, r7
 800734e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8007352:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007356:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800735a:	3301      	adds	r3, #1
 800735c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8007360:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007364:	3348      	adds	r3, #72	@ 0x48
 8007366:	443b      	add	r3, r7
 8007368:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800736c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007370:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007374:	3301      	adds	r3, #1
 8007376:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 800737a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800737e:	3348      	adds	r3, #72	@ 0x48
 8007380:	443b      	add	r3, r7
 8007382:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8007386:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800738a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800738e:	3301      	adds	r3, #1
 8007390:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8007394:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007398:	3348      	adds	r3, #72	@ 0x48
 800739a:	443b      	add	r3, r7
 800739c:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80073a0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80073a4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80073a8:	3301      	adds	r3, #1
 80073aa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80073ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80073b2:	2203      	movs	r2, #3
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 ff95 	bl	80082e6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80073bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80073c0:	2218      	movs	r2, #24
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 ff8e 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80073ca:	233f      	movs	r3, #63	@ 0x3f
 80073cc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80073ce:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80073d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 80073da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80073de:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 80073e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80073e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80073e6:	2303      	movs	r3, #3
 80073e8:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80073ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80073ee:	2100      	movs	r1, #0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fb45 	bl	8007a80 <hci_send_req>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	da01      	bge.n	8007400 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 80073fc:	23ff      	movs	r3, #255	@ 0xff
 80073fe:	e00c      	b.n	800741a <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8007400:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <aci_gatt_add_char+0x182>
    return resp.status;
 8007408:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800740c:	e005      	b.n	800741a <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800740e:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8007412:	b29a      	uxth	r2, r3
 8007414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007416:	801a      	strh	r2, [r3, #0]

  return 0;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3748      	adds	r7, #72	@ 0x48
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8007422:	b590      	push	{r4, r7, lr}
 8007424:	b0ab      	sub	sp, #172	@ 0xac
 8007426:	af00      	add	r7, sp, #0
 8007428:	4604      	mov	r4, r0
 800742a:	4608      	mov	r0, r1
 800742c:	4611      	mov	r1, r2
 800742e:	461a      	mov	r2, r3
 8007430:	4623      	mov	r3, r4
 8007432:	80fb      	strh	r3, [r7, #6]
 8007434:	4603      	mov	r3, r0
 8007436:	80bb      	strh	r3, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
 800743c:	4613      	mov	r3, r2
 800743e:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8007446:	78bb      	ldrb	r3, [r7, #2]
 8007448:	2b7a      	cmp	r3, #122	@ 0x7a
 800744a:	d901      	bls.n	8007450 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800744c:	2342      	movs	r3, #66	@ 0x42
 800744e:	e074      	b.n	800753a <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8007454:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007458:	f107 0208 	add.w	r2, r7, #8
 800745c:	4413      	add	r3, r2
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007462:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007466:	3302      	adds	r3, #2
 8007468:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 800746c:	88bb      	ldrh	r3, [r7, #4]
 800746e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8007470:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007474:	f107 0208 	add.w	r2, r7, #8
 8007478:	4413      	add	r3, r2
 800747a:	88ba      	ldrh	r2, [r7, #4]
 800747c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800747e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007482:	3302      	adds	r3, #2
 8007484:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8007488:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800748c:	33a8      	adds	r3, #168	@ 0xa8
 800748e:	443b      	add	r3, r7
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8007496:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800749a:	3301      	adds	r3, #1
 800749c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 80074a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80074a4:	33a8      	adds	r3, #168	@ 0xa8
 80074a6:	443b      	add	r3, r7
 80074a8:	78ba      	ldrb	r2, [r7, #2]
 80074aa:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80074ae:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80074b2:	3301      	adds	r3, #1
 80074b4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80074b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80074bc:	f107 0208 	add.w	r2, r7, #8
 80074c0:	4413      	add	r3, r2
 80074c2:	78ba      	ldrb	r2, [r7, #2]
 80074c4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 ff88 	bl	80083de <memcpy>
  indx +=  charValueLen;
 80074ce:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80074d2:	78bb      	ldrb	r3, [r7, #2]
 80074d4:	4413      	add	r3, r2
 80074d6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80074da:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80074de:	2218      	movs	r2, #24
 80074e0:	2100      	movs	r1, #0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 feff 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80074e8:	233f      	movs	r3, #63	@ 0x3f
 80074ea:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80074ee:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80074f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 80074f6:	f107 0308 	add.w	r3, r7, #8
 80074fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 80074fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007502:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8007506:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800750a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800750e:	2301      	movs	r3, #1
 8007510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8007514:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fab0 	bl	8007a80 <hci_send_req>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	da01      	bge.n	800752a <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8007526:	23ff      	movs	r3, #255	@ 0xff
 8007528:	e007      	b.n	800753a <aci_gatt_update_char_value+0x118>

  if (status) {
 800752a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <aci_gatt_update_char_value+0x116>
    return status;
 8007532:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8007536:	e000      	b.n	800753a <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	37ac      	adds	r7, #172	@ 0xac
 800753e:	46bd      	mov	sp, r7
 8007540:	bd90      	pop	{r4, r7, pc}

08007542 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b08a      	sub	sp, #40	@ 0x28
 8007546:	af00      	add	r7, sp, #0
 8007548:	4603      	mov	r3, r0
 800754a:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800754c:	88fb      	ldrh	r3, [r7, #6]
 800754e:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8007550:	f107 0310 	add.w	r3, r7, #16
 8007554:	2218      	movs	r2, #24
 8007556:	2100      	movs	r1, #0
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fec4 	bl	80082e6 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800755e:	233f      	movs	r3, #63	@ 0x3f
 8007560:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8007562:	f240 1327 	movw	r3, #295	@ 0x127
 8007566:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800756e:	2302      	movs	r3, #2
 8007570:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8007572:	f107 030b 	add.w	r3, r7, #11
 8007576:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8007578:	2301      	movs	r3, #1
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800757c:	f107 0310 	add.w	r3, r7, #16
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fa7c 	bl	8007a80 <hci_send_req>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	da01      	bge.n	8007592 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800758e:	23ff      	movs	r3, #255	@ 0xff
 8007590:	e000      	b.n	8007594 <aci_gatt_allow_read+0x52>

    return status;
 8007592:	7afb      	ldrb	r3, [r7, #11]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3728      	adds	r7, #40	@ 0x28
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b0ac      	sub	sp, #176	@ 0xb0
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60ba      	str	r2, [r7, #8]
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
 80075aa:	460b      	mov	r3, r1
 80075ac:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80075b4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80075b8:	2218      	movs	r2, #24
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fe92 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80075c2:	233f      	movs	r3, #63	@ 0x3f
 80075c4:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 80075c8:	230d      	movs	r3, #13
 80075ca:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 80075ce:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80075d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 80075d6:	2301      	movs	r3, #1
 80075d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 80075e4:	2380      	movs	r3, #128	@ 0x80
 80075e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 80075ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80075ee:	2100      	movs	r1, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 fa45 	bl	8007a80 <hci_send_req>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da01      	bge.n	8007600 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 80075fc:	23ff      	movs	r3, #255	@ 0xff
 80075fe:	e01e      	b.n	800763e <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8007600:	7d3b      	ldrb	r3, [r7, #20]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <aci_hal_read_config_data+0x6e>
    return rp.status;
 8007606:	7d3b      	ldrb	r3, [r7, #20]
 8007608:	e019      	b.n	800763e <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800760a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800760e:	b2db      	uxtb	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b2da      	uxtb	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	89bb      	ldrh	r3, [r7, #12]
 8007620:	4293      	cmp	r3, r2
 8007622:	d201      	bcs.n	8007628 <aci_hal_read_config_data+0x8c>
 8007624:	89ba      	ldrh	r2, [r7, #12]
 8007626:	e002      	b.n	800762e <aci_hal_read_config_data+0x92>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	f107 0314 	add.w	r3, r7, #20
 8007632:	3301      	adds	r3, #1
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fed1 	bl	80083de <memcpy>
  
  return 0;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	37b0      	adds	r7, #176	@ 0xb0
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b08a      	sub	sp, #40	@ 0x28
 800764a:	af00      	add	r7, sp, #0
 800764c:	4603      	mov	r3, r0
 800764e:	460a      	mov	r2, r1
 8007650:	71fb      	strb	r3, [r7, #7]
 8007652:	4613      	mov	r3, r2
 8007654:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800765a:	79bb      	ldrb	r3, [r7, #6]
 800765c:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800765e:	f107 0310 	add.w	r3, r7, #16
 8007662:	2218      	movs	r2, #24
 8007664:	2100      	movs	r1, #0
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fe3d 	bl	80082e6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800766c:	233f      	movs	r3, #63	@ 0x3f
 800766e:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8007670:	230f      	movs	r3, #15
 8007672:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8007674:	f107 030c 	add.w	r3, r7, #12
 8007678:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800767a:	2302      	movs	r3, #2
 800767c:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800767e:	f107 030b 	add.w	r3, r7, #11
 8007682:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8007684:	2301      	movs	r3, #1
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8007688:	f107 0310 	add.w	r3, r7, #16
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f9f6 	bl	8007a80 <hci_send_req>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	da01      	bge.n	800769e <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800769a:	23ff      	movs	r3, #255	@ 0xff
 800769c:	e000      	b.n	80076a0 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800769e:	7afb      	ldrb	r3, [r7, #11]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3728      	adds	r7, #40	@ 0x28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b089      	sub	sp, #36	@ 0x24
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80076b2:	f107 0410 	add.w	r4, r7, #16
 80076b6:	f107 0215 	add.w	r2, r7, #21
 80076ba:	f107 0112 	add.w	r1, r7, #18
 80076be:	f107 0016 	add.w	r0, r7, #22
 80076c2:	f107 030e 	add.w	r3, r7, #14
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	4623      	mov	r3, r4
 80076ca:	f000 f853 	bl	8007774 <hci_le_read_local_version>
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d126      	bne.n	8007726 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80076d8:	8a7b      	ldrh	r3, [r7, #18]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	b29b      	uxth	r3, r3
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80076e4:	8a7b      	ldrh	r3, [r7, #18]
 80076e6:	021b      	lsls	r3, r3, #8
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b21a      	sxth	r2, r3
 80076f4:	89fb      	ldrh	r3, [r7, #14]
 80076f6:	091b      	lsrs	r3, r3, #4
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	b21b      	sxth	r3, r3
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	b21b      	sxth	r3, r3
 8007702:	4313      	orrs	r3, r2
 8007704:	b21b      	sxth	r3, r3
 8007706:	b29a      	uxth	r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b21a      	sxth	r2, r3
 8007712:	89fb      	ldrh	r3, [r7, #14]
 8007714:	b21b      	sxth	r3, r3
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	b21b      	sxth	r3, r3
 800771c:	4313      	orrs	r3, r2
 800771e:	b21b      	sxth	r3, r3
 8007720:	b29a      	uxth	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
}
 8007728:	4618      	mov	r0, r3
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	bd90      	pop	{r4, r7, pc}

08007730 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007736:	f107 0308 	add.w	r3, r7, #8
 800773a:	2218      	movs	r2, #24
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fdd1 	bl	80082e6 <memset>
  rq.ogf = OGF_HOST_CTL;
 8007744:	2303      	movs	r3, #3
 8007746:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8007748:	2303      	movs	r3, #3
 800774a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800774c:	1dfb      	adds	r3, r7, #7
 800774e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007750:	2301      	movs	r3, #1
 8007752:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007754:	f107 0308 	add.w	r3, r7, #8
 8007758:	2100      	movs	r1, #0
 800775a:	4618      	mov	r0, r3
 800775c:	f000 f990 	bl	8007a80 <hci_send_req>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	da01      	bge.n	800776a <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8007766:	23ff      	movs	r3, #255	@ 0xff
 8007768:	e000      	b.n	800776c <hci_reset+0x3c>
  
  return status;  
 800776a:	79fb      	ldrb	r3, [r7, #7]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08e      	sub	sp, #56	@ 0x38
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007782:	f107 0314 	add.w	r3, r7, #20
 8007786:	2209      	movs	r2, #9
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fdab 	bl	80082e6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007790:	f107 0320 	add.w	r3, r7, #32
 8007794:	2218      	movs	r2, #24
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fda4 	bl	80082e6 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800779e:	2304      	movs	r3, #4
 80077a0:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80077a2:	2301      	movs	r3, #1
 80077a4:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80077ae:	f107 0314 	add.w	r3, r7, #20
 80077b2:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80077b4:	2309      	movs	r3, #9
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80077b8:	f107 0320 	add.w	r3, r7, #32
 80077bc:	2100      	movs	r1, #0
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f95e 	bl	8007a80 <hci_send_req>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da01      	bge.n	80077ce <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 80077ca:	23ff      	movs	r3, #255	@ 0xff
 80077cc:	e018      	b.n	8007800 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 80077ce:	7d3b      	ldrb	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <hci_le_read_local_version+0x64>
    return resp.status;
 80077d4:	7d3b      	ldrb	r3, [r7, #20]
 80077d6:	e013      	b.n	8007800 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 80077d8:	7d7a      	ldrb	r2, [r7, #21]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 80077de:	8afa      	ldrh	r2, [r7, #22]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 80077e4:	7e3a      	ldrb	r2, [r7, #24]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80077ea:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80077f4:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077fc:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3738      	adds	r7, #56	@ 0x38
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b092      	sub	sp, #72	@ 0x48
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	6039      	str	r1, [r7, #0]
 8007812:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8007814:	f107 0310 	add.w	r3, r7, #16
 8007818:	2220      	movs	r2, #32
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fd62 	bl	80082e6 <memset>
  scan_resp_cp.length = length;
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	2b1f      	cmp	r3, #31
 800782a:	bf28      	it	cs
 800782c:	231f      	movcs	r3, #31
 800782e:	b2db      	uxtb	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	3301      	adds	r3, #1
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fdcf 	bl	80083de <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007840:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007844:	2218      	movs	r2, #24
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fd4c 	bl	80082e6 <memset>
  rq.ogf = OGF_LE_CTL;
 800784e:	2308      	movs	r3, #8
 8007850:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8007852:	2309      	movs	r3, #9
 8007854:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8007856:	f107 0310 	add.w	r3, r7, #16
 800785a:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800785c:	2320      	movs	r3, #32
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8007860:	f107 030f 	add.w	r3, r7, #15
 8007864:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800786a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f905 	bl	8007a80 <hci_send_req>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	da01      	bge.n	8007880 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800787c:	23ff      	movs	r3, #255	@ 0xff
 800787e:	e000      	b.n	8007882 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3748      	adds	r7, #72	@ 0x48
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3308      	adds	r3, #8
 8007896:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b04      	cmp	r3, #4
 800789e:	d001      	beq.n	80078a4 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80078a0:	2301      	movs	r3, #1
 80078a2:	e00c      	b.n	80078be <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3302      	adds	r3, #2
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80078b2:	3b03      	subs	r3, #3
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80078b8:	2302      	movs	r3, #2
 80078ba:	e000      	b.n	80078be <verify_packet+0x34>
  
  return 0;      
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b0a6      	sub	sp, #152	@ 0x98
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	4603      	mov	r3, r0
 80078d2:	81fb      	strh	r3, [r7, #14]
 80078d4:	460b      	mov	r3, r1
 80078d6:	81bb      	strh	r3, [r7, #12]
 80078d8:	4613      	mov	r3, r2
 80078da:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80078dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80078e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e4:	b21a      	sxth	r2, r3
 80078e6:	89fb      	ldrh	r3, [r7, #14]
 80078e8:	029b      	lsls	r3, r3, #10
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	4313      	orrs	r3, r2
 80078ee:	b21b      	sxth	r3, r3
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80078f4:	7afb      	ldrb	r3, [r7, #11]
 80078f6:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80078f8:	2301      	movs	r3, #1
 80078fa:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80078fc:	f107 0318 	add.w	r3, r7, #24
 8007900:	3301      	adds	r3, #1
 8007902:	461a      	mov	r2, r3
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	8819      	ldrh	r1, [r3, #0]
 800790a:	789b      	ldrb	r3, [r3, #2]
 800790c:	8011      	strh	r1, [r2, #0]
 800790e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8007910:	f107 0318 	add.w	r3, r7, #24
 8007914:	3304      	adds	r3, #4
 8007916:	7afa      	ldrb	r2, [r7, #11]
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fd5f 	bl	80083de <memcpy>
  
  if (hciContext.io.Send)
 8007920:	4b08      	ldr	r3, [pc, #32]	@ (8007944 <send_cmd+0x7c>)
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d009      	beq.n	800793c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8007928:	4b06      	ldr	r3, [pc, #24]	@ (8007944 <send_cmd+0x7c>)
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	7afa      	ldrb	r2, [r7, #11]
 800792e:	b292      	uxth	r2, r2
 8007930:	3204      	adds	r2, #4
 8007932:	b291      	uxth	r1, r2
 8007934:	f107 0218 	add.w	r2, r7, #24
 8007938:	4610      	mov	r0, r2
 800793a:	4798      	blx	r3
  }
}
 800793c:	bf00      	nop
 800793e:	3798      	adds	r7, #152	@ 0x98
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000634 	.word	0x20000634

08007948 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8007952:	e00a      	b.n	800796a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8007954:	f107 030c 	add.w	r3, r7, #12
 8007958:	4619      	mov	r1, r3
 800795a:	6838      	ldr	r0, [r7, #0]
 800795c:	f000 fae3 	bl	8007f26 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fa4d 	bl	8007e04 <list_insert_head>
  while (!list_is_empty(src_list))
 800796a:	6838      	ldr	r0, [r7, #0]
 800796c:	f000 fa29 	bl	8007dc2 <list_is_empty>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0ee      	beq.n	8007954 <move_list+0xc>
  }
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007986:	e009      	b.n	800799c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8007988:	1d3b      	adds	r3, r7, #4
 800798a:	4619      	mov	r1, r3
 800798c:	4809      	ldr	r0, [pc, #36]	@ (80079b4 <free_event_list+0x34>)
 800798e:	f000 faa3 	bl	8007ed8 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4619      	mov	r1, r3
 8007996:	4808      	ldr	r0, [pc, #32]	@ (80079b8 <free_event_list+0x38>)
 8007998:	f000 fa59 	bl	8007e4e <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800799c:	4806      	ldr	r0, [pc, #24]	@ (80079b8 <free_event_list+0x38>)
 800799e:	f000 fae9 	bl	8007f74 <list_get_size>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	ddef      	ble.n	8007988 <free_event_list+0x8>
  }
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000370 	.word	0x20000370
 80079b8:	20000368 	.word	0x20000368

080079bc <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80079cc:	4a18      	ldr	r2, [pc, #96]	@ (8007a30 <hci_init+0x74>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80079d2:	4818      	ldr	r0, [pc, #96]	@ (8007a34 <hci_init+0x78>)
 80079d4:	f000 f9e6 	bl	8007da4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80079d8:	4817      	ldr	r0, [pc, #92]	@ (8007a38 <hci_init+0x7c>)
 80079da:	f000 f9e3 	bl	8007da4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80079de:	f7fb faa5 	bl	8002f2c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
 80079e6:	e00c      	b.n	8007a02 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	228c      	movs	r2, #140	@ 0x8c
 80079ec:	fb02 f303 	mul.w	r3, r2, r3
 80079f0:	4a12      	ldr	r2, [pc, #72]	@ (8007a3c <hci_init+0x80>)
 80079f2:	4413      	add	r3, r2
 80079f4:	4619      	mov	r1, r3
 80079f6:	480f      	ldr	r0, [pc, #60]	@ (8007a34 <hci_init+0x78>)
 80079f8:	f000 fa29 	bl	8007e4e <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	3301      	adds	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d9ef      	bls.n	80079e8 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8007a08:	4b09      	ldr	r3, [pc, #36]	@ (8007a30 <hci_init+0x74>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <hci_init+0x5c>
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <hci_init+0x74>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2000      	movs	r0, #0
 8007a16:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8007a18:	4b05      	ldr	r3, [pc, #20]	@ (8007a30 <hci_init+0x74>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <hci_init+0x6a>
 8007a20:	4b03      	ldr	r3, [pc, #12]	@ (8007a30 <hci_init+0x74>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	4798      	blx	r3
}
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000634 	.word	0x20000634
 8007a34:	20000368 	.word	0x20000368
 8007a38:	20000370 	.word	0x20000370
 8007a3c:	20000378 	.word	0x20000378

08007a40 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8007a7c <hci_register_io_bus+0x3c>)
 8007a4e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	4a09      	ldr	r2, [pc, #36]	@ (8007a7c <hci_register_io_bus+0x3c>)
 8007a56:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	4a07      	ldr	r2, [pc, #28]	@ (8007a7c <hci_register_io_bus+0x3c>)
 8007a5e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	4a05      	ldr	r2, [pc, #20]	@ (8007a7c <hci_register_io_bus+0x3c>)
 8007a66:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	4a03      	ldr	r2, [pc, #12]	@ (8007a7c <hci_register_io_bus+0x3c>)
 8007a6e:	6093      	str	r3, [r2, #8]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	20000634 	.word	0x20000634

08007a80 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08e      	sub	sp, #56	@ 0x38
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	b21b      	sxth	r3, r3
 8007a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a96:	b21a      	sxth	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	029b      	lsls	r3, r3, #10
 8007a9e:	b21b      	sxth	r3, r3
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	b21b      	sxth	r3, r3
 8007aa4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8007aaa:	f107 0308 	add.w	r3, r7, #8
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f978 	bl	8007da4 <list_init_head>

  free_event_list();
 8007ab4:	f7ff ff64 	bl	8007980 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8818      	ldrh	r0, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8859      	ldrh	r1, [r3, #2]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f7ff fefd 	bl	80078c8 <send_cmd>
  
  if (async)
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <hci_send_req+0x58>
  {
    return 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e0e2      	b.n	8007c9e <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8007ad8:	f7fc f97e 	bl	8003dd8 <HAL_GetTick>
 8007adc:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007ade:	f7fc f97b 	bl	8003dd8 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007aec:	f200 80b3 	bhi.w	8007c56 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8007af0:	486d      	ldr	r0, [pc, #436]	@ (8007ca8 <hci_send_req+0x228>)
 8007af2:	f000 f966 	bl	8007dc2 <list_is_empty>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d000      	beq.n	8007afe <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007afc:	e7ef      	b.n	8007ade <hci_send_req+0x5e>
      {
        break;
 8007afe:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8007b00:	f107 0310 	add.w	r3, r7, #16
 8007b04:	4619      	mov	r1, r3
 8007b06:	4868      	ldr	r0, [pc, #416]	@ (8007ca8 <hci_send_req+0x228>)
 8007b08:	f000 f9e6 	bl	8007ed8 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8007b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d17f      	bne.n	8007c1a <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8007b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	3308      	adds	r3, #8
 8007b24:	3303      	adds	r3, #3
 8007b26:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007b2e:	3b03      	subs	r3, #3
 8007b30:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8007b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b38:	d04c      	beq.n	8007bd4 <hci_send_req+0x154>
 8007b3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b3c:	dc68      	bgt.n	8007c10 <hci_send_req+0x190>
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	f000 808b 	beq.w	8007c5a <hci_send_req+0x1da>
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	dc63      	bgt.n	8007c10 <hci_send_req+0x190>
 8007b48:	2b0e      	cmp	r3, #14
 8007b4a:	d023      	beq.n	8007b94 <hci_send_req+0x114>
 8007b4c:	2b0f      	cmp	r3, #15
 8007b4e:	d15f      	bne.n	8007c10 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b52:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	885b      	ldrh	r3, [r3, #2]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d17e      	bne.n	8007c5e <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	2b0f      	cmp	r3, #15
 8007b66:	d004      	beq.n	8007b72 <hci_send_req+0xf2>
          if (cs->status) {
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d051      	beq.n	8007c14 <hci_send_req+0x194>
            goto failed;
 8007b70:	e078      	b.n	8007c64 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	695a      	ldr	r2, [r3, #20]
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	bf28      	it	cs
 8007b7c:	461a      	movcs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6918      	ldr	r0, [r3, #16]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b8e:	f000 fc26 	bl	80083de <memcpy>
        goto done;
 8007b92:	e078      	b.n	8007c86 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d15d      	bne.n	8007c62 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	3303      	adds	r3, #3
 8007baa:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	3b03      	subs	r3, #3
 8007bb0:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695a      	ldr	r2, [r3, #20]
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	bf28      	it	cs
 8007bbc:	461a      	movcs	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6918      	ldr	r0, [r3, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bce:	f000 fc06 	bl	80083de <memcpy>
        goto done;
 8007bd2:	e058      	b.n	8007c86 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d118      	bne.n	8007c18 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	bf28      	it	cs
 8007bf6:	461a      	movcs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6918      	ldr	r0, [r3, #16]
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	1c59      	adds	r1, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f000 fbe8 	bl	80083de <memcpy>
        goto done;
 8007c0e:	e03a      	b.n	8007c86 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8007c10:	bf00      	nop
 8007c12:	e002      	b.n	8007c1a <hci_send_req+0x19a>
          break;
 8007c14:	bf00      	nop
 8007c16:	e000      	b.n	8007c1a <hci_send_req+0x19a>
          break;
 8007c18:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8007c1a:	4824      	ldr	r0, [pc, #144]	@ (8007cac <hci_send_req+0x22c>)
 8007c1c:	f000 f8d1 	bl	8007dc2 <list_is_empty>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <hci_send_req+0x1c2>
 8007c26:	4820      	ldr	r0, [pc, #128]	@ (8007ca8 <hci_send_req+0x228>)
 8007c28:	f000 f8cb 	bl	8007dc2 <list_is_empty>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	4619      	mov	r1, r3
 8007c36:	481d      	ldr	r0, [pc, #116]	@ (8007cac <hci_send_req+0x22c>)
 8007c38:	f000 f909 	bl	8007e4e <list_insert_tail>
      hciReadPacket=NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	e008      	b.n	8007c54 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f8ff 	bl	8007e4e <list_insert_tail>
      hciReadPacket=NULL;
 8007c50:	2300      	movs	r3, #0
 8007c52:	613b      	str	r3, [r7, #16]
  {
 8007c54:	e740      	b.n	8007ad8 <hci_send_req+0x58>
        goto failed;
 8007c56:	bf00      	nop
 8007c58:	e004      	b.n	8007c64 <hci_send_req+0x1e4>
        goto failed;
 8007c5a:	bf00      	nop
 8007c5c:	e002      	b.n	8007c64 <hci_send_req+0x1e4>
          goto failed;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <hci_send_req+0x1e4>
          goto failed;
 8007c62:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	480f      	ldr	r0, [pc, #60]	@ (8007cac <hci_send_req+0x22c>)
 8007c70:	f000 f8c8 	bl	8007e04 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8007c74:	f107 0308 	add.w	r3, r7, #8
 8007c78:	4619      	mov	r1, r3
 8007c7a:	480b      	ldr	r0, [pc, #44]	@ (8007ca8 <hci_send_req+0x228>)
 8007c7c:	f7ff fe64 	bl	8007948 <move_list>

  return -1;
 8007c80:	f04f 33ff 	mov.w	r3, #4294967295
 8007c84:	e00b      	b.n	8007c9e <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4808      	ldr	r0, [pc, #32]	@ (8007cac <hci_send_req+0x22c>)
 8007c8c:	f000 f8ba 	bl	8007e04 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8007c90:	f107 0308 	add.w	r3, r7, #8
 8007c94:	4619      	mov	r1, r3
 8007c96:	4804      	ldr	r0, [pc, #16]	@ (8007ca8 <hci_send_req+0x228>)
 8007c98:	f7ff fe56 	bl	8007948 <move_list>

  return 0;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3738      	adds	r7, #56	@ 0x38
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000370 	.word	0x20000370
 8007cac:	20000368 	.word	0x20000368

08007cb0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007cba:	e013      	b.n	8007ce4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8007cbc:	1d3b      	adds	r3, r7, #4
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	480e      	ldr	r0, [pc, #56]	@ (8007cfc <hci_user_evt_proc+0x4c>)
 8007cc2:	f000 f909 	bl	8007ed8 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d00 <hci_user_evt_proc+0x50>)
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8007cce:	4b0c      	ldr	r3, [pc, #48]	@ (8007d00 <hci_user_evt_proc+0x50>)
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	3208      	adds	r2, #8
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4809      	ldr	r0, [pc, #36]	@ (8007d04 <hci_user_evt_proc+0x54>)
 8007ce0:	f000 f8b5 	bl	8007e4e <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007ce4:	4805      	ldr	r0, [pc, #20]	@ (8007cfc <hci_user_evt_proc+0x4c>)
 8007ce6:	f000 f86c 	bl	8007dc2 <list_is_empty>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0e5      	beq.n	8007cbc <hci_user_evt_proc+0xc>
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000370 	.word	0x20000370
 8007d00:	20000634 	.word	0x20000634
 8007d04:	20000368 	.word	0x20000368

08007d08 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8007d18:	481f      	ldr	r0, [pc, #124]	@ (8007d98 <hci_notify_asynch_evt+0x90>)
 8007d1a:	f000 f852 	bl	8007dc2 <list_is_empty>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d132      	bne.n	8007d8a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8007d24:	f107 030c 	add.w	r3, r7, #12
 8007d28:	4619      	mov	r1, r3
 8007d2a:	481b      	ldr	r0, [pc, #108]	@ (8007d98 <hci_notify_asynch_evt+0x90>)
 8007d2c:	f000 f8d4 	bl	8007ed8 <list_remove_head>
    
    if (hciContext.io.Receive)
 8007d30:	4b1a      	ldr	r3, [pc, #104]	@ (8007d9c <hci_notify_asynch_evt+0x94>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d02a      	beq.n	8007d8e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8007d38:	4b18      	ldr	r3, [pc, #96]	@ (8007d9c <hci_notify_asynch_evt+0x94>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	3208      	adds	r2, #8
 8007d40:	2180      	movs	r1, #128	@ 0x80
 8007d42:	4610      	mov	r0, r2
 8007d44:	4798      	blx	r3
 8007d46:	4603      	mov	r3, r0
 8007d48:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8007d4a:	7cfb      	ldrb	r3, [r7, #19]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d016      	beq.n	8007d7e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	7cfa      	ldrb	r2, [r7, #19]
 8007d54:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff fd95 	bl	800788a <verify_packet>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d105      	bne.n	8007d72 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	480d      	ldr	r0, [pc, #52]	@ (8007da0 <hci_notify_asynch_evt+0x98>)
 8007d6c:	f000 f86f 	bl	8007e4e <list_insert_tail>
 8007d70:	e00d      	b.n	8007d8e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4619      	mov	r1, r3
 8007d76:	4808      	ldr	r0, [pc, #32]	@ (8007d98 <hci_notify_asynch_evt+0x90>)
 8007d78:	f000 f844 	bl	8007e04 <list_insert_head>
 8007d7c:	e007      	b.n	8007d8e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4619      	mov	r1, r3
 8007d82:	4805      	ldr	r0, [pc, #20]	@ (8007d98 <hci_notify_asynch_evt+0x90>)
 8007d84:	f000 f83e 	bl	8007e04 <list_insert_head>
 8007d88:	e001      	b.n	8007d8e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8007d8e:	697b      	ldr	r3, [r7, #20]

}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000368 	.word	0x20000368
 8007d9c:	20000634 	.word	0x20000634
 8007da0:	20000370 	.word	0x20000370

08007da4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	605a      	str	r2, [r3, #4]
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr

08007dc2 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b087      	sub	sp, #28
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dca:	f3ef 8310 	mrs	r3, PRIMASK
 8007dce:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dd4:	b672      	cpsid	i
}
 8007dd6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d102      	bne.n	8007de8 <list_is_empty+0x26>
  {
    return_value = 1;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
 8007de6:	e001      	b.n	8007dec <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	75fb      	strb	r3, [r7, #23]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f383 8810 	msr	PRIMASK, r3
}
 8007df6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e14:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007e16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e18:	b672      	cpsid	i
}
 8007e1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	605a      	str	r2, [r3, #4]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f383 8810 	msr	PRIMASK, r3
}
 8007e42:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007e44:	bf00      	nop
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b087      	sub	sp, #28
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e58:	f3ef 8310 	mrs	r3, PRIMASK
 8007e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007e60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e62:	b672      	cpsid	i
}
 8007e64:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f383 8810 	msr	PRIMASK, r3
}
 8007e8c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr

08007e98 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007eaa:	b672      	cpsid	i
}
 8007eac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6812      	ldr	r2, [r2, #0]
 8007eb6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6852      	ldr	r2, [r2, #4]
 8007ec0:	605a      	str	r2, [r3, #4]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f383 8810 	msr	PRIMASK, r3
}
 8007ecc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr

08007ed8 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007eec:	b672      	cpsid	i
}
 8007eee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ffcb 	bl	8007e98 <list_remove_node>
  (*node)->next = NULL;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	605a      	str	r2, [r3, #4]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f383 8810 	msr	PRIMASK, r3
}
 8007f1c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007f1e:	bf00      	nop
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b086      	sub	sp, #24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f30:	f3ef 8310 	mrs	r3, PRIMASK
 8007f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f36:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f3a:	b672      	cpsid	i
}
 8007f3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7ff ffa4 	bl	8007e98 <list_remove_node>
  (*node)->next = NULL;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	605a      	str	r2, [r3, #4]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f383 8810 	msr	PRIMASK, r3
}
 8007f6a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007f6c:	bf00      	nop
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b089      	sub	sp, #36	@ 0x24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  int size = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f80:	f3ef 8310 	mrs	r3, PRIMASK
 8007f84:	613b      	str	r3, [r7, #16]
  return(result);
 8007f86:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f8a:	b672      	cpsid	i
}
 8007f8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8007f94:	e005      	b.n	8007fa2 <list_get_size+0x2e>
  {
    size++;
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d1f5      	bne.n	8007f96 <list_get_size+0x22>
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f383 8810 	msr	PRIMASK, r3
}
 8007fb4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8007fb6:	69fb      	ldr	r3, [r7, #28]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3724      	adds	r7, #36	@ 0x24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr
	...

08007fc4 <srand>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4b10      	ldr	r3, [pc, #64]	@ (8008008 <srand+0x44>)
 8007fc8:	4604      	mov	r4, r0
 8007fca:	681d      	ldr	r5, [r3, #0]
 8007fcc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007fce:	b9b3      	cbnz	r3, 8007ffe <srand+0x3a>
 8007fd0:	2018      	movs	r0, #24
 8007fd2:	f000 fa79 	bl	80084c8 <malloc>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6328      	str	r0, [r5, #48]	@ 0x30
 8007fda:	b920      	cbnz	r0, 8007fe6 <srand+0x22>
 8007fdc:	2146      	movs	r1, #70	@ 0x46
 8007fde:	4b0b      	ldr	r3, [pc, #44]	@ (800800c <srand+0x48>)
 8007fe0:	480b      	ldr	r0, [pc, #44]	@ (8008010 <srand+0x4c>)
 8007fe2:	f000 fa0b 	bl	80083fc <__assert_func>
 8007fe6:	490b      	ldr	r1, [pc, #44]	@ (8008014 <srand+0x50>)
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8008018 <srand+0x54>)
 8007fea:	e9c0 1300 	strd	r1, r3, [r0]
 8007fee:	4b0b      	ldr	r3, [pc, #44]	@ (800801c <srand+0x58>)
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	6083      	str	r3, [r0, #8]
 8007ff4:	230b      	movs	r3, #11
 8007ff6:	8183      	strh	r3, [r0, #12]
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007ffe:	2200      	movs	r2, #0
 8008000:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008002:	611c      	str	r4, [r3, #16]
 8008004:	615a      	str	r2, [r3, #20]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20000034 	.word	0x20000034
 800800c:	08009428 	.word	0x08009428
 8008010:	0800943f 	.word	0x0800943f
 8008014:	abcd330e 	.word	0xabcd330e
 8008018:	e66d1234 	.word	0xe66d1234
 800801c:	0005deec 	.word	0x0005deec

08008020 <rand>:
 8008020:	4b16      	ldr	r3, [pc, #88]	@ (800807c <rand+0x5c>)
 8008022:	b510      	push	{r4, lr}
 8008024:	681c      	ldr	r4, [r3, #0]
 8008026:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008028:	b9b3      	cbnz	r3, 8008058 <rand+0x38>
 800802a:	2018      	movs	r0, #24
 800802c:	f000 fa4c 	bl	80084c8 <malloc>
 8008030:	4602      	mov	r2, r0
 8008032:	6320      	str	r0, [r4, #48]	@ 0x30
 8008034:	b920      	cbnz	r0, 8008040 <rand+0x20>
 8008036:	2152      	movs	r1, #82	@ 0x52
 8008038:	4b11      	ldr	r3, [pc, #68]	@ (8008080 <rand+0x60>)
 800803a:	4812      	ldr	r0, [pc, #72]	@ (8008084 <rand+0x64>)
 800803c:	f000 f9de 	bl	80083fc <__assert_func>
 8008040:	4911      	ldr	r1, [pc, #68]	@ (8008088 <rand+0x68>)
 8008042:	4b12      	ldr	r3, [pc, #72]	@ (800808c <rand+0x6c>)
 8008044:	e9c0 1300 	strd	r1, r3, [r0]
 8008048:	4b11      	ldr	r3, [pc, #68]	@ (8008090 <rand+0x70>)
 800804a:	2100      	movs	r1, #0
 800804c:	6083      	str	r3, [r0, #8]
 800804e:	230b      	movs	r3, #11
 8008050:	8183      	strh	r3, [r0, #12]
 8008052:	2001      	movs	r0, #1
 8008054:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008058:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800805a:	480e      	ldr	r0, [pc, #56]	@ (8008094 <rand+0x74>)
 800805c:	690b      	ldr	r3, [r1, #16]
 800805e:	694c      	ldr	r4, [r1, #20]
 8008060:	4358      	muls	r0, r3
 8008062:	4a0d      	ldr	r2, [pc, #52]	@ (8008098 <rand+0x78>)
 8008064:	fb02 0004 	mla	r0, r2, r4, r0
 8008068:	fba3 3202 	umull	r3, r2, r3, r2
 800806c:	3301      	adds	r3, #1
 800806e:	eb40 0002 	adc.w	r0, r0, r2
 8008072:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008076:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800807a:	bd10      	pop	{r4, pc}
 800807c:	20000034 	.word	0x20000034
 8008080:	08009428 	.word	0x08009428
 8008084:	0800943f 	.word	0x0800943f
 8008088:	abcd330e 	.word	0xabcd330e
 800808c:	e66d1234 	.word	0xe66d1234
 8008090:	0005deec 	.word	0x0005deec
 8008094:	5851f42d 	.word	0x5851f42d
 8008098:	4c957f2d 	.word	0x4c957f2d

0800809c <std>:
 800809c:	2300      	movs	r3, #0
 800809e:	b510      	push	{r4, lr}
 80080a0:	4604      	mov	r4, r0
 80080a2:	e9c0 3300 	strd	r3, r3, [r0]
 80080a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080aa:	6083      	str	r3, [r0, #8]
 80080ac:	8181      	strh	r1, [r0, #12]
 80080ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80080b0:	81c2      	strh	r2, [r0, #14]
 80080b2:	6183      	str	r3, [r0, #24]
 80080b4:	4619      	mov	r1, r3
 80080b6:	2208      	movs	r2, #8
 80080b8:	305c      	adds	r0, #92	@ 0x5c
 80080ba:	f000 f914 	bl	80082e6 <memset>
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <std+0x58>)
 80080c0:	6224      	str	r4, [r4, #32]
 80080c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80080c4:	4b0c      	ldr	r3, [pc, #48]	@ (80080f8 <std+0x5c>)
 80080c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080c8:	4b0c      	ldr	r3, [pc, #48]	@ (80080fc <std+0x60>)
 80080ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008100 <std+0x64>)
 80080ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80080d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008104 <std+0x68>)
 80080d2:	429c      	cmp	r4, r3
 80080d4:	d006      	beq.n	80080e4 <std+0x48>
 80080d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080da:	4294      	cmp	r4, r2
 80080dc:	d002      	beq.n	80080e4 <std+0x48>
 80080de:	33d0      	adds	r3, #208	@ 0xd0
 80080e0:	429c      	cmp	r4, r3
 80080e2:	d105      	bne.n	80080f0 <std+0x54>
 80080e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ec:	f000 b974 	b.w	80083d8 <__retarget_lock_init_recursive>
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	bf00      	nop
 80080f4:	08008261 	.word	0x08008261
 80080f8:	08008283 	.word	0x08008283
 80080fc:	080082bb 	.word	0x080082bb
 8008100:	080082df 	.word	0x080082df
 8008104:	20000654 	.word	0x20000654

08008108 <stdio_exit_handler>:
 8008108:	4a02      	ldr	r2, [pc, #8]	@ (8008114 <stdio_exit_handler+0xc>)
 800810a:	4903      	ldr	r1, [pc, #12]	@ (8008118 <stdio_exit_handler+0x10>)
 800810c:	4803      	ldr	r0, [pc, #12]	@ (800811c <stdio_exit_handler+0x14>)
 800810e:	f000 b869 	b.w	80081e4 <_fwalk_sglue>
 8008112:	bf00      	nop
 8008114:	20000028 	.word	0x20000028
 8008118:	08008d09 	.word	0x08008d09
 800811c:	20000038 	.word	0x20000038

08008120 <cleanup_stdio>:
 8008120:	6841      	ldr	r1, [r0, #4]
 8008122:	4b0c      	ldr	r3, [pc, #48]	@ (8008154 <cleanup_stdio+0x34>)
 8008124:	b510      	push	{r4, lr}
 8008126:	4299      	cmp	r1, r3
 8008128:	4604      	mov	r4, r0
 800812a:	d001      	beq.n	8008130 <cleanup_stdio+0x10>
 800812c:	f000 fdec 	bl	8008d08 <_fflush_r>
 8008130:	68a1      	ldr	r1, [r4, #8]
 8008132:	4b09      	ldr	r3, [pc, #36]	@ (8008158 <cleanup_stdio+0x38>)
 8008134:	4299      	cmp	r1, r3
 8008136:	d002      	beq.n	800813e <cleanup_stdio+0x1e>
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fde5 	bl	8008d08 <_fflush_r>
 800813e:	68e1      	ldr	r1, [r4, #12]
 8008140:	4b06      	ldr	r3, [pc, #24]	@ (800815c <cleanup_stdio+0x3c>)
 8008142:	4299      	cmp	r1, r3
 8008144:	d004      	beq.n	8008150 <cleanup_stdio+0x30>
 8008146:	4620      	mov	r0, r4
 8008148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814c:	f000 bddc 	b.w	8008d08 <_fflush_r>
 8008150:	bd10      	pop	{r4, pc}
 8008152:	bf00      	nop
 8008154:	20000654 	.word	0x20000654
 8008158:	200006bc 	.word	0x200006bc
 800815c:	20000724 	.word	0x20000724

08008160 <global_stdio_init.part.0>:
 8008160:	b510      	push	{r4, lr}
 8008162:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <global_stdio_init.part.0+0x30>)
 8008164:	4c0b      	ldr	r4, [pc, #44]	@ (8008194 <global_stdio_init.part.0+0x34>)
 8008166:	4a0c      	ldr	r2, [pc, #48]	@ (8008198 <global_stdio_init.part.0+0x38>)
 8008168:	4620      	mov	r0, r4
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	2104      	movs	r1, #4
 800816e:	2200      	movs	r2, #0
 8008170:	f7ff ff94 	bl	800809c <std>
 8008174:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008178:	2201      	movs	r2, #1
 800817a:	2109      	movs	r1, #9
 800817c:	f7ff ff8e 	bl	800809c <std>
 8008180:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008184:	2202      	movs	r2, #2
 8008186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800818a:	2112      	movs	r1, #18
 800818c:	f7ff bf86 	b.w	800809c <std>
 8008190:	2000078c 	.word	0x2000078c
 8008194:	20000654 	.word	0x20000654
 8008198:	08008109 	.word	0x08008109

0800819c <__sfp_lock_acquire>:
 800819c:	4801      	ldr	r0, [pc, #4]	@ (80081a4 <__sfp_lock_acquire+0x8>)
 800819e:	f000 b91c 	b.w	80083da <__retarget_lock_acquire_recursive>
 80081a2:	bf00      	nop
 80081a4:	20000795 	.word	0x20000795

080081a8 <__sfp_lock_release>:
 80081a8:	4801      	ldr	r0, [pc, #4]	@ (80081b0 <__sfp_lock_release+0x8>)
 80081aa:	f000 b917 	b.w	80083dc <__retarget_lock_release_recursive>
 80081ae:	bf00      	nop
 80081b0:	20000795 	.word	0x20000795

080081b4 <__sinit>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	4604      	mov	r4, r0
 80081b8:	f7ff fff0 	bl	800819c <__sfp_lock_acquire>
 80081bc:	6a23      	ldr	r3, [r4, #32]
 80081be:	b11b      	cbz	r3, 80081c8 <__sinit+0x14>
 80081c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c4:	f7ff bff0 	b.w	80081a8 <__sfp_lock_release>
 80081c8:	4b04      	ldr	r3, [pc, #16]	@ (80081dc <__sinit+0x28>)
 80081ca:	6223      	str	r3, [r4, #32]
 80081cc:	4b04      	ldr	r3, [pc, #16]	@ (80081e0 <__sinit+0x2c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1f5      	bne.n	80081c0 <__sinit+0xc>
 80081d4:	f7ff ffc4 	bl	8008160 <global_stdio_init.part.0>
 80081d8:	e7f2      	b.n	80081c0 <__sinit+0xc>
 80081da:	bf00      	nop
 80081dc:	08008121 	.word	0x08008121
 80081e0:	2000078c 	.word	0x2000078c

080081e4 <_fwalk_sglue>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	4607      	mov	r7, r0
 80081ea:	4688      	mov	r8, r1
 80081ec:	4614      	mov	r4, r2
 80081ee:	2600      	movs	r6, #0
 80081f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081f4:	f1b9 0901 	subs.w	r9, r9, #1
 80081f8:	d505      	bpl.n	8008206 <_fwalk_sglue+0x22>
 80081fa:	6824      	ldr	r4, [r4, #0]
 80081fc:	2c00      	cmp	r4, #0
 80081fe:	d1f7      	bne.n	80081f0 <_fwalk_sglue+0xc>
 8008200:	4630      	mov	r0, r6
 8008202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d907      	bls.n	800821c <_fwalk_sglue+0x38>
 800820c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008210:	3301      	adds	r3, #1
 8008212:	d003      	beq.n	800821c <_fwalk_sglue+0x38>
 8008214:	4629      	mov	r1, r5
 8008216:	4638      	mov	r0, r7
 8008218:	47c0      	blx	r8
 800821a:	4306      	orrs	r6, r0
 800821c:	3568      	adds	r5, #104	@ 0x68
 800821e:	e7e9      	b.n	80081f4 <_fwalk_sglue+0x10>

08008220 <siprintf>:
 8008220:	b40e      	push	{r1, r2, r3}
 8008222:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008226:	b500      	push	{lr}
 8008228:	b09c      	sub	sp, #112	@ 0x70
 800822a:	ab1d      	add	r3, sp, #116	@ 0x74
 800822c:	9002      	str	r0, [sp, #8]
 800822e:	9006      	str	r0, [sp, #24]
 8008230:	9107      	str	r1, [sp, #28]
 8008232:	9104      	str	r1, [sp, #16]
 8008234:	4808      	ldr	r0, [pc, #32]	@ (8008258 <siprintf+0x38>)
 8008236:	4909      	ldr	r1, [pc, #36]	@ (800825c <siprintf+0x3c>)
 8008238:	f853 2b04 	ldr.w	r2, [r3], #4
 800823c:	9105      	str	r1, [sp, #20]
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	a902      	add	r1, sp, #8
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	f000 fa52 	bl	80086ec <_svfiprintf_r>
 8008248:	2200      	movs	r2, #0
 800824a:	9b02      	ldr	r3, [sp, #8]
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	b01c      	add	sp, #112	@ 0x70
 8008250:	f85d eb04 	ldr.w	lr, [sp], #4
 8008254:	b003      	add	sp, #12
 8008256:	4770      	bx	lr
 8008258:	20000034 	.word	0x20000034
 800825c:	ffff0208 	.word	0xffff0208

08008260 <__sread>:
 8008260:	b510      	push	{r4, lr}
 8008262:	460c      	mov	r4, r1
 8008264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008268:	f000 f868 	bl	800833c <_read_r>
 800826c:	2800      	cmp	r0, #0
 800826e:	bfab      	itete	ge
 8008270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008272:	89a3      	ldrhlt	r3, [r4, #12]
 8008274:	181b      	addge	r3, r3, r0
 8008276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800827a:	bfac      	ite	ge
 800827c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800827e:	81a3      	strhlt	r3, [r4, #12]
 8008280:	bd10      	pop	{r4, pc}

08008282 <__swrite>:
 8008282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008286:	461f      	mov	r7, r3
 8008288:	898b      	ldrh	r3, [r1, #12]
 800828a:	4605      	mov	r5, r0
 800828c:	05db      	lsls	r3, r3, #23
 800828e:	460c      	mov	r4, r1
 8008290:	4616      	mov	r6, r2
 8008292:	d505      	bpl.n	80082a0 <__swrite+0x1e>
 8008294:	2302      	movs	r3, #2
 8008296:	2200      	movs	r2, #0
 8008298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829c:	f000 f83c 	bl	8008318 <_lseek_r>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	4632      	mov	r2, r6
 80082a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	4628      	mov	r0, r5
 80082ac:	463b      	mov	r3, r7
 80082ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082b6:	f000 b853 	b.w	8008360 <_write_r>

080082ba <__sseek>:
 80082ba:	b510      	push	{r4, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c2:	f000 f829 	bl	8008318 <_lseek_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	bf15      	itete	ne
 80082cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082d6:	81a3      	strheq	r3, [r4, #12]
 80082d8:	bf18      	it	ne
 80082da:	81a3      	strhne	r3, [r4, #12]
 80082dc:	bd10      	pop	{r4, pc}

080082de <__sclose>:
 80082de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e2:	f000 b809 	b.w	80082f8 <_close_r>

080082e6 <memset>:
 80082e6:	4603      	mov	r3, r0
 80082e8:	4402      	add	r2, r0
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d100      	bne.n	80082f0 <memset+0xa>
 80082ee:	4770      	bx	lr
 80082f0:	f803 1b01 	strb.w	r1, [r3], #1
 80082f4:	e7f9      	b.n	80082ea <memset+0x4>
	...

080082f8 <_close_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	2300      	movs	r3, #0
 80082fc:	4d05      	ldr	r5, [pc, #20]	@ (8008314 <_close_r+0x1c>)
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	f7fb fa8d 	bl	8003822 <_close>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_close_r+0x1a>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_close_r+0x1a>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20000790 	.word	0x20000790

08008318 <_lseek_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	4611      	mov	r1, r2
 8008320:	2200      	movs	r2, #0
 8008322:	4d05      	ldr	r5, [pc, #20]	@ (8008338 <_lseek_r+0x20>)
 8008324:	602a      	str	r2, [r5, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	f7fb fa9f 	bl	800386a <_lseek>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_lseek_r+0x1e>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_lseek_r+0x1e>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	20000790 	.word	0x20000790

0800833c <_read_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	4611      	mov	r1, r2
 8008344:	2200      	movs	r2, #0
 8008346:	4d05      	ldr	r5, [pc, #20]	@ (800835c <_read_r+0x20>)
 8008348:	602a      	str	r2, [r5, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	f7fb fa30 	bl	80037b0 <_read>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_read_r+0x1e>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_read_r+0x1e>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20000790 	.word	0x20000790

08008360 <_write_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	4611      	mov	r1, r2
 8008368:	2200      	movs	r2, #0
 800836a:	4d05      	ldr	r5, [pc, #20]	@ (8008380 <_write_r+0x20>)
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7fb fa3b 	bl	80037ea <_write>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_write_r+0x1e>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_write_r+0x1e>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	20000790 	.word	0x20000790

08008384 <__errno>:
 8008384:	4b01      	ldr	r3, [pc, #4]	@ (800838c <__errno+0x8>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20000034 	.word	0x20000034

08008390 <__libc_init_array>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	2600      	movs	r6, #0
 8008394:	4d0c      	ldr	r5, [pc, #48]	@ (80083c8 <__libc_init_array+0x38>)
 8008396:	4c0d      	ldr	r4, [pc, #52]	@ (80083cc <__libc_init_array+0x3c>)
 8008398:	1b64      	subs	r4, r4, r5
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	42a6      	cmp	r6, r4
 800839e:	d109      	bne.n	80083b4 <__libc_init_array+0x24>
 80083a0:	f000 fffc 	bl	800939c <_init>
 80083a4:	2600      	movs	r6, #0
 80083a6:	4d0a      	ldr	r5, [pc, #40]	@ (80083d0 <__libc_init_array+0x40>)
 80083a8:	4c0a      	ldr	r4, [pc, #40]	@ (80083d4 <__libc_init_array+0x44>)
 80083aa:	1b64      	subs	r4, r4, r5
 80083ac:	10a4      	asrs	r4, r4, #2
 80083ae:	42a6      	cmp	r6, r4
 80083b0:	d105      	bne.n	80083be <__libc_init_array+0x2e>
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b8:	4798      	blx	r3
 80083ba:	3601      	adds	r6, #1
 80083bc:	e7ee      	b.n	800839c <__libc_init_array+0xc>
 80083be:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c2:	4798      	blx	r3
 80083c4:	3601      	adds	r6, #1
 80083c6:	e7f2      	b.n	80083ae <__libc_init_array+0x1e>
 80083c8:	08009510 	.word	0x08009510
 80083cc:	08009510 	.word	0x08009510
 80083d0:	08009510 	.word	0x08009510
 80083d4:	08009514 	.word	0x08009514

080083d8 <__retarget_lock_init_recursive>:
 80083d8:	4770      	bx	lr

080083da <__retarget_lock_acquire_recursive>:
 80083da:	4770      	bx	lr

080083dc <__retarget_lock_release_recursive>:
 80083dc:	4770      	bx	lr

080083de <memcpy>:
 80083de:	440a      	add	r2, r1
 80083e0:	4291      	cmp	r1, r2
 80083e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e6:	d100      	bne.n	80083ea <memcpy+0xc>
 80083e8:	4770      	bx	lr
 80083ea:	b510      	push	{r4, lr}
 80083ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f0:	4291      	cmp	r1, r2
 80083f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f6:	d1f9      	bne.n	80083ec <memcpy+0xe>
 80083f8:	bd10      	pop	{r4, pc}
	...

080083fc <__assert_func>:
 80083fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083fe:	4614      	mov	r4, r2
 8008400:	461a      	mov	r2, r3
 8008402:	4b09      	ldr	r3, [pc, #36]	@ (8008428 <__assert_func+0x2c>)
 8008404:	4605      	mov	r5, r0
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68d8      	ldr	r0, [r3, #12]
 800840a:	b954      	cbnz	r4, 8008422 <__assert_func+0x26>
 800840c:	4b07      	ldr	r3, [pc, #28]	@ (800842c <__assert_func+0x30>)
 800840e:	461c      	mov	r4, r3
 8008410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008414:	9100      	str	r1, [sp, #0]
 8008416:	462b      	mov	r3, r5
 8008418:	4905      	ldr	r1, [pc, #20]	@ (8008430 <__assert_func+0x34>)
 800841a:	f000 fc9d 	bl	8008d58 <fiprintf>
 800841e:	f000 fce5 	bl	8008dec <abort>
 8008422:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__assert_func+0x38>)
 8008424:	e7f4      	b.n	8008410 <__assert_func+0x14>
 8008426:	bf00      	nop
 8008428:	20000034 	.word	0x20000034
 800842c:	080094d2 	.word	0x080094d2
 8008430:	080094a4 	.word	0x080094a4
 8008434:	08009497 	.word	0x08009497

08008438 <_free_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4605      	mov	r5, r0
 800843c:	2900      	cmp	r1, #0
 800843e:	d040      	beq.n	80084c2 <_free_r+0x8a>
 8008440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008444:	1f0c      	subs	r4, r1, #4
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfb8      	it	lt
 800844a:	18e4      	addlt	r4, r4, r3
 800844c:	f000 f8e6 	bl	800861c <__malloc_lock>
 8008450:	4a1c      	ldr	r2, [pc, #112]	@ (80084c4 <_free_r+0x8c>)
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	b933      	cbnz	r3, 8008464 <_free_r+0x2c>
 8008456:	6063      	str	r3, [r4, #4]
 8008458:	6014      	str	r4, [r2, #0]
 800845a:	4628      	mov	r0, r5
 800845c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008460:	f000 b8e2 	b.w	8008628 <__malloc_unlock>
 8008464:	42a3      	cmp	r3, r4
 8008466:	d908      	bls.n	800847a <_free_r+0x42>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	1821      	adds	r1, r4, r0
 800846c:	428b      	cmp	r3, r1
 800846e:	bf01      	itttt	eq
 8008470:	6819      	ldreq	r1, [r3, #0]
 8008472:	685b      	ldreq	r3, [r3, #4]
 8008474:	1809      	addeq	r1, r1, r0
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	e7ed      	b.n	8008456 <_free_r+0x1e>
 800847a:	461a      	mov	r2, r3
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	b10b      	cbz	r3, 8008484 <_free_r+0x4c>
 8008480:	42a3      	cmp	r3, r4
 8008482:	d9fa      	bls.n	800847a <_free_r+0x42>
 8008484:	6811      	ldr	r1, [r2, #0]
 8008486:	1850      	adds	r0, r2, r1
 8008488:	42a0      	cmp	r0, r4
 800848a:	d10b      	bne.n	80084a4 <_free_r+0x6c>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	4401      	add	r1, r0
 8008490:	1850      	adds	r0, r2, r1
 8008492:	4283      	cmp	r3, r0
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	d1e0      	bne.n	800845a <_free_r+0x22>
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	4408      	add	r0, r1
 800849e:	6010      	str	r0, [r2, #0]
 80084a0:	6053      	str	r3, [r2, #4]
 80084a2:	e7da      	b.n	800845a <_free_r+0x22>
 80084a4:	d902      	bls.n	80084ac <_free_r+0x74>
 80084a6:	230c      	movs	r3, #12
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	e7d6      	b.n	800845a <_free_r+0x22>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	1821      	adds	r1, r4, r0
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf01      	itttt	eq
 80084b4:	6819      	ldreq	r1, [r3, #0]
 80084b6:	685b      	ldreq	r3, [r3, #4]
 80084b8:	1809      	addeq	r1, r1, r0
 80084ba:	6021      	streq	r1, [r4, #0]
 80084bc:	6063      	str	r3, [r4, #4]
 80084be:	6054      	str	r4, [r2, #4]
 80084c0:	e7cb      	b.n	800845a <_free_r+0x22>
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	2000079c 	.word	0x2000079c

080084c8 <malloc>:
 80084c8:	4b02      	ldr	r3, [pc, #8]	@ (80084d4 <malloc+0xc>)
 80084ca:	4601      	mov	r1, r0
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	f000 b825 	b.w	800851c <_malloc_r>
 80084d2:	bf00      	nop
 80084d4:	20000034 	.word	0x20000034

080084d8 <sbrk_aligned>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	4e0f      	ldr	r6, [pc, #60]	@ (8008518 <sbrk_aligned+0x40>)
 80084dc:	460c      	mov	r4, r1
 80084de:	6831      	ldr	r1, [r6, #0]
 80084e0:	4605      	mov	r5, r0
 80084e2:	b911      	cbnz	r1, 80084ea <sbrk_aligned+0x12>
 80084e4:	f000 fc64 	bl	8008db0 <_sbrk_r>
 80084e8:	6030      	str	r0, [r6, #0]
 80084ea:	4621      	mov	r1, r4
 80084ec:	4628      	mov	r0, r5
 80084ee:	f000 fc5f 	bl	8008db0 <_sbrk_r>
 80084f2:	1c43      	adds	r3, r0, #1
 80084f4:	d103      	bne.n	80084fe <sbrk_aligned+0x26>
 80084f6:	f04f 34ff 	mov.w	r4, #4294967295
 80084fa:	4620      	mov	r0, r4
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	1cc4      	adds	r4, r0, #3
 8008500:	f024 0403 	bic.w	r4, r4, #3
 8008504:	42a0      	cmp	r0, r4
 8008506:	d0f8      	beq.n	80084fa <sbrk_aligned+0x22>
 8008508:	1a21      	subs	r1, r4, r0
 800850a:	4628      	mov	r0, r5
 800850c:	f000 fc50 	bl	8008db0 <_sbrk_r>
 8008510:	3001      	adds	r0, #1
 8008512:	d1f2      	bne.n	80084fa <sbrk_aligned+0x22>
 8008514:	e7ef      	b.n	80084f6 <sbrk_aligned+0x1e>
 8008516:	bf00      	nop
 8008518:	20000798 	.word	0x20000798

0800851c <_malloc_r>:
 800851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008520:	1ccd      	adds	r5, r1, #3
 8008522:	f025 0503 	bic.w	r5, r5, #3
 8008526:	3508      	adds	r5, #8
 8008528:	2d0c      	cmp	r5, #12
 800852a:	bf38      	it	cc
 800852c:	250c      	movcc	r5, #12
 800852e:	2d00      	cmp	r5, #0
 8008530:	4606      	mov	r6, r0
 8008532:	db01      	blt.n	8008538 <_malloc_r+0x1c>
 8008534:	42a9      	cmp	r1, r5
 8008536:	d904      	bls.n	8008542 <_malloc_r+0x26>
 8008538:	230c      	movs	r3, #12
 800853a:	6033      	str	r3, [r6, #0]
 800853c:	2000      	movs	r0, #0
 800853e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008618 <_malloc_r+0xfc>
 8008546:	f000 f869 	bl	800861c <__malloc_lock>
 800854a:	f8d8 3000 	ldr.w	r3, [r8]
 800854e:	461c      	mov	r4, r3
 8008550:	bb44      	cbnz	r4, 80085a4 <_malloc_r+0x88>
 8008552:	4629      	mov	r1, r5
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff ffbf 	bl	80084d8 <sbrk_aligned>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	4604      	mov	r4, r0
 800855e:	d158      	bne.n	8008612 <_malloc_r+0xf6>
 8008560:	f8d8 4000 	ldr.w	r4, [r8]
 8008564:	4627      	mov	r7, r4
 8008566:	2f00      	cmp	r7, #0
 8008568:	d143      	bne.n	80085f2 <_malloc_r+0xd6>
 800856a:	2c00      	cmp	r4, #0
 800856c:	d04b      	beq.n	8008606 <_malloc_r+0xea>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	4639      	mov	r1, r7
 8008572:	4630      	mov	r0, r6
 8008574:	eb04 0903 	add.w	r9, r4, r3
 8008578:	f000 fc1a 	bl	8008db0 <_sbrk_r>
 800857c:	4581      	cmp	r9, r0
 800857e:	d142      	bne.n	8008606 <_malloc_r+0xea>
 8008580:	6821      	ldr	r1, [r4, #0]
 8008582:	4630      	mov	r0, r6
 8008584:	1a6d      	subs	r5, r5, r1
 8008586:	4629      	mov	r1, r5
 8008588:	f7ff ffa6 	bl	80084d8 <sbrk_aligned>
 800858c:	3001      	adds	r0, #1
 800858e:	d03a      	beq.n	8008606 <_malloc_r+0xea>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	442b      	add	r3, r5
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	f8d8 3000 	ldr.w	r3, [r8]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	bb62      	cbnz	r2, 80085f8 <_malloc_r+0xdc>
 800859e:	f8c8 7000 	str.w	r7, [r8]
 80085a2:	e00f      	b.n	80085c4 <_malloc_r+0xa8>
 80085a4:	6822      	ldr	r2, [r4, #0]
 80085a6:	1b52      	subs	r2, r2, r5
 80085a8:	d420      	bmi.n	80085ec <_malloc_r+0xd0>
 80085aa:	2a0b      	cmp	r2, #11
 80085ac:	d917      	bls.n	80085de <_malloc_r+0xc2>
 80085ae:	1961      	adds	r1, r4, r5
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	6025      	str	r5, [r4, #0]
 80085b4:	bf18      	it	ne
 80085b6:	6059      	strne	r1, [r3, #4]
 80085b8:	6863      	ldr	r3, [r4, #4]
 80085ba:	bf08      	it	eq
 80085bc:	f8c8 1000 	streq.w	r1, [r8]
 80085c0:	5162      	str	r2, [r4, r5]
 80085c2:	604b      	str	r3, [r1, #4]
 80085c4:	4630      	mov	r0, r6
 80085c6:	f000 f82f 	bl	8008628 <__malloc_unlock>
 80085ca:	f104 000b 	add.w	r0, r4, #11
 80085ce:	1d23      	adds	r3, r4, #4
 80085d0:	f020 0007 	bic.w	r0, r0, #7
 80085d4:	1ac2      	subs	r2, r0, r3
 80085d6:	bf1c      	itt	ne
 80085d8:	1a1b      	subne	r3, r3, r0
 80085da:	50a3      	strne	r3, [r4, r2]
 80085dc:	e7af      	b.n	800853e <_malloc_r+0x22>
 80085de:	6862      	ldr	r2, [r4, #4]
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	bf0c      	ite	eq
 80085e4:	f8c8 2000 	streq.w	r2, [r8]
 80085e8:	605a      	strne	r2, [r3, #4]
 80085ea:	e7eb      	b.n	80085c4 <_malloc_r+0xa8>
 80085ec:	4623      	mov	r3, r4
 80085ee:	6864      	ldr	r4, [r4, #4]
 80085f0:	e7ae      	b.n	8008550 <_malloc_r+0x34>
 80085f2:	463c      	mov	r4, r7
 80085f4:	687f      	ldr	r7, [r7, #4]
 80085f6:	e7b6      	b.n	8008566 <_malloc_r+0x4a>
 80085f8:	461a      	mov	r2, r3
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	d1fb      	bne.n	80085f8 <_malloc_r+0xdc>
 8008600:	2300      	movs	r3, #0
 8008602:	6053      	str	r3, [r2, #4]
 8008604:	e7de      	b.n	80085c4 <_malloc_r+0xa8>
 8008606:	230c      	movs	r3, #12
 8008608:	4630      	mov	r0, r6
 800860a:	6033      	str	r3, [r6, #0]
 800860c:	f000 f80c 	bl	8008628 <__malloc_unlock>
 8008610:	e794      	b.n	800853c <_malloc_r+0x20>
 8008612:	6005      	str	r5, [r0, #0]
 8008614:	e7d6      	b.n	80085c4 <_malloc_r+0xa8>
 8008616:	bf00      	nop
 8008618:	2000079c 	.word	0x2000079c

0800861c <__malloc_lock>:
 800861c:	4801      	ldr	r0, [pc, #4]	@ (8008624 <__malloc_lock+0x8>)
 800861e:	f7ff bedc 	b.w	80083da <__retarget_lock_acquire_recursive>
 8008622:	bf00      	nop
 8008624:	20000794 	.word	0x20000794

08008628 <__malloc_unlock>:
 8008628:	4801      	ldr	r0, [pc, #4]	@ (8008630 <__malloc_unlock+0x8>)
 800862a:	f7ff bed7 	b.w	80083dc <__retarget_lock_release_recursive>
 800862e:	bf00      	nop
 8008630:	20000794 	.word	0x20000794

08008634 <__ssputs_r>:
 8008634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	461f      	mov	r7, r3
 800863a:	688e      	ldr	r6, [r1, #8]
 800863c:	4682      	mov	sl, r0
 800863e:	42be      	cmp	r6, r7
 8008640:	460c      	mov	r4, r1
 8008642:	4690      	mov	r8, r2
 8008644:	680b      	ldr	r3, [r1, #0]
 8008646:	d82d      	bhi.n	80086a4 <__ssputs_r+0x70>
 8008648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800864c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008650:	d026      	beq.n	80086a0 <__ssputs_r+0x6c>
 8008652:	6965      	ldr	r5, [r4, #20]
 8008654:	6909      	ldr	r1, [r1, #16]
 8008656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800865a:	eba3 0901 	sub.w	r9, r3, r1
 800865e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008662:	1c7b      	adds	r3, r7, #1
 8008664:	444b      	add	r3, r9
 8008666:	106d      	asrs	r5, r5, #1
 8008668:	429d      	cmp	r5, r3
 800866a:	bf38      	it	cc
 800866c:	461d      	movcc	r5, r3
 800866e:	0553      	lsls	r3, r2, #21
 8008670:	d527      	bpl.n	80086c2 <__ssputs_r+0x8e>
 8008672:	4629      	mov	r1, r5
 8008674:	f7ff ff52 	bl	800851c <_malloc_r>
 8008678:	4606      	mov	r6, r0
 800867a:	b360      	cbz	r0, 80086d6 <__ssputs_r+0xa2>
 800867c:	464a      	mov	r2, r9
 800867e:	6921      	ldr	r1, [r4, #16]
 8008680:	f7ff fead 	bl	80083de <memcpy>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800868a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	6126      	str	r6, [r4, #16]
 8008692:	444e      	add	r6, r9
 8008694:	6026      	str	r6, [r4, #0]
 8008696:	463e      	mov	r6, r7
 8008698:	6165      	str	r5, [r4, #20]
 800869a:	eba5 0509 	sub.w	r5, r5, r9
 800869e:	60a5      	str	r5, [r4, #8]
 80086a0:	42be      	cmp	r6, r7
 80086a2:	d900      	bls.n	80086a6 <__ssputs_r+0x72>
 80086a4:	463e      	mov	r6, r7
 80086a6:	4632      	mov	r2, r6
 80086a8:	4641      	mov	r1, r8
 80086aa:	6820      	ldr	r0, [r4, #0]
 80086ac:	f000 fb66 	bl	8008d7c <memmove>
 80086b0:	2000      	movs	r0, #0
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	1b9b      	subs	r3, r3, r6
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	4433      	add	r3, r6
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c2:	462a      	mov	r2, r5
 80086c4:	f000 fb99 	bl	8008dfa <_realloc_r>
 80086c8:	4606      	mov	r6, r0
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d1e0      	bne.n	8008690 <__ssputs_r+0x5c>
 80086ce:	4650      	mov	r0, sl
 80086d0:	6921      	ldr	r1, [r4, #16]
 80086d2:	f7ff feb1 	bl	8008438 <_free_r>
 80086d6:	230c      	movs	r3, #12
 80086d8:	f8ca 3000 	str.w	r3, [sl]
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	f04f 30ff 	mov.w	r0, #4294967295
 80086e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	e7e9      	b.n	80086be <__ssputs_r+0x8a>
	...

080086ec <_svfiprintf_r>:
 80086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	4698      	mov	r8, r3
 80086f2:	898b      	ldrh	r3, [r1, #12]
 80086f4:	4607      	mov	r7, r0
 80086f6:	061b      	lsls	r3, r3, #24
 80086f8:	460d      	mov	r5, r1
 80086fa:	4614      	mov	r4, r2
 80086fc:	b09d      	sub	sp, #116	@ 0x74
 80086fe:	d510      	bpl.n	8008722 <_svfiprintf_r+0x36>
 8008700:	690b      	ldr	r3, [r1, #16]
 8008702:	b973      	cbnz	r3, 8008722 <_svfiprintf_r+0x36>
 8008704:	2140      	movs	r1, #64	@ 0x40
 8008706:	f7ff ff09 	bl	800851c <_malloc_r>
 800870a:	6028      	str	r0, [r5, #0]
 800870c:	6128      	str	r0, [r5, #16]
 800870e:	b930      	cbnz	r0, 800871e <_svfiprintf_r+0x32>
 8008710:	230c      	movs	r3, #12
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	b01d      	add	sp, #116	@ 0x74
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	2340      	movs	r3, #64	@ 0x40
 8008720:	616b      	str	r3, [r5, #20]
 8008722:	2300      	movs	r3, #0
 8008724:	9309      	str	r3, [sp, #36]	@ 0x24
 8008726:	2320      	movs	r3, #32
 8008728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800872c:	2330      	movs	r3, #48	@ 0x30
 800872e:	f04f 0901 	mov.w	r9, #1
 8008732:	f8cd 800c 	str.w	r8, [sp, #12]
 8008736:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80088d0 <_svfiprintf_r+0x1e4>
 800873a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800873e:	4623      	mov	r3, r4
 8008740:	469a      	mov	sl, r3
 8008742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008746:	b10a      	cbz	r2, 800874c <_svfiprintf_r+0x60>
 8008748:	2a25      	cmp	r2, #37	@ 0x25
 800874a:	d1f9      	bne.n	8008740 <_svfiprintf_r+0x54>
 800874c:	ebba 0b04 	subs.w	fp, sl, r4
 8008750:	d00b      	beq.n	800876a <_svfiprintf_r+0x7e>
 8008752:	465b      	mov	r3, fp
 8008754:	4622      	mov	r2, r4
 8008756:	4629      	mov	r1, r5
 8008758:	4638      	mov	r0, r7
 800875a:	f7ff ff6b 	bl	8008634 <__ssputs_r>
 800875e:	3001      	adds	r0, #1
 8008760:	f000 80a7 	beq.w	80088b2 <_svfiprintf_r+0x1c6>
 8008764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008766:	445a      	add	r2, fp
 8008768:	9209      	str	r2, [sp, #36]	@ 0x24
 800876a:	f89a 3000 	ldrb.w	r3, [sl]
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 809f 	beq.w	80088b2 <_svfiprintf_r+0x1c6>
 8008774:	2300      	movs	r3, #0
 8008776:	f04f 32ff 	mov.w	r2, #4294967295
 800877a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800877e:	f10a 0a01 	add.w	sl, sl, #1
 8008782:	9304      	str	r3, [sp, #16]
 8008784:	9307      	str	r3, [sp, #28]
 8008786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800878a:	931a      	str	r3, [sp, #104]	@ 0x68
 800878c:	4654      	mov	r4, sl
 800878e:	2205      	movs	r2, #5
 8008790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008794:	484e      	ldr	r0, [pc, #312]	@ (80088d0 <_svfiprintf_r+0x1e4>)
 8008796:	f000 fb1b 	bl	8008dd0 <memchr>
 800879a:	9a04      	ldr	r2, [sp, #16]
 800879c:	b9d8      	cbnz	r0, 80087d6 <_svfiprintf_r+0xea>
 800879e:	06d0      	lsls	r0, r2, #27
 80087a0:	bf44      	itt	mi
 80087a2:	2320      	movmi	r3, #32
 80087a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087a8:	0711      	lsls	r1, r2, #28
 80087aa:	bf44      	itt	mi
 80087ac:	232b      	movmi	r3, #43	@ 0x2b
 80087ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087b2:	f89a 3000 	ldrb.w	r3, [sl]
 80087b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b8:	d015      	beq.n	80087e6 <_svfiprintf_r+0xfa>
 80087ba:	4654      	mov	r4, sl
 80087bc:	2000      	movs	r0, #0
 80087be:	f04f 0c0a 	mov.w	ip, #10
 80087c2:	9a07      	ldr	r2, [sp, #28]
 80087c4:	4621      	mov	r1, r4
 80087c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ca:	3b30      	subs	r3, #48	@ 0x30
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	d94b      	bls.n	8008868 <_svfiprintf_r+0x17c>
 80087d0:	b1b0      	cbz	r0, 8008800 <_svfiprintf_r+0x114>
 80087d2:	9207      	str	r2, [sp, #28]
 80087d4:	e014      	b.n	8008800 <_svfiprintf_r+0x114>
 80087d6:	eba0 0308 	sub.w	r3, r0, r8
 80087da:	fa09 f303 	lsl.w	r3, r9, r3
 80087de:	4313      	orrs	r3, r2
 80087e0:	46a2      	mov	sl, r4
 80087e2:	9304      	str	r3, [sp, #16]
 80087e4:	e7d2      	b.n	800878c <_svfiprintf_r+0xa0>
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	1d19      	adds	r1, r3, #4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	9103      	str	r1, [sp, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bfbb      	ittet	lt
 80087f2:	425b      	neglt	r3, r3
 80087f4:	f042 0202 	orrlt.w	r2, r2, #2
 80087f8:	9307      	strge	r3, [sp, #28]
 80087fa:	9307      	strlt	r3, [sp, #28]
 80087fc:	bfb8      	it	lt
 80087fe:	9204      	strlt	r2, [sp, #16]
 8008800:	7823      	ldrb	r3, [r4, #0]
 8008802:	2b2e      	cmp	r3, #46	@ 0x2e
 8008804:	d10a      	bne.n	800881c <_svfiprintf_r+0x130>
 8008806:	7863      	ldrb	r3, [r4, #1]
 8008808:	2b2a      	cmp	r3, #42	@ 0x2a
 800880a:	d132      	bne.n	8008872 <_svfiprintf_r+0x186>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	3402      	adds	r4, #2
 8008810:	1d1a      	adds	r2, r3, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	9203      	str	r2, [sp, #12]
 8008816:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80088d4 <_svfiprintf_r+0x1e8>
 8008820:	2203      	movs	r2, #3
 8008822:	4650      	mov	r0, sl
 8008824:	7821      	ldrb	r1, [r4, #0]
 8008826:	f000 fad3 	bl	8008dd0 <memchr>
 800882a:	b138      	cbz	r0, 800883c <_svfiprintf_r+0x150>
 800882c:	2240      	movs	r2, #64	@ 0x40
 800882e:	9b04      	ldr	r3, [sp, #16]
 8008830:	eba0 000a 	sub.w	r0, r0, sl
 8008834:	4082      	lsls	r2, r0
 8008836:	4313      	orrs	r3, r2
 8008838:	3401      	adds	r4, #1
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008840:	2206      	movs	r2, #6
 8008842:	4825      	ldr	r0, [pc, #148]	@ (80088d8 <_svfiprintf_r+0x1ec>)
 8008844:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008848:	f000 fac2 	bl	8008dd0 <memchr>
 800884c:	2800      	cmp	r0, #0
 800884e:	d036      	beq.n	80088be <_svfiprintf_r+0x1d2>
 8008850:	4b22      	ldr	r3, [pc, #136]	@ (80088dc <_svfiprintf_r+0x1f0>)
 8008852:	bb1b      	cbnz	r3, 800889c <_svfiprintf_r+0x1b0>
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	3307      	adds	r3, #7
 8008858:	f023 0307 	bic.w	r3, r3, #7
 800885c:	3308      	adds	r3, #8
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008862:	4433      	add	r3, r6
 8008864:	9309      	str	r3, [sp, #36]	@ 0x24
 8008866:	e76a      	b.n	800873e <_svfiprintf_r+0x52>
 8008868:	460c      	mov	r4, r1
 800886a:	2001      	movs	r0, #1
 800886c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008870:	e7a8      	b.n	80087c4 <_svfiprintf_r+0xd8>
 8008872:	2300      	movs	r3, #0
 8008874:	f04f 0c0a 	mov.w	ip, #10
 8008878:	4619      	mov	r1, r3
 800887a:	3401      	adds	r4, #1
 800887c:	9305      	str	r3, [sp, #20]
 800887e:	4620      	mov	r0, r4
 8008880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008884:	3a30      	subs	r2, #48	@ 0x30
 8008886:	2a09      	cmp	r2, #9
 8008888:	d903      	bls.n	8008892 <_svfiprintf_r+0x1a6>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0c6      	beq.n	800881c <_svfiprintf_r+0x130>
 800888e:	9105      	str	r1, [sp, #20]
 8008890:	e7c4      	b.n	800881c <_svfiprintf_r+0x130>
 8008892:	4604      	mov	r4, r0
 8008894:	2301      	movs	r3, #1
 8008896:	fb0c 2101 	mla	r1, ip, r1, r2
 800889a:	e7f0      	b.n	800887e <_svfiprintf_r+0x192>
 800889c:	ab03      	add	r3, sp, #12
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	462a      	mov	r2, r5
 80088a2:	4638      	mov	r0, r7
 80088a4:	4b0e      	ldr	r3, [pc, #56]	@ (80088e0 <_svfiprintf_r+0x1f4>)
 80088a6:	a904      	add	r1, sp, #16
 80088a8:	f3af 8000 	nop.w
 80088ac:	1c42      	adds	r2, r0, #1
 80088ae:	4606      	mov	r6, r0
 80088b0:	d1d6      	bne.n	8008860 <_svfiprintf_r+0x174>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	065b      	lsls	r3, r3, #25
 80088b6:	f53f af2d 	bmi.w	8008714 <_svfiprintf_r+0x28>
 80088ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088bc:	e72c      	b.n	8008718 <_svfiprintf_r+0x2c>
 80088be:	ab03      	add	r3, sp, #12
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	462a      	mov	r2, r5
 80088c4:	4638      	mov	r0, r7
 80088c6:	4b06      	ldr	r3, [pc, #24]	@ (80088e0 <_svfiprintf_r+0x1f4>)
 80088c8:	a904      	add	r1, sp, #16
 80088ca:	f000 f87d 	bl	80089c8 <_printf_i>
 80088ce:	e7ed      	b.n	80088ac <_svfiprintf_r+0x1c0>
 80088d0:	080094d3 	.word	0x080094d3
 80088d4:	080094d9 	.word	0x080094d9
 80088d8:	080094dd 	.word	0x080094dd
 80088dc:	00000000 	.word	0x00000000
 80088e0:	08008635 	.word	0x08008635

080088e4 <_printf_common>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	4616      	mov	r6, r2
 80088ea:	4698      	mov	r8, r3
 80088ec:	688a      	ldr	r2, [r1, #8]
 80088ee:	690b      	ldr	r3, [r1, #16]
 80088f0:	4607      	mov	r7, r0
 80088f2:	4293      	cmp	r3, r2
 80088f4:	bfb8      	it	lt
 80088f6:	4613      	movlt	r3, r2
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088fe:	460c      	mov	r4, r1
 8008900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008904:	b10a      	cbz	r2, 800890a <_printf_common+0x26>
 8008906:	3301      	adds	r3, #1
 8008908:	6033      	str	r3, [r6, #0]
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	0699      	lsls	r1, r3, #26
 800890e:	bf42      	ittt	mi
 8008910:	6833      	ldrmi	r3, [r6, #0]
 8008912:	3302      	addmi	r3, #2
 8008914:	6033      	strmi	r3, [r6, #0]
 8008916:	6825      	ldr	r5, [r4, #0]
 8008918:	f015 0506 	ands.w	r5, r5, #6
 800891c:	d106      	bne.n	800892c <_printf_common+0x48>
 800891e:	f104 0a19 	add.w	sl, r4, #25
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	6832      	ldr	r2, [r6, #0]
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	42ab      	cmp	r3, r5
 800892a:	dc2b      	bgt.n	8008984 <_printf_common+0xa0>
 800892c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008930:	6822      	ldr	r2, [r4, #0]
 8008932:	3b00      	subs	r3, #0
 8008934:	bf18      	it	ne
 8008936:	2301      	movne	r3, #1
 8008938:	0692      	lsls	r2, r2, #26
 800893a:	d430      	bmi.n	800899e <_printf_common+0xba>
 800893c:	4641      	mov	r1, r8
 800893e:	4638      	mov	r0, r7
 8008940:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008944:	47c8      	blx	r9
 8008946:	3001      	adds	r0, #1
 8008948:	d023      	beq.n	8008992 <_printf_common+0xae>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	f003 0306 	and.w	r3, r3, #6
 8008952:	2b04      	cmp	r3, #4
 8008954:	bf14      	ite	ne
 8008956:	2500      	movne	r5, #0
 8008958:	6833      	ldreq	r3, [r6, #0]
 800895a:	f04f 0600 	mov.w	r6, #0
 800895e:	bf08      	it	eq
 8008960:	68e5      	ldreq	r5, [r4, #12]
 8008962:	f104 041a 	add.w	r4, r4, #26
 8008966:	bf08      	it	eq
 8008968:	1aed      	subeq	r5, r5, r3
 800896a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800896e:	bf08      	it	eq
 8008970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008974:	4293      	cmp	r3, r2
 8008976:	bfc4      	itt	gt
 8008978:	1a9b      	subgt	r3, r3, r2
 800897a:	18ed      	addgt	r5, r5, r3
 800897c:	42b5      	cmp	r5, r6
 800897e:	d11a      	bne.n	80089b6 <_printf_common+0xd2>
 8008980:	2000      	movs	r0, #0
 8008982:	e008      	b.n	8008996 <_printf_common+0xb2>
 8008984:	2301      	movs	r3, #1
 8008986:	4652      	mov	r2, sl
 8008988:	4641      	mov	r1, r8
 800898a:	4638      	mov	r0, r7
 800898c:	47c8      	blx	r9
 800898e:	3001      	adds	r0, #1
 8008990:	d103      	bne.n	800899a <_printf_common+0xb6>
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899a:	3501      	adds	r5, #1
 800899c:	e7c1      	b.n	8008922 <_printf_common+0x3e>
 800899e:	2030      	movs	r0, #48	@ 0x30
 80089a0:	18e1      	adds	r1, r4, r3
 80089a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089ac:	4422      	add	r2, r4
 80089ae:	3302      	adds	r3, #2
 80089b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089b4:	e7c2      	b.n	800893c <_printf_common+0x58>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4622      	mov	r2, r4
 80089ba:	4641      	mov	r1, r8
 80089bc:	4638      	mov	r0, r7
 80089be:	47c8      	blx	r9
 80089c0:	3001      	adds	r0, #1
 80089c2:	d0e6      	beq.n	8008992 <_printf_common+0xae>
 80089c4:	3601      	adds	r6, #1
 80089c6:	e7d9      	b.n	800897c <_printf_common+0x98>

080089c8 <_printf_i>:
 80089c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	7e0f      	ldrb	r7, [r1, #24]
 80089ce:	4691      	mov	r9, r2
 80089d0:	2f78      	cmp	r7, #120	@ 0x78
 80089d2:	4680      	mov	r8, r0
 80089d4:	460c      	mov	r4, r1
 80089d6:	469a      	mov	sl, r3
 80089d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089de:	d807      	bhi.n	80089f0 <_printf_i+0x28>
 80089e0:	2f62      	cmp	r7, #98	@ 0x62
 80089e2:	d80a      	bhi.n	80089fa <_printf_i+0x32>
 80089e4:	2f00      	cmp	r7, #0
 80089e6:	f000 80d3 	beq.w	8008b90 <_printf_i+0x1c8>
 80089ea:	2f58      	cmp	r7, #88	@ 0x58
 80089ec:	f000 80ba 	beq.w	8008b64 <_printf_i+0x19c>
 80089f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089f8:	e03a      	b.n	8008a70 <_printf_i+0xa8>
 80089fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089fe:	2b15      	cmp	r3, #21
 8008a00:	d8f6      	bhi.n	80089f0 <_printf_i+0x28>
 8008a02:	a101      	add	r1, pc, #4	@ (adr r1, 8008a08 <_printf_i+0x40>)
 8008a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a08:	08008a61 	.word	0x08008a61
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	080089f1 	.word	0x080089f1
 8008a14:	080089f1 	.word	0x080089f1
 8008a18:	080089f1 	.word	0x080089f1
 8008a1c:	080089f1 	.word	0x080089f1
 8008a20:	08008a75 	.word	0x08008a75
 8008a24:	080089f1 	.word	0x080089f1
 8008a28:	080089f1 	.word	0x080089f1
 8008a2c:	080089f1 	.word	0x080089f1
 8008a30:	080089f1 	.word	0x080089f1
 8008a34:	08008b77 	.word	0x08008b77
 8008a38:	08008a9f 	.word	0x08008a9f
 8008a3c:	08008b31 	.word	0x08008b31
 8008a40:	080089f1 	.word	0x080089f1
 8008a44:	080089f1 	.word	0x080089f1
 8008a48:	08008b99 	.word	0x08008b99
 8008a4c:	080089f1 	.word	0x080089f1
 8008a50:	08008a9f 	.word	0x08008a9f
 8008a54:	080089f1 	.word	0x080089f1
 8008a58:	080089f1 	.word	0x080089f1
 8008a5c:	08008b39 	.word	0x08008b39
 8008a60:	6833      	ldr	r3, [r6, #0]
 8008a62:	1d1a      	adds	r2, r3, #4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6032      	str	r2, [r6, #0]
 8008a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a70:	2301      	movs	r3, #1
 8008a72:	e09e      	b.n	8008bb2 <_printf_i+0x1ea>
 8008a74:	6833      	ldr	r3, [r6, #0]
 8008a76:	6820      	ldr	r0, [r4, #0]
 8008a78:	1d19      	adds	r1, r3, #4
 8008a7a:	6031      	str	r1, [r6, #0]
 8008a7c:	0606      	lsls	r6, r0, #24
 8008a7e:	d501      	bpl.n	8008a84 <_printf_i+0xbc>
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	e003      	b.n	8008a8c <_printf_i+0xc4>
 8008a84:	0645      	lsls	r5, r0, #25
 8008a86:	d5fb      	bpl.n	8008a80 <_printf_i+0xb8>
 8008a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a8c:	2d00      	cmp	r5, #0
 8008a8e:	da03      	bge.n	8008a98 <_printf_i+0xd0>
 8008a90:	232d      	movs	r3, #45	@ 0x2d
 8008a92:	426d      	negs	r5, r5
 8008a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a98:	230a      	movs	r3, #10
 8008a9a:	4859      	ldr	r0, [pc, #356]	@ (8008c00 <_printf_i+0x238>)
 8008a9c:	e011      	b.n	8008ac2 <_printf_i+0xfa>
 8008a9e:	6821      	ldr	r1, [r4, #0]
 8008aa0:	6833      	ldr	r3, [r6, #0]
 8008aa2:	0608      	lsls	r0, r1, #24
 8008aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008aa8:	d402      	bmi.n	8008ab0 <_printf_i+0xe8>
 8008aaa:	0649      	lsls	r1, r1, #25
 8008aac:	bf48      	it	mi
 8008aae:	b2ad      	uxthmi	r5, r5
 8008ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ab2:	6033      	str	r3, [r6, #0]
 8008ab4:	bf14      	ite	ne
 8008ab6:	230a      	movne	r3, #10
 8008ab8:	2308      	moveq	r3, #8
 8008aba:	4851      	ldr	r0, [pc, #324]	@ (8008c00 <_printf_i+0x238>)
 8008abc:	2100      	movs	r1, #0
 8008abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ac2:	6866      	ldr	r6, [r4, #4]
 8008ac4:	2e00      	cmp	r6, #0
 8008ac6:	bfa8      	it	ge
 8008ac8:	6821      	ldrge	r1, [r4, #0]
 8008aca:	60a6      	str	r6, [r4, #8]
 8008acc:	bfa4      	itt	ge
 8008ace:	f021 0104 	bicge.w	r1, r1, #4
 8008ad2:	6021      	strge	r1, [r4, #0]
 8008ad4:	b90d      	cbnz	r5, 8008ada <_printf_i+0x112>
 8008ad6:	2e00      	cmp	r6, #0
 8008ad8:	d04b      	beq.n	8008b72 <_printf_i+0x1aa>
 8008ada:	4616      	mov	r6, r2
 8008adc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ae0:	fb03 5711 	mls	r7, r3, r1, r5
 8008ae4:	5dc7      	ldrb	r7, [r0, r7]
 8008ae6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008aea:	462f      	mov	r7, r5
 8008aec:	42bb      	cmp	r3, r7
 8008aee:	460d      	mov	r5, r1
 8008af0:	d9f4      	bls.n	8008adc <_printf_i+0x114>
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d10b      	bne.n	8008b0e <_printf_i+0x146>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	07df      	lsls	r7, r3, #31
 8008afa:	d508      	bpl.n	8008b0e <_printf_i+0x146>
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	6861      	ldr	r1, [r4, #4]
 8008b00:	4299      	cmp	r1, r3
 8008b02:	bfde      	ittt	le
 8008b04:	2330      	movle	r3, #48	@ 0x30
 8008b06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b0e:	1b92      	subs	r2, r2, r6
 8008b10:	6122      	str	r2, [r4, #16]
 8008b12:	464b      	mov	r3, r9
 8008b14:	4621      	mov	r1, r4
 8008b16:	4640      	mov	r0, r8
 8008b18:	f8cd a000 	str.w	sl, [sp]
 8008b1c:	aa03      	add	r2, sp, #12
 8008b1e:	f7ff fee1 	bl	80088e4 <_printf_common>
 8008b22:	3001      	adds	r0, #1
 8008b24:	d14a      	bne.n	8008bbc <_printf_i+0x1f4>
 8008b26:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2a:	b004      	add	sp, #16
 8008b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	f043 0320 	orr.w	r3, r3, #32
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	2778      	movs	r7, #120	@ 0x78
 8008b3a:	4832      	ldr	r0, [pc, #200]	@ (8008c04 <_printf_i+0x23c>)
 8008b3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	6831      	ldr	r1, [r6, #0]
 8008b44:	061f      	lsls	r7, r3, #24
 8008b46:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b4a:	d402      	bmi.n	8008b52 <_printf_i+0x18a>
 8008b4c:	065f      	lsls	r7, r3, #25
 8008b4e:	bf48      	it	mi
 8008b50:	b2ad      	uxthmi	r5, r5
 8008b52:	6031      	str	r1, [r6, #0]
 8008b54:	07d9      	lsls	r1, r3, #31
 8008b56:	bf44      	itt	mi
 8008b58:	f043 0320 	orrmi.w	r3, r3, #32
 8008b5c:	6023      	strmi	r3, [r4, #0]
 8008b5e:	b11d      	cbz	r5, 8008b68 <_printf_i+0x1a0>
 8008b60:	2310      	movs	r3, #16
 8008b62:	e7ab      	b.n	8008abc <_printf_i+0xf4>
 8008b64:	4826      	ldr	r0, [pc, #152]	@ (8008c00 <_printf_i+0x238>)
 8008b66:	e7e9      	b.n	8008b3c <_printf_i+0x174>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	f023 0320 	bic.w	r3, r3, #32
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	e7f6      	b.n	8008b60 <_printf_i+0x198>
 8008b72:	4616      	mov	r6, r2
 8008b74:	e7bd      	b.n	8008af2 <_printf_i+0x12a>
 8008b76:	6833      	ldr	r3, [r6, #0]
 8008b78:	6825      	ldr	r5, [r4, #0]
 8008b7a:	1d18      	adds	r0, r3, #4
 8008b7c:	6961      	ldr	r1, [r4, #20]
 8008b7e:	6030      	str	r0, [r6, #0]
 8008b80:	062e      	lsls	r6, r5, #24
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	d501      	bpl.n	8008b8a <_printf_i+0x1c2>
 8008b86:	6019      	str	r1, [r3, #0]
 8008b88:	e002      	b.n	8008b90 <_printf_i+0x1c8>
 8008b8a:	0668      	lsls	r0, r5, #25
 8008b8c:	d5fb      	bpl.n	8008b86 <_printf_i+0x1be>
 8008b8e:	8019      	strh	r1, [r3, #0]
 8008b90:	2300      	movs	r3, #0
 8008b92:	4616      	mov	r6, r2
 8008b94:	6123      	str	r3, [r4, #16]
 8008b96:	e7bc      	b.n	8008b12 <_printf_i+0x14a>
 8008b98:	6833      	ldr	r3, [r6, #0]
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	6032      	str	r2, [r6, #0]
 8008ba0:	681e      	ldr	r6, [r3, #0]
 8008ba2:	6862      	ldr	r2, [r4, #4]
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f000 f913 	bl	8008dd0 <memchr>
 8008baa:	b108      	cbz	r0, 8008bb0 <_printf_i+0x1e8>
 8008bac:	1b80      	subs	r0, r0, r6
 8008bae:	6060      	str	r0, [r4, #4]
 8008bb0:	6863      	ldr	r3, [r4, #4]
 8008bb2:	6123      	str	r3, [r4, #16]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bba:	e7aa      	b.n	8008b12 <_printf_i+0x14a>
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	47d0      	blx	sl
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d0ad      	beq.n	8008b26 <_printf_i+0x15e>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	079b      	lsls	r3, r3, #30
 8008bce:	d413      	bmi.n	8008bf8 <_printf_i+0x230>
 8008bd0:	68e0      	ldr	r0, [r4, #12]
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	4298      	cmp	r0, r3
 8008bd6:	bfb8      	it	lt
 8008bd8:	4618      	movlt	r0, r3
 8008bda:	e7a6      	b.n	8008b2a <_printf_i+0x162>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4632      	mov	r2, r6
 8008be0:	4649      	mov	r1, r9
 8008be2:	4640      	mov	r0, r8
 8008be4:	47d0      	blx	sl
 8008be6:	3001      	adds	r0, #1
 8008be8:	d09d      	beq.n	8008b26 <_printf_i+0x15e>
 8008bea:	3501      	adds	r5, #1
 8008bec:	68e3      	ldr	r3, [r4, #12]
 8008bee:	9903      	ldr	r1, [sp, #12]
 8008bf0:	1a5b      	subs	r3, r3, r1
 8008bf2:	42ab      	cmp	r3, r5
 8008bf4:	dcf2      	bgt.n	8008bdc <_printf_i+0x214>
 8008bf6:	e7eb      	b.n	8008bd0 <_printf_i+0x208>
 8008bf8:	2500      	movs	r5, #0
 8008bfa:	f104 0619 	add.w	r6, r4, #25
 8008bfe:	e7f5      	b.n	8008bec <_printf_i+0x224>
 8008c00:	080094e4 	.word	0x080094e4
 8008c04:	080094f5 	.word	0x080094f5

08008c08 <__sflush_r>:
 8008c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	0716      	lsls	r6, r2, #28
 8008c10:	4605      	mov	r5, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	d454      	bmi.n	8008cc0 <__sflush_r+0xb8>
 8008c16:	684b      	ldr	r3, [r1, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dc02      	bgt.n	8008c22 <__sflush_r+0x1a>
 8008c1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dd48      	ble.n	8008cb4 <__sflush_r+0xac>
 8008c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c24:	2e00      	cmp	r6, #0
 8008c26:	d045      	beq.n	8008cb4 <__sflush_r+0xac>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c2e:	682f      	ldr	r7, [r5, #0]
 8008c30:	6a21      	ldr	r1, [r4, #32]
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	d030      	beq.n	8008c98 <__sflush_r+0x90>
 8008c36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	0759      	lsls	r1, r3, #29
 8008c3c:	d505      	bpl.n	8008c4a <__sflush_r+0x42>
 8008c3e:	6863      	ldr	r3, [r4, #4]
 8008c40:	1ad2      	subs	r2, r2, r3
 8008c42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c44:	b10b      	cbz	r3, 8008c4a <__sflush_r+0x42>
 8008c46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c48:	1ad2      	subs	r2, r2, r3
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c50:	6a21      	ldr	r1, [r4, #32]
 8008c52:	47b0      	blx	r6
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	d106      	bne.n	8008c68 <__sflush_r+0x60>
 8008c5a:	6829      	ldr	r1, [r5, #0]
 8008c5c:	291d      	cmp	r1, #29
 8008c5e:	d82b      	bhi.n	8008cb8 <__sflush_r+0xb0>
 8008c60:	4a28      	ldr	r2, [pc, #160]	@ (8008d04 <__sflush_r+0xfc>)
 8008c62:	410a      	asrs	r2, r1
 8008c64:	07d6      	lsls	r6, r2, #31
 8008c66:	d427      	bmi.n	8008cb8 <__sflush_r+0xb0>
 8008c68:	2200      	movs	r2, #0
 8008c6a:	6062      	str	r2, [r4, #4]
 8008c6c:	6922      	ldr	r2, [r4, #16]
 8008c6e:	04d9      	lsls	r1, r3, #19
 8008c70:	6022      	str	r2, [r4, #0]
 8008c72:	d504      	bpl.n	8008c7e <__sflush_r+0x76>
 8008c74:	1c42      	adds	r2, r0, #1
 8008c76:	d101      	bne.n	8008c7c <__sflush_r+0x74>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	b903      	cbnz	r3, 8008c7e <__sflush_r+0x76>
 8008c7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c80:	602f      	str	r7, [r5, #0]
 8008c82:	b1b9      	cbz	r1, 8008cb4 <__sflush_r+0xac>
 8008c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	d002      	beq.n	8008c92 <__sflush_r+0x8a>
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f7ff fbd3 	bl	8008438 <_free_r>
 8008c92:	2300      	movs	r3, #0
 8008c94:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c96:	e00d      	b.n	8008cb4 <__sflush_r+0xac>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	47b0      	blx	r6
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	1c50      	adds	r0, r2, #1
 8008ca2:	d1c9      	bne.n	8008c38 <__sflush_r+0x30>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0c6      	beq.n	8008c38 <__sflush_r+0x30>
 8008caa:	2b1d      	cmp	r3, #29
 8008cac:	d001      	beq.n	8008cb2 <__sflush_r+0xaa>
 8008cae:	2b16      	cmp	r3, #22
 8008cb0:	d11d      	bne.n	8008cee <__sflush_r+0xe6>
 8008cb2:	602f      	str	r7, [r5, #0]
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	e021      	b.n	8008cfc <__sflush_r+0xf4>
 8008cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cbc:	b21b      	sxth	r3, r3
 8008cbe:	e01a      	b.n	8008cf6 <__sflush_r+0xee>
 8008cc0:	690f      	ldr	r7, [r1, #16]
 8008cc2:	2f00      	cmp	r7, #0
 8008cc4:	d0f6      	beq.n	8008cb4 <__sflush_r+0xac>
 8008cc6:	0793      	lsls	r3, r2, #30
 8008cc8:	bf18      	it	ne
 8008cca:	2300      	movne	r3, #0
 8008ccc:	680e      	ldr	r6, [r1, #0]
 8008cce:	bf08      	it	eq
 8008cd0:	694b      	ldreq	r3, [r1, #20]
 8008cd2:	1bf6      	subs	r6, r6, r7
 8008cd4:	600f      	str	r7, [r1, #0]
 8008cd6:	608b      	str	r3, [r1, #8]
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	ddeb      	ble.n	8008cb4 <__sflush_r+0xac>
 8008cdc:	4633      	mov	r3, r6
 8008cde:	463a      	mov	r2, r7
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	6a21      	ldr	r1, [r4, #32]
 8008ce4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008ce8:	47e0      	blx	ip
 8008cea:	2800      	cmp	r0, #0
 8008cec:	dc07      	bgt.n	8008cfe <__sflush_r+0xf6>
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfa:	81a3      	strh	r3, [r4, #12]
 8008cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cfe:	4407      	add	r7, r0
 8008d00:	1a36      	subs	r6, r6, r0
 8008d02:	e7e9      	b.n	8008cd8 <__sflush_r+0xd0>
 8008d04:	dfbffffe 	.word	0xdfbffffe

08008d08 <_fflush_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	690b      	ldr	r3, [r1, #16]
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	b913      	cbnz	r3, 8008d18 <_fflush_r+0x10>
 8008d12:	2500      	movs	r5, #0
 8008d14:	4628      	mov	r0, r5
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	b118      	cbz	r0, 8008d22 <_fflush_r+0x1a>
 8008d1a:	6a03      	ldr	r3, [r0, #32]
 8008d1c:	b90b      	cbnz	r3, 8008d22 <_fflush_r+0x1a>
 8008d1e:	f7ff fa49 	bl	80081b4 <__sinit>
 8008d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d0f3      	beq.n	8008d12 <_fflush_r+0xa>
 8008d2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d2c:	07d0      	lsls	r0, r2, #31
 8008d2e:	d404      	bmi.n	8008d3a <_fflush_r+0x32>
 8008d30:	0599      	lsls	r1, r3, #22
 8008d32:	d402      	bmi.n	8008d3a <_fflush_r+0x32>
 8008d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d36:	f7ff fb50 	bl	80083da <__retarget_lock_acquire_recursive>
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	f7ff ff63 	bl	8008c08 <__sflush_r>
 8008d42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d44:	4605      	mov	r5, r0
 8008d46:	07da      	lsls	r2, r3, #31
 8008d48:	d4e4      	bmi.n	8008d14 <_fflush_r+0xc>
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	059b      	lsls	r3, r3, #22
 8008d4e:	d4e1      	bmi.n	8008d14 <_fflush_r+0xc>
 8008d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d52:	f7ff fb43 	bl	80083dc <__retarget_lock_release_recursive>
 8008d56:	e7dd      	b.n	8008d14 <_fflush_r+0xc>

08008d58 <fiprintf>:
 8008d58:	b40e      	push	{r1, r2, r3}
 8008d5a:	b503      	push	{r0, r1, lr}
 8008d5c:	4601      	mov	r1, r0
 8008d5e:	ab03      	add	r3, sp, #12
 8008d60:	4805      	ldr	r0, [pc, #20]	@ (8008d78 <fiprintf+0x20>)
 8008d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	f000 f89b 	bl	8008ea4 <_vfiprintf_r>
 8008d6e:	b002      	add	sp, #8
 8008d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d74:	b003      	add	sp, #12
 8008d76:	4770      	bx	lr
 8008d78:	20000034 	.word	0x20000034

08008d7c <memmove>:
 8008d7c:	4288      	cmp	r0, r1
 8008d7e:	b510      	push	{r4, lr}
 8008d80:	eb01 0402 	add.w	r4, r1, r2
 8008d84:	d902      	bls.n	8008d8c <memmove+0x10>
 8008d86:	4284      	cmp	r4, r0
 8008d88:	4623      	mov	r3, r4
 8008d8a:	d807      	bhi.n	8008d9c <memmove+0x20>
 8008d8c:	1e43      	subs	r3, r0, #1
 8008d8e:	42a1      	cmp	r1, r4
 8008d90:	d008      	beq.n	8008da4 <memmove+0x28>
 8008d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d9a:	e7f8      	b.n	8008d8e <memmove+0x12>
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	4402      	add	r2, r0
 8008da0:	428a      	cmp	r2, r1
 8008da2:	d100      	bne.n	8008da6 <memmove+0x2a>
 8008da4:	bd10      	pop	{r4, pc}
 8008da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dae:	e7f7      	b.n	8008da0 <memmove+0x24>

08008db0 <_sbrk_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	2300      	movs	r3, #0
 8008db4:	4d05      	ldr	r5, [pc, #20]	@ (8008dcc <_sbrk_r+0x1c>)
 8008db6:	4604      	mov	r4, r0
 8008db8:	4608      	mov	r0, r1
 8008dba:	602b      	str	r3, [r5, #0]
 8008dbc:	f7fa fd62 	bl	8003884 <_sbrk>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d102      	bne.n	8008dca <_sbrk_r+0x1a>
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	b103      	cbz	r3, 8008dca <_sbrk_r+0x1a>
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	20000790 	.word	0x20000790

08008dd0 <memchr>:
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	b510      	push	{r4, lr}
 8008dd4:	b2c9      	uxtb	r1, r1
 8008dd6:	4402      	add	r2, r0
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	d101      	bne.n	8008de2 <memchr+0x12>
 8008dde:	2000      	movs	r0, #0
 8008de0:	e003      	b.n	8008dea <memchr+0x1a>
 8008de2:	7804      	ldrb	r4, [r0, #0]
 8008de4:	3301      	adds	r3, #1
 8008de6:	428c      	cmp	r4, r1
 8008de8:	d1f6      	bne.n	8008dd8 <memchr+0x8>
 8008dea:	bd10      	pop	{r4, pc}

08008dec <abort>:
 8008dec:	2006      	movs	r0, #6
 8008dee:	b508      	push	{r3, lr}
 8008df0:	f000 fa2c 	bl	800924c <raise>
 8008df4:	2001      	movs	r0, #1
 8008df6:	f7fa fcd0 	bl	800379a <_exit>

08008dfa <_realloc_r>:
 8008dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfe:	4680      	mov	r8, r0
 8008e00:	4615      	mov	r5, r2
 8008e02:	460c      	mov	r4, r1
 8008e04:	b921      	cbnz	r1, 8008e10 <_realloc_r+0x16>
 8008e06:	4611      	mov	r1, r2
 8008e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	f7ff bb86 	b.w	800851c <_malloc_r>
 8008e10:	b92a      	cbnz	r2, 8008e1e <_realloc_r+0x24>
 8008e12:	f7ff fb11 	bl	8008438 <_free_r>
 8008e16:	2400      	movs	r4, #0
 8008e18:	4620      	mov	r0, r4
 8008e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1e:	f000 fa31 	bl	8009284 <_malloc_usable_size_r>
 8008e22:	4285      	cmp	r5, r0
 8008e24:	4606      	mov	r6, r0
 8008e26:	d802      	bhi.n	8008e2e <_realloc_r+0x34>
 8008e28:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e2c:	d8f4      	bhi.n	8008e18 <_realloc_r+0x1e>
 8008e2e:	4629      	mov	r1, r5
 8008e30:	4640      	mov	r0, r8
 8008e32:	f7ff fb73 	bl	800851c <_malloc_r>
 8008e36:	4607      	mov	r7, r0
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d0ec      	beq.n	8008e16 <_realloc_r+0x1c>
 8008e3c:	42b5      	cmp	r5, r6
 8008e3e:	462a      	mov	r2, r5
 8008e40:	4621      	mov	r1, r4
 8008e42:	bf28      	it	cs
 8008e44:	4632      	movcs	r2, r6
 8008e46:	f7ff faca 	bl	80083de <memcpy>
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	f7ff faf3 	bl	8008438 <_free_r>
 8008e52:	463c      	mov	r4, r7
 8008e54:	e7e0      	b.n	8008e18 <_realloc_r+0x1e>

08008e56 <__sfputc_r>:
 8008e56:	6893      	ldr	r3, [r2, #8]
 8008e58:	b410      	push	{r4}
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	6093      	str	r3, [r2, #8]
 8008e60:	da07      	bge.n	8008e72 <__sfputc_r+0x1c>
 8008e62:	6994      	ldr	r4, [r2, #24]
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	db01      	blt.n	8008e6c <__sfputc_r+0x16>
 8008e68:	290a      	cmp	r1, #10
 8008e6a:	d102      	bne.n	8008e72 <__sfputc_r+0x1c>
 8008e6c:	bc10      	pop	{r4}
 8008e6e:	f000 b931 	b.w	80090d4 <__swbuf_r>
 8008e72:	6813      	ldr	r3, [r2, #0]
 8008e74:	1c58      	adds	r0, r3, #1
 8008e76:	6010      	str	r0, [r2, #0]
 8008e78:	7019      	strb	r1, [r3, #0]
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	bc10      	pop	{r4}
 8008e7e:	4770      	bx	lr

08008e80 <__sfputs_r>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	4606      	mov	r6, r0
 8008e84:	460f      	mov	r7, r1
 8008e86:	4614      	mov	r4, r2
 8008e88:	18d5      	adds	r5, r2, r3
 8008e8a:	42ac      	cmp	r4, r5
 8008e8c:	d101      	bne.n	8008e92 <__sfputs_r+0x12>
 8008e8e:	2000      	movs	r0, #0
 8008e90:	e007      	b.n	8008ea2 <__sfputs_r+0x22>
 8008e92:	463a      	mov	r2, r7
 8008e94:	4630      	mov	r0, r6
 8008e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9a:	f7ff ffdc 	bl	8008e56 <__sfputc_r>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d1f3      	bne.n	8008e8a <__sfputs_r+0xa>
 8008ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ea4 <_vfiprintf_r>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	4614      	mov	r4, r2
 8008eac:	4698      	mov	r8, r3
 8008eae:	4606      	mov	r6, r0
 8008eb0:	b09d      	sub	sp, #116	@ 0x74
 8008eb2:	b118      	cbz	r0, 8008ebc <_vfiprintf_r+0x18>
 8008eb4:	6a03      	ldr	r3, [r0, #32]
 8008eb6:	b90b      	cbnz	r3, 8008ebc <_vfiprintf_r+0x18>
 8008eb8:	f7ff f97c 	bl	80081b4 <__sinit>
 8008ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ebe:	07d9      	lsls	r1, r3, #31
 8008ec0:	d405      	bmi.n	8008ece <_vfiprintf_r+0x2a>
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	059a      	lsls	r2, r3, #22
 8008ec6:	d402      	bmi.n	8008ece <_vfiprintf_r+0x2a>
 8008ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eca:	f7ff fa86 	bl	80083da <__retarget_lock_acquire_recursive>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	071b      	lsls	r3, r3, #28
 8008ed2:	d501      	bpl.n	8008ed8 <_vfiprintf_r+0x34>
 8008ed4:	692b      	ldr	r3, [r5, #16]
 8008ed6:	b99b      	cbnz	r3, 8008f00 <_vfiprintf_r+0x5c>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4630      	mov	r0, r6
 8008edc:	f000 f938 	bl	8009150 <__swsetup_r>
 8008ee0:	b170      	cbz	r0, 8008f00 <_vfiprintf_r+0x5c>
 8008ee2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ee4:	07dc      	lsls	r4, r3, #31
 8008ee6:	d504      	bpl.n	8008ef2 <_vfiprintf_r+0x4e>
 8008ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eec:	b01d      	add	sp, #116	@ 0x74
 8008eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	0598      	lsls	r0, r3, #22
 8008ef6:	d4f7      	bmi.n	8008ee8 <_vfiprintf_r+0x44>
 8008ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008efa:	f7ff fa6f 	bl	80083dc <__retarget_lock_release_recursive>
 8008efe:	e7f3      	b.n	8008ee8 <_vfiprintf_r+0x44>
 8008f00:	2300      	movs	r3, #0
 8008f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f04:	2320      	movs	r3, #32
 8008f06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f0a:	2330      	movs	r3, #48	@ 0x30
 8008f0c:	f04f 0901 	mov.w	r9, #1
 8008f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f14:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80090c0 <_vfiprintf_r+0x21c>
 8008f18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	469a      	mov	sl, r3
 8008f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f24:	b10a      	cbz	r2, 8008f2a <_vfiprintf_r+0x86>
 8008f26:	2a25      	cmp	r2, #37	@ 0x25
 8008f28:	d1f9      	bne.n	8008f1e <_vfiprintf_r+0x7a>
 8008f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f2e:	d00b      	beq.n	8008f48 <_vfiprintf_r+0xa4>
 8008f30:	465b      	mov	r3, fp
 8008f32:	4622      	mov	r2, r4
 8008f34:	4629      	mov	r1, r5
 8008f36:	4630      	mov	r0, r6
 8008f38:	f7ff ffa2 	bl	8008e80 <__sfputs_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f000 80a7 	beq.w	8009090 <_vfiprintf_r+0x1ec>
 8008f42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f44:	445a      	add	r2, fp
 8008f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f48:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 809f 	beq.w	8009090 <_vfiprintf_r+0x1ec>
 8008f52:	2300      	movs	r3, #0
 8008f54:	f04f 32ff 	mov.w	r2, #4294967295
 8008f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f5c:	f10a 0a01 	add.w	sl, sl, #1
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	9307      	str	r3, [sp, #28]
 8008f64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f68:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f6a:	4654      	mov	r4, sl
 8008f6c:	2205      	movs	r2, #5
 8008f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f72:	4853      	ldr	r0, [pc, #332]	@ (80090c0 <_vfiprintf_r+0x21c>)
 8008f74:	f7ff ff2c 	bl	8008dd0 <memchr>
 8008f78:	9a04      	ldr	r2, [sp, #16]
 8008f7a:	b9d8      	cbnz	r0, 8008fb4 <_vfiprintf_r+0x110>
 8008f7c:	06d1      	lsls	r1, r2, #27
 8008f7e:	bf44      	itt	mi
 8008f80:	2320      	movmi	r3, #32
 8008f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f86:	0713      	lsls	r3, r2, #28
 8008f88:	bf44      	itt	mi
 8008f8a:	232b      	movmi	r3, #43	@ 0x2b
 8008f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f90:	f89a 3000 	ldrb.w	r3, [sl]
 8008f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f96:	d015      	beq.n	8008fc4 <_vfiprintf_r+0x120>
 8008f98:	4654      	mov	r4, sl
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	f04f 0c0a 	mov.w	ip, #10
 8008fa0:	9a07      	ldr	r2, [sp, #28]
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa8:	3b30      	subs	r3, #48	@ 0x30
 8008faa:	2b09      	cmp	r3, #9
 8008fac:	d94b      	bls.n	8009046 <_vfiprintf_r+0x1a2>
 8008fae:	b1b0      	cbz	r0, 8008fde <_vfiprintf_r+0x13a>
 8008fb0:	9207      	str	r2, [sp, #28]
 8008fb2:	e014      	b.n	8008fde <_vfiprintf_r+0x13a>
 8008fb4:	eba0 0308 	sub.w	r3, r0, r8
 8008fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	46a2      	mov	sl, r4
 8008fc0:	9304      	str	r3, [sp, #16]
 8008fc2:	e7d2      	b.n	8008f6a <_vfiprintf_r+0xc6>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	1d19      	adds	r1, r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	9103      	str	r1, [sp, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	bfbb      	ittet	lt
 8008fd0:	425b      	neglt	r3, r3
 8008fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8008fd6:	9307      	strge	r3, [sp, #28]
 8008fd8:	9307      	strlt	r3, [sp, #28]
 8008fda:	bfb8      	it	lt
 8008fdc:	9204      	strlt	r2, [sp, #16]
 8008fde:	7823      	ldrb	r3, [r4, #0]
 8008fe0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fe2:	d10a      	bne.n	8008ffa <_vfiprintf_r+0x156>
 8008fe4:	7863      	ldrb	r3, [r4, #1]
 8008fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe8:	d132      	bne.n	8009050 <_vfiprintf_r+0x1ac>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	3402      	adds	r4, #2
 8008fee:	1d1a      	adds	r2, r3, #4
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	9203      	str	r2, [sp, #12]
 8008ff4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ff8:	9305      	str	r3, [sp, #20]
 8008ffa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80090c4 <_vfiprintf_r+0x220>
 8008ffe:	2203      	movs	r2, #3
 8009000:	4650      	mov	r0, sl
 8009002:	7821      	ldrb	r1, [r4, #0]
 8009004:	f7ff fee4 	bl	8008dd0 <memchr>
 8009008:	b138      	cbz	r0, 800901a <_vfiprintf_r+0x176>
 800900a:	2240      	movs	r2, #64	@ 0x40
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	eba0 000a 	sub.w	r0, r0, sl
 8009012:	4082      	lsls	r2, r0
 8009014:	4313      	orrs	r3, r2
 8009016:	3401      	adds	r4, #1
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901e:	2206      	movs	r2, #6
 8009020:	4829      	ldr	r0, [pc, #164]	@ (80090c8 <_vfiprintf_r+0x224>)
 8009022:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009026:	f7ff fed3 	bl	8008dd0 <memchr>
 800902a:	2800      	cmp	r0, #0
 800902c:	d03f      	beq.n	80090ae <_vfiprintf_r+0x20a>
 800902e:	4b27      	ldr	r3, [pc, #156]	@ (80090cc <_vfiprintf_r+0x228>)
 8009030:	bb1b      	cbnz	r3, 800907a <_vfiprintf_r+0x1d6>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	3307      	adds	r3, #7
 8009036:	f023 0307 	bic.w	r3, r3, #7
 800903a:	3308      	adds	r3, #8
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009040:	443b      	add	r3, r7
 8009042:	9309      	str	r3, [sp, #36]	@ 0x24
 8009044:	e76a      	b.n	8008f1c <_vfiprintf_r+0x78>
 8009046:	460c      	mov	r4, r1
 8009048:	2001      	movs	r0, #1
 800904a:	fb0c 3202 	mla	r2, ip, r2, r3
 800904e:	e7a8      	b.n	8008fa2 <_vfiprintf_r+0xfe>
 8009050:	2300      	movs	r3, #0
 8009052:	f04f 0c0a 	mov.w	ip, #10
 8009056:	4619      	mov	r1, r3
 8009058:	3401      	adds	r4, #1
 800905a:	9305      	str	r3, [sp, #20]
 800905c:	4620      	mov	r0, r4
 800905e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009062:	3a30      	subs	r2, #48	@ 0x30
 8009064:	2a09      	cmp	r2, #9
 8009066:	d903      	bls.n	8009070 <_vfiprintf_r+0x1cc>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0c6      	beq.n	8008ffa <_vfiprintf_r+0x156>
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	e7c4      	b.n	8008ffa <_vfiprintf_r+0x156>
 8009070:	4604      	mov	r4, r0
 8009072:	2301      	movs	r3, #1
 8009074:	fb0c 2101 	mla	r1, ip, r1, r2
 8009078:	e7f0      	b.n	800905c <_vfiprintf_r+0x1b8>
 800907a:	ab03      	add	r3, sp, #12
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	462a      	mov	r2, r5
 8009080:	4630      	mov	r0, r6
 8009082:	4b13      	ldr	r3, [pc, #76]	@ (80090d0 <_vfiprintf_r+0x22c>)
 8009084:	a904      	add	r1, sp, #16
 8009086:	f3af 8000 	nop.w
 800908a:	4607      	mov	r7, r0
 800908c:	1c78      	adds	r0, r7, #1
 800908e:	d1d6      	bne.n	800903e <_vfiprintf_r+0x19a>
 8009090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009092:	07d9      	lsls	r1, r3, #31
 8009094:	d405      	bmi.n	80090a2 <_vfiprintf_r+0x1fe>
 8009096:	89ab      	ldrh	r3, [r5, #12]
 8009098:	059a      	lsls	r2, r3, #22
 800909a:	d402      	bmi.n	80090a2 <_vfiprintf_r+0x1fe>
 800909c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800909e:	f7ff f99d 	bl	80083dc <__retarget_lock_release_recursive>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	065b      	lsls	r3, r3, #25
 80090a6:	f53f af1f 	bmi.w	8008ee8 <_vfiprintf_r+0x44>
 80090aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090ac:	e71e      	b.n	8008eec <_vfiprintf_r+0x48>
 80090ae:	ab03      	add	r3, sp, #12
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	462a      	mov	r2, r5
 80090b4:	4630      	mov	r0, r6
 80090b6:	4b06      	ldr	r3, [pc, #24]	@ (80090d0 <_vfiprintf_r+0x22c>)
 80090b8:	a904      	add	r1, sp, #16
 80090ba:	f7ff fc85 	bl	80089c8 <_printf_i>
 80090be:	e7e4      	b.n	800908a <_vfiprintf_r+0x1e6>
 80090c0:	080094d3 	.word	0x080094d3
 80090c4:	080094d9 	.word	0x080094d9
 80090c8:	080094dd 	.word	0x080094dd
 80090cc:	00000000 	.word	0x00000000
 80090d0:	08008e81 	.word	0x08008e81

080090d4 <__swbuf_r>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	460e      	mov	r6, r1
 80090d8:	4614      	mov	r4, r2
 80090da:	4605      	mov	r5, r0
 80090dc:	b118      	cbz	r0, 80090e6 <__swbuf_r+0x12>
 80090de:	6a03      	ldr	r3, [r0, #32]
 80090e0:	b90b      	cbnz	r3, 80090e6 <__swbuf_r+0x12>
 80090e2:	f7ff f867 	bl	80081b4 <__sinit>
 80090e6:	69a3      	ldr	r3, [r4, #24]
 80090e8:	60a3      	str	r3, [r4, #8]
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	071a      	lsls	r2, r3, #28
 80090ee:	d501      	bpl.n	80090f4 <__swbuf_r+0x20>
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	b943      	cbnz	r3, 8009106 <__swbuf_r+0x32>
 80090f4:	4621      	mov	r1, r4
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 f82a 	bl	8009150 <__swsetup_r>
 80090fc:	b118      	cbz	r0, 8009106 <__swbuf_r+0x32>
 80090fe:	f04f 37ff 	mov.w	r7, #4294967295
 8009102:	4638      	mov	r0, r7
 8009104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	6922      	ldr	r2, [r4, #16]
 800910a:	b2f6      	uxtb	r6, r6
 800910c:	1a98      	subs	r0, r3, r2
 800910e:	6963      	ldr	r3, [r4, #20]
 8009110:	4637      	mov	r7, r6
 8009112:	4283      	cmp	r3, r0
 8009114:	dc05      	bgt.n	8009122 <__swbuf_r+0x4e>
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f7ff fdf5 	bl	8008d08 <_fflush_r>
 800911e:	2800      	cmp	r0, #0
 8009120:	d1ed      	bne.n	80090fe <__swbuf_r+0x2a>
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	3b01      	subs	r3, #1
 8009126:	60a3      	str	r3, [r4, #8]
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	6022      	str	r2, [r4, #0]
 800912e:	701e      	strb	r6, [r3, #0]
 8009130:	6962      	ldr	r2, [r4, #20]
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	429a      	cmp	r2, r3
 8009136:	d004      	beq.n	8009142 <__swbuf_r+0x6e>
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	07db      	lsls	r3, r3, #31
 800913c:	d5e1      	bpl.n	8009102 <__swbuf_r+0x2e>
 800913e:	2e0a      	cmp	r6, #10
 8009140:	d1df      	bne.n	8009102 <__swbuf_r+0x2e>
 8009142:	4621      	mov	r1, r4
 8009144:	4628      	mov	r0, r5
 8009146:	f7ff fddf 	bl	8008d08 <_fflush_r>
 800914a:	2800      	cmp	r0, #0
 800914c:	d0d9      	beq.n	8009102 <__swbuf_r+0x2e>
 800914e:	e7d6      	b.n	80090fe <__swbuf_r+0x2a>

08009150 <__swsetup_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4b29      	ldr	r3, [pc, #164]	@ (80091f8 <__swsetup_r+0xa8>)
 8009154:	4605      	mov	r5, r0
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	460c      	mov	r4, r1
 800915a:	b118      	cbz	r0, 8009164 <__swsetup_r+0x14>
 800915c:	6a03      	ldr	r3, [r0, #32]
 800915e:	b90b      	cbnz	r3, 8009164 <__swsetup_r+0x14>
 8009160:	f7ff f828 	bl	80081b4 <__sinit>
 8009164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009168:	0719      	lsls	r1, r3, #28
 800916a:	d422      	bmi.n	80091b2 <__swsetup_r+0x62>
 800916c:	06da      	lsls	r2, r3, #27
 800916e:	d407      	bmi.n	8009180 <__swsetup_r+0x30>
 8009170:	2209      	movs	r2, #9
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	e033      	b.n	80091e8 <__swsetup_r+0x98>
 8009180:	0758      	lsls	r0, r3, #29
 8009182:	d512      	bpl.n	80091aa <__swsetup_r+0x5a>
 8009184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009186:	b141      	cbz	r1, 800919a <__swsetup_r+0x4a>
 8009188:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800918c:	4299      	cmp	r1, r3
 800918e:	d002      	beq.n	8009196 <__swsetup_r+0x46>
 8009190:	4628      	mov	r0, r5
 8009192:	f7ff f951 	bl	8008438 <_free_r>
 8009196:	2300      	movs	r3, #0
 8009198:	6363      	str	r3, [r4, #52]	@ 0x34
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	2300      	movs	r3, #0
 80091a4:	6063      	str	r3, [r4, #4]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f043 0308 	orr.w	r3, r3, #8
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	b94b      	cbnz	r3, 80091ca <__swsetup_r+0x7a>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c0:	d003      	beq.n	80091ca <__swsetup_r+0x7a>
 80091c2:	4621      	mov	r1, r4
 80091c4:	4628      	mov	r0, r5
 80091c6:	f000 f88a 	bl	80092de <__smakebuf_r>
 80091ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ce:	f013 0201 	ands.w	r2, r3, #1
 80091d2:	d00a      	beq.n	80091ea <__swsetup_r+0x9a>
 80091d4:	2200      	movs	r2, #0
 80091d6:	60a2      	str	r2, [r4, #8]
 80091d8:	6962      	ldr	r2, [r4, #20]
 80091da:	4252      	negs	r2, r2
 80091dc:	61a2      	str	r2, [r4, #24]
 80091de:	6922      	ldr	r2, [r4, #16]
 80091e0:	b942      	cbnz	r2, 80091f4 <__swsetup_r+0xa4>
 80091e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091e6:	d1c5      	bne.n	8009174 <__swsetup_r+0x24>
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	0799      	lsls	r1, r3, #30
 80091ec:	bf58      	it	pl
 80091ee:	6962      	ldrpl	r2, [r4, #20]
 80091f0:	60a2      	str	r2, [r4, #8]
 80091f2:	e7f4      	b.n	80091de <__swsetup_r+0x8e>
 80091f4:	2000      	movs	r0, #0
 80091f6:	e7f7      	b.n	80091e8 <__swsetup_r+0x98>
 80091f8:	20000034 	.word	0x20000034

080091fc <_raise_r>:
 80091fc:	291f      	cmp	r1, #31
 80091fe:	b538      	push	{r3, r4, r5, lr}
 8009200:	4605      	mov	r5, r0
 8009202:	460c      	mov	r4, r1
 8009204:	d904      	bls.n	8009210 <_raise_r+0x14>
 8009206:	2316      	movs	r3, #22
 8009208:	6003      	str	r3, [r0, #0]
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009212:	b112      	cbz	r2, 800921a <_raise_r+0x1e>
 8009214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009218:	b94b      	cbnz	r3, 800922e <_raise_r+0x32>
 800921a:	4628      	mov	r0, r5
 800921c:	f000 f830 	bl	8009280 <_getpid_r>
 8009220:	4622      	mov	r2, r4
 8009222:	4601      	mov	r1, r0
 8009224:	4628      	mov	r0, r5
 8009226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800922a:	f000 b817 	b.w	800925c <_kill_r>
 800922e:	2b01      	cmp	r3, #1
 8009230:	d00a      	beq.n	8009248 <_raise_r+0x4c>
 8009232:	1c59      	adds	r1, r3, #1
 8009234:	d103      	bne.n	800923e <_raise_r+0x42>
 8009236:	2316      	movs	r3, #22
 8009238:	6003      	str	r3, [r0, #0]
 800923a:	2001      	movs	r0, #1
 800923c:	e7e7      	b.n	800920e <_raise_r+0x12>
 800923e:	2100      	movs	r1, #0
 8009240:	4620      	mov	r0, r4
 8009242:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009246:	4798      	blx	r3
 8009248:	2000      	movs	r0, #0
 800924a:	e7e0      	b.n	800920e <_raise_r+0x12>

0800924c <raise>:
 800924c:	4b02      	ldr	r3, [pc, #8]	@ (8009258 <raise+0xc>)
 800924e:	4601      	mov	r1, r0
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	f7ff bfd3 	b.w	80091fc <_raise_r>
 8009256:	bf00      	nop
 8009258:	20000034 	.word	0x20000034

0800925c <_kill_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	2300      	movs	r3, #0
 8009260:	4d06      	ldr	r5, [pc, #24]	@ (800927c <_kill_r+0x20>)
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	f7fa fa86 	bl	800377a <_kill>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d102      	bne.n	8009278 <_kill_r+0x1c>
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	b103      	cbz	r3, 8009278 <_kill_r+0x1c>
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	bf00      	nop
 800927c:	20000790 	.word	0x20000790

08009280 <_getpid_r>:
 8009280:	f7fa ba74 	b.w	800376c <_getpid>

08009284 <_malloc_usable_size_r>:
 8009284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009288:	1f18      	subs	r0, r3, #4
 800928a:	2b00      	cmp	r3, #0
 800928c:	bfbc      	itt	lt
 800928e:	580b      	ldrlt	r3, [r1, r0]
 8009290:	18c0      	addlt	r0, r0, r3
 8009292:	4770      	bx	lr

08009294 <__swhatbuf_r>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	460c      	mov	r4, r1
 8009298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800929c:	4615      	mov	r5, r2
 800929e:	2900      	cmp	r1, #0
 80092a0:	461e      	mov	r6, r3
 80092a2:	b096      	sub	sp, #88	@ 0x58
 80092a4:	da0c      	bge.n	80092c0 <__swhatbuf_r+0x2c>
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	2100      	movs	r1, #0
 80092aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092ae:	bf14      	ite	ne
 80092b0:	2340      	movne	r3, #64	@ 0x40
 80092b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092b6:	2000      	movs	r0, #0
 80092b8:	6031      	str	r1, [r6, #0]
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	b016      	add	sp, #88	@ 0x58
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	466a      	mov	r2, sp
 80092c2:	f000 f849 	bl	8009358 <_fstat_r>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	dbed      	blt.n	80092a6 <__swhatbuf_r+0x12>
 80092ca:	9901      	ldr	r1, [sp, #4]
 80092cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092d4:	4259      	negs	r1, r3
 80092d6:	4159      	adcs	r1, r3
 80092d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092dc:	e7eb      	b.n	80092b6 <__swhatbuf_r+0x22>

080092de <__smakebuf_r>:
 80092de:	898b      	ldrh	r3, [r1, #12]
 80092e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092e2:	079d      	lsls	r5, r3, #30
 80092e4:	4606      	mov	r6, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	d507      	bpl.n	80092fa <__smakebuf_r+0x1c>
 80092ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	2301      	movs	r3, #1
 80092f4:	6163      	str	r3, [r4, #20]
 80092f6:	b003      	add	sp, #12
 80092f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fa:	466a      	mov	r2, sp
 80092fc:	ab01      	add	r3, sp, #4
 80092fe:	f7ff ffc9 	bl	8009294 <__swhatbuf_r>
 8009302:	9f00      	ldr	r7, [sp, #0]
 8009304:	4605      	mov	r5, r0
 8009306:	4639      	mov	r1, r7
 8009308:	4630      	mov	r0, r6
 800930a:	f7ff f907 	bl	800851c <_malloc_r>
 800930e:	b948      	cbnz	r0, 8009324 <__smakebuf_r+0x46>
 8009310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009314:	059a      	lsls	r2, r3, #22
 8009316:	d4ee      	bmi.n	80092f6 <__smakebuf_r+0x18>
 8009318:	f023 0303 	bic.w	r3, r3, #3
 800931c:	f043 0302 	orr.w	r3, r3, #2
 8009320:	81a3      	strh	r3, [r4, #12]
 8009322:	e7e2      	b.n	80092ea <__smakebuf_r+0xc>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800932a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	6020      	str	r0, [r4, #0]
 8009334:	b15b      	cbz	r3, 800934e <__smakebuf_r+0x70>
 8009336:	4630      	mov	r0, r6
 8009338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800933c:	f000 f81e 	bl	800937c <_isatty_r>
 8009340:	b128      	cbz	r0, 800934e <__smakebuf_r+0x70>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f023 0303 	bic.w	r3, r3, #3
 8009348:	f043 0301 	orr.w	r3, r3, #1
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	431d      	orrs	r5, r3
 8009352:	81a5      	strh	r5, [r4, #12]
 8009354:	e7cf      	b.n	80092f6 <__smakebuf_r+0x18>
	...

08009358 <_fstat_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	2300      	movs	r3, #0
 800935c:	4d06      	ldr	r5, [pc, #24]	@ (8009378 <_fstat_r+0x20>)
 800935e:	4604      	mov	r4, r0
 8009360:	4608      	mov	r0, r1
 8009362:	4611      	mov	r1, r2
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	f7fa fa67 	bl	8003838 <_fstat>
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	d102      	bne.n	8009374 <_fstat_r+0x1c>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b103      	cbz	r3, 8009374 <_fstat_r+0x1c>
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	bd38      	pop	{r3, r4, r5, pc}
 8009376:	bf00      	nop
 8009378:	20000790 	.word	0x20000790

0800937c <_isatty_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	2300      	movs	r3, #0
 8009380:	4d05      	ldr	r5, [pc, #20]	@ (8009398 <_isatty_r+0x1c>)
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7fa fa65 	bl	8003856 <_isatty>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_isatty_r+0x1a>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_isatty_r+0x1a>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	20000790 	.word	0x20000790

0800939c <_init>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr

080093a8 <_fini>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	bf00      	nop
 80093ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ae:	bc08      	pop	{r3}
 80093b0:	469e      	mov	lr, r3
 80093b2:	4770      	bx	lr
